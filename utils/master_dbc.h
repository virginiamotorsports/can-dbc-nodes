/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 39.4.5 Thu May 16 16:48:09 2024.
 */

#ifndef MASTER_DBC_H
#define MASTER_DBC_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define MASTER_DBC_M173_MODULATION_AND_FLUX_INFO_FRAME_ID (0xadu)
#define MASTER_DBC_M172_TORQUE_AND_TIMER_INFO_FRAME_ID (0xacu)
#define MASTER_DBC_M194_READ_WRITE_PARAM_RESPONSE_FRAME_ID (0xc2u)
#define MASTER_DBC_M193_READ_WRITE_PARAM_COMMAND_FRAME_ID (0xc1u)
#define MASTER_DBC_M192_COMMAND_MESSAGE_FRAME_ID (0xc0u)
#define MASTER_DBC_M171_FAULT_CODES_FRAME_ID (0xabu)
#define MASTER_DBC_M170_INTERNAL_STATES_FRAME_ID (0xaau)
#define MASTER_DBC_M169_INTERNAL_VOLTAGES_FRAME_ID (0xa9u)
#define MASTER_DBC_M168_FLUX_ID_IQ_INFO_FRAME_ID (0xa8u)
#define MASTER_DBC_M167_VOLTAGE_INFO_FRAME_ID (0xa7u)
#define MASTER_DBC_M166_CURRENT_INFO_FRAME_ID (0xa6u)
#define MASTER_DBC_M165_MOTOR_POSITION_INFO_FRAME_ID (0xa5u)
#define MASTER_DBC_M164_DIGITAL_INPUT_STATUS_FRAME_ID (0xa4u)
#define MASTER_DBC_M163_ANALOG_INPUT_VOLTAGES_FRAME_ID (0xa3u)
#define MASTER_DBC_M162_TEMPERATURE_SET_3_FRAME_ID (0xa2u)
#define MASTER_DBC_M161_TEMPERATURE_SET_2_FRAME_ID (0xa1u)
#define MASTER_DBC_M160_TEMPERATURE_SET_1_FRAME_ID (0xa0u)
#define MASTER_DBC_M174_FIRMWARE_INFO_FRAME_ID (0xaeu)
#define MASTER_DBC_M175_DIAG_DATA_MESSAGE_FRAME_ID (0xafu)
#define MASTER_DBC_BMS_CURRENT_LIMIT_FRAME_ID (0x202u)
#define MASTER_DBC_M176_FAST_INFO_FRAME_ID (0xb0u)
#define MASTER_DBC_M177_TORQUE_CAPABILITY_FRAME_ID (0xb1u)
#define MASTER_DBC_LF_IRTS_BRAKE_5_FRAME_ID (0x4c8u)
#define MASTER_DBC_RF_IRTS_BRAKE_5_FRAME_ID (0x4cdu)
#define MASTER_DBC_RR_IRTS_BRAKE_5_FRAME_ID (0x4d7u)
#define MASTER_DBC_LR_IRTS_BRAKE_5_FRAME_ID (0x4d2u)
#define MASTER_DBC_LF_IRTS_BRAKE_1_FRAME_ID (0x4c4u)
#define MASTER_DBC_LF_IRTS_BRAKE_2_FRAME_ID (0x4c5u)
#define MASTER_DBC_LF_IRTS_BRAKE_3_FRAME_ID (0x4c6u)
#define MASTER_DBC_LF_IRTS_BRAKE_4_FRAME_ID (0x4c7u)
#define MASTER_DBC_RF_IRTS_BRAKE_1_FRAME_ID (0x4c9u)
#define MASTER_DBC_RF_IRTS_BRAKE_2_FRAME_ID (0x4cau)
#define MASTER_DBC_RF_IRTS_BRAKE_3_FRAME_ID (0x4cbu)
#define MASTER_DBC_RF_IRTS_BRAKE_4_FRAME_ID (0x4ccu)
#define MASTER_DBC_LR_IRTS_BRAKE_1_FRAME_ID (0x4ceu)
#define MASTER_DBC_LR_IRTS_BRAKE_2_FRAME_ID (0x4cfu)
#define MASTER_DBC_LR_IRTS_BRAKE_3_FRAME_ID (0x4d0u)
#define MASTER_DBC_LR_IRTS_BRAKE_4_FRAME_ID (0x4d1u)
#define MASTER_DBC_RR_IRTS_BRAKE_1_FRAME_ID (0x4d3u)
#define MASTER_DBC_RR_IRTS_BRAKE_2_FRAME_ID (0x4d4u)
#define MASTER_DBC_RR_IRTS_BRAKE_3_FRAME_ID (0x4d5u)
#define MASTER_DBC_RR_IRTS_BRAKE_4_FRAME_ID (0x4d6u)
#define MASTER_DBC_STATUS_FRAME_ID (0x100u)
#define MASTER_DBC_FAULTS_FRAME_ID (0x101u)
#define MASTER_DBC_DASHBOARD_FRAME_ID (0x102u)
#define MASTER_DBC_TEMP1_FRAME_ID (0x103u)
#define MASTER_DBC_TEMP2_FRAME_ID (0x104u)
#define MASTER_DBC_TEMP3_FRAME_ID (0x105u)
#define MASTER_DBC_TEMP4_FRAME_ID (0x106u)
#define MASTER_DBC_TEMP5_FRAME_ID (0x107u)
#define MASTER_DBC_TEMP6_FRAME_ID (0x108u)
#define MASTER_DBC_VOLTAGE1_FRAME_ID (0x109u)
#define MASTER_DBC_VOLTAGE2_FRAME_ID (0x10au)
#define MASTER_DBC_VOLTAGE3_FRAME_ID (0x10bu)
#define MASTER_DBC_VOLTAGE4_FRAME_ID (0x10cu)
#define MASTER_DBC_VOLTAGE5_FRAME_ID (0x10du)
#define MASTER_DBC_VOLTAGE6_FRAME_ID (0x10eu)
#define MASTER_DBC_VOLTAGE7_FRAME_ID (0x10fu)
#define MASTER_DBC_VOLTAGE8_FRAME_ID (0x110u)
#define MASTER_DBC_VOLTAGE9_FRAME_ID (0x111u)
#define MASTER_DBC_VOLTAGE10_FRAME_ID (0x112u)
#define MASTER_DBC_VOLTAGE11_FRAME_ID (0x113u)
#define MASTER_DBC_VOLTAGE12_FRAME_ID (0x114u)
#define MASTER_DBC_ORION_MSG1_FRAME_ID (0x6b0u)
#define MASTER_DBC_ORION_MSG2_FRAME_ID (0x6b1u)
#define MASTER_DBC_ORION_MSG3_FRAME_ID (0x6b2u)
#define MASTER_DBC_M100_VCU_STATES1_FRAME_ID (0x2f0a000u)
#define MASTER_DBC_M102_VCU_STATES2_FRAME_ID (0x2f0a002u)
#define MASTER_DBC_M104_VCU_STATES3_FRAME_ID (0x2f0a004u)
#define MASTER_DBC_M106_DRIVER_INPUTS1_FRAME_ID (0x2f0a006u)
#define MASTER_DBC_M108_DRIVER_INPUTS2_FRAME_ID (0x2f0a008u)
#define MASTER_DBC_M112_VEHICLE_INPUTS1_FRAME_ID (0x2f0a012u)
#define MASTER_DBC_M114_VEHICLE_INPUTS2_FRAME_ID (0x2f0a014u)
#define MASTER_DBC_M116_VEHICLE_INPUTS3_FRAME_ID (0x2f0a016u)
#define MASTER_DBC_M118_VEHICLE_INPUTS4_FRAME_ID (0x2f0a018u)
#define MASTER_DBC_M120_MOTOR_TORQUE_DATA1_FRAME_ID (0x2f0a020u)
#define MASTER_DBC_M122_MOTOR_TORQUE_DATA2_FRAME_ID (0x2f0a022u)
#define MASTER_DBC_M124_MOTOR_TORQUE_DATA3_FRAME_ID (0x2f0a024u)
#define MASTER_DBC_M126_MOTOR_TORQUE_DATA4_FRAME_ID (0x2f0a026u)
#define MASTER_DBC_M128_MOTOR_TORQUE_DATA5_FRAME_ID (0x2f0a028u)
#define MASTER_DBC_M130_MOTOR_TORQUE_DATA6_FRAME_ID (0x2f0a030u)
#define MASTER_DBC_M132_MOTOR_TORQUE_DATA7_FRAME_ID (0x2f0a032u)
#define MASTER_DBC_M134_MOTOR_TORQUE_DATA8_FRAME_ID (0x2f0a034u)
#define MASTER_DBC_M136_MOTOR_SPEED_DATA1_FRAME_ID (0x2f0a036u)
#define MASTER_DBC_M138_MOTOR_SPEED_DATA2_FRAME_ID (0x2f0a038u)
#define MASTER_DBC_M140_MOTOR_SPEED_DATA3_FRAME_ID (0x2f0a040u)
#define MASTER_DBC_M144_VCU_FAULT_STATES1_FRAME_ID (0x2f0a044u)

/* Frame lengths in bytes. */
#define MASTER_DBC_M173_MODULATION_AND_FLUX_INFO_LENGTH (8u)
#define MASTER_DBC_M172_TORQUE_AND_TIMER_INFO_LENGTH (8u)
#define MASTER_DBC_M194_READ_WRITE_PARAM_RESPONSE_LENGTH (8u)
#define MASTER_DBC_M193_READ_WRITE_PARAM_COMMAND_LENGTH (8u)
#define MASTER_DBC_M192_COMMAND_MESSAGE_LENGTH (8u)
#define MASTER_DBC_M171_FAULT_CODES_LENGTH (8u)
#define MASTER_DBC_M170_INTERNAL_STATES_LENGTH (8u)
#define MASTER_DBC_M169_INTERNAL_VOLTAGES_LENGTH (8u)
#define MASTER_DBC_M168_FLUX_ID_IQ_INFO_LENGTH (8u)
#define MASTER_DBC_M167_VOLTAGE_INFO_LENGTH (8u)
#define MASTER_DBC_M166_CURRENT_INFO_LENGTH (8u)
#define MASTER_DBC_M165_MOTOR_POSITION_INFO_LENGTH (8u)
#define MASTER_DBC_M164_DIGITAL_INPUT_STATUS_LENGTH (8u)
#define MASTER_DBC_M163_ANALOG_INPUT_VOLTAGES_LENGTH (8u)
#define MASTER_DBC_M162_TEMPERATURE_SET_3_LENGTH (8u)
#define MASTER_DBC_M161_TEMPERATURE_SET_2_LENGTH (8u)
#define MASTER_DBC_M160_TEMPERATURE_SET_1_LENGTH (8u)
#define MASTER_DBC_M174_FIRMWARE_INFO_LENGTH (8u)
#define MASTER_DBC_M175_DIAG_DATA_MESSAGE_LENGTH (8u)
#define MASTER_DBC_BMS_CURRENT_LIMIT_LENGTH (8u)
#define MASTER_DBC_M176_FAST_INFO_LENGTH (8u)
#define MASTER_DBC_M177_TORQUE_CAPABILITY_LENGTH (8u)
#define MASTER_DBC_LF_IRTS_BRAKE_5_LENGTH (2u)
#define MASTER_DBC_RF_IRTS_BRAKE_5_LENGTH (2u)
#define MASTER_DBC_RR_IRTS_BRAKE_5_LENGTH (2u)
#define MASTER_DBC_LR_IRTS_BRAKE_5_LENGTH (2u)
#define MASTER_DBC_LF_IRTS_BRAKE_1_LENGTH (8u)
#define MASTER_DBC_LF_IRTS_BRAKE_2_LENGTH (8u)
#define MASTER_DBC_LF_IRTS_BRAKE_3_LENGTH (8u)
#define MASTER_DBC_LF_IRTS_BRAKE_4_LENGTH (8u)
#define MASTER_DBC_RF_IRTS_BRAKE_1_LENGTH (8u)
#define MASTER_DBC_RF_IRTS_BRAKE_2_LENGTH (8u)
#define MASTER_DBC_RF_IRTS_BRAKE_3_LENGTH (8u)
#define MASTER_DBC_RF_IRTS_BRAKE_4_LENGTH (8u)
#define MASTER_DBC_LR_IRTS_BRAKE_1_LENGTH (8u)
#define MASTER_DBC_LR_IRTS_BRAKE_2_LENGTH (8u)
#define MASTER_DBC_LR_IRTS_BRAKE_3_LENGTH (8u)
#define MASTER_DBC_LR_IRTS_BRAKE_4_LENGTH (8u)
#define MASTER_DBC_RR_IRTS_BRAKE_1_LENGTH (8u)
#define MASTER_DBC_RR_IRTS_BRAKE_2_LENGTH (8u)
#define MASTER_DBC_RR_IRTS_BRAKE_3_LENGTH (8u)
#define MASTER_DBC_RR_IRTS_BRAKE_4_LENGTH (8u)
#define MASTER_DBC_STATUS_LENGTH (8u)
#define MASTER_DBC_FAULTS_LENGTH (8u)
#define MASTER_DBC_DASHBOARD_LENGTH (8u)
#define MASTER_DBC_TEMP1_LENGTH (8u)
#define MASTER_DBC_TEMP2_LENGTH (8u)
#define MASTER_DBC_TEMP3_LENGTH (8u)
#define MASTER_DBC_TEMP4_LENGTH (8u)
#define MASTER_DBC_TEMP5_LENGTH (8u)
#define MASTER_DBC_TEMP6_LENGTH (8u)
#define MASTER_DBC_VOLTAGE1_LENGTH (8u)
#define MASTER_DBC_VOLTAGE2_LENGTH (8u)
#define MASTER_DBC_VOLTAGE3_LENGTH (8u)
#define MASTER_DBC_VOLTAGE4_LENGTH (8u)
#define MASTER_DBC_VOLTAGE5_LENGTH (8u)
#define MASTER_DBC_VOLTAGE6_LENGTH (8u)
#define MASTER_DBC_VOLTAGE7_LENGTH (8u)
#define MASTER_DBC_VOLTAGE8_LENGTH (8u)
#define MASTER_DBC_VOLTAGE9_LENGTH (8u)
#define MASTER_DBC_VOLTAGE10_LENGTH (8u)
#define MASTER_DBC_VOLTAGE11_LENGTH (8u)
#define MASTER_DBC_VOLTAGE12_LENGTH (8u)
#define MASTER_DBC_ORION_MSG1_LENGTH (8u)
#define MASTER_DBC_ORION_MSG2_LENGTH (8u)
#define MASTER_DBC_ORION_MSG3_LENGTH (8u)
#define MASTER_DBC_M100_VCU_STATES1_LENGTH (8u)
#define MASTER_DBC_M102_VCU_STATES2_LENGTH (8u)
#define MASTER_DBC_M104_VCU_STATES3_LENGTH (8u)
#define MASTER_DBC_M106_DRIVER_INPUTS1_LENGTH (8u)
#define MASTER_DBC_M108_DRIVER_INPUTS2_LENGTH (8u)
#define MASTER_DBC_M112_VEHICLE_INPUTS1_LENGTH (8u)
#define MASTER_DBC_M114_VEHICLE_INPUTS2_LENGTH (8u)
#define MASTER_DBC_M116_VEHICLE_INPUTS3_LENGTH (7u)
#define MASTER_DBC_M118_VEHICLE_INPUTS4_LENGTH (4u)
#define MASTER_DBC_M120_MOTOR_TORQUE_DATA1_LENGTH (8u)
#define MASTER_DBC_M122_MOTOR_TORQUE_DATA2_LENGTH (8u)
#define MASTER_DBC_M124_MOTOR_TORQUE_DATA3_LENGTH (8u)
#define MASTER_DBC_M126_MOTOR_TORQUE_DATA4_LENGTH (8u)
#define MASTER_DBC_M128_MOTOR_TORQUE_DATA5_LENGTH (8u)
#define MASTER_DBC_M130_MOTOR_TORQUE_DATA6_LENGTH (8u)
#define MASTER_DBC_M132_MOTOR_TORQUE_DATA7_LENGTH (8u)
#define MASTER_DBC_M134_MOTOR_TORQUE_DATA8_LENGTH (8u)
#define MASTER_DBC_M136_MOTOR_SPEED_DATA1_LENGTH (8u)
#define MASTER_DBC_M138_MOTOR_SPEED_DATA2_LENGTH (8u)
#define MASTER_DBC_M140_MOTOR_SPEED_DATA3_LENGTH (6u)
#define MASTER_DBC_M144_VCU_FAULT_STATES1_LENGTH (7u)

/* Extended or standard frame types. */
#define MASTER_DBC_M173_MODULATION_AND_FLUX_INFO_IS_EXTENDED (0)
#define MASTER_DBC_M172_TORQUE_AND_TIMER_INFO_IS_EXTENDED (0)
#define MASTER_DBC_M194_READ_WRITE_PARAM_RESPONSE_IS_EXTENDED (0)
#define MASTER_DBC_M193_READ_WRITE_PARAM_COMMAND_IS_EXTENDED (0)
#define MASTER_DBC_M192_COMMAND_MESSAGE_IS_EXTENDED (0)
#define MASTER_DBC_M171_FAULT_CODES_IS_EXTENDED (0)
#define MASTER_DBC_M170_INTERNAL_STATES_IS_EXTENDED (0)
#define MASTER_DBC_M169_INTERNAL_VOLTAGES_IS_EXTENDED (0)
#define MASTER_DBC_M168_FLUX_ID_IQ_INFO_IS_EXTENDED (0)
#define MASTER_DBC_M167_VOLTAGE_INFO_IS_EXTENDED (0)
#define MASTER_DBC_M166_CURRENT_INFO_IS_EXTENDED (0)
#define MASTER_DBC_M165_MOTOR_POSITION_INFO_IS_EXTENDED (0)
#define MASTER_DBC_M164_DIGITAL_INPUT_STATUS_IS_EXTENDED (0)
#define MASTER_DBC_M163_ANALOG_INPUT_VOLTAGES_IS_EXTENDED (0)
#define MASTER_DBC_M162_TEMPERATURE_SET_3_IS_EXTENDED (0)
#define MASTER_DBC_M161_TEMPERATURE_SET_2_IS_EXTENDED (0)
#define MASTER_DBC_M160_TEMPERATURE_SET_1_IS_EXTENDED (0)
#define MASTER_DBC_M174_FIRMWARE_INFO_IS_EXTENDED (0)
#define MASTER_DBC_M175_DIAG_DATA_MESSAGE_IS_EXTENDED (0)
#define MASTER_DBC_BMS_CURRENT_LIMIT_IS_EXTENDED (0)
#define MASTER_DBC_M176_FAST_INFO_IS_EXTENDED (0)
#define MASTER_DBC_M177_TORQUE_CAPABILITY_IS_EXTENDED (0)
#define MASTER_DBC_LF_IRTS_BRAKE_5_IS_EXTENDED (0)
#define MASTER_DBC_RF_IRTS_BRAKE_5_IS_EXTENDED (0)
#define MASTER_DBC_RR_IRTS_BRAKE_5_IS_EXTENDED (0)
#define MASTER_DBC_LR_IRTS_BRAKE_5_IS_EXTENDED (0)
#define MASTER_DBC_LF_IRTS_BRAKE_1_IS_EXTENDED (0)
#define MASTER_DBC_LF_IRTS_BRAKE_2_IS_EXTENDED (0)
#define MASTER_DBC_LF_IRTS_BRAKE_3_IS_EXTENDED (0)
#define MASTER_DBC_LF_IRTS_BRAKE_4_IS_EXTENDED (0)
#define MASTER_DBC_RF_IRTS_BRAKE_1_IS_EXTENDED (0)
#define MASTER_DBC_RF_IRTS_BRAKE_2_IS_EXTENDED (0)
#define MASTER_DBC_RF_IRTS_BRAKE_3_IS_EXTENDED (0)
#define MASTER_DBC_RF_IRTS_BRAKE_4_IS_EXTENDED (0)
#define MASTER_DBC_LR_IRTS_BRAKE_1_IS_EXTENDED (0)
#define MASTER_DBC_LR_IRTS_BRAKE_2_IS_EXTENDED (0)
#define MASTER_DBC_LR_IRTS_BRAKE_3_IS_EXTENDED (0)
#define MASTER_DBC_LR_IRTS_BRAKE_4_IS_EXTENDED (0)
#define MASTER_DBC_RR_IRTS_BRAKE_1_IS_EXTENDED (0)
#define MASTER_DBC_RR_IRTS_BRAKE_2_IS_EXTENDED (0)
#define MASTER_DBC_RR_IRTS_BRAKE_3_IS_EXTENDED (0)
#define MASTER_DBC_RR_IRTS_BRAKE_4_IS_EXTENDED (0)
#define MASTER_DBC_STATUS_IS_EXTENDED (0)
#define MASTER_DBC_FAULTS_IS_EXTENDED (0)
#define MASTER_DBC_DASHBOARD_IS_EXTENDED (0)
#define MASTER_DBC_TEMP1_IS_EXTENDED (0)
#define MASTER_DBC_TEMP2_IS_EXTENDED (0)
#define MASTER_DBC_TEMP3_IS_EXTENDED (0)
#define MASTER_DBC_TEMP4_IS_EXTENDED (0)
#define MASTER_DBC_TEMP5_IS_EXTENDED (0)
#define MASTER_DBC_TEMP6_IS_EXTENDED (0)
#define MASTER_DBC_VOLTAGE1_IS_EXTENDED (0)
#define MASTER_DBC_VOLTAGE2_IS_EXTENDED (0)
#define MASTER_DBC_VOLTAGE3_IS_EXTENDED (0)
#define MASTER_DBC_VOLTAGE4_IS_EXTENDED (0)
#define MASTER_DBC_VOLTAGE5_IS_EXTENDED (0)
#define MASTER_DBC_VOLTAGE6_IS_EXTENDED (0)
#define MASTER_DBC_VOLTAGE7_IS_EXTENDED (0)
#define MASTER_DBC_VOLTAGE8_IS_EXTENDED (0)
#define MASTER_DBC_VOLTAGE9_IS_EXTENDED (0)
#define MASTER_DBC_VOLTAGE10_IS_EXTENDED (0)
#define MASTER_DBC_VOLTAGE11_IS_EXTENDED (0)
#define MASTER_DBC_VOLTAGE12_IS_EXTENDED (0)
#define MASTER_DBC_ORION_MSG1_IS_EXTENDED (0)
#define MASTER_DBC_ORION_MSG2_IS_EXTENDED (0)
#define MASTER_DBC_ORION_MSG3_IS_EXTENDED (0)
#define MASTER_DBC_M100_VCU_STATES1_IS_EXTENDED (1)
#define MASTER_DBC_M102_VCU_STATES2_IS_EXTENDED (1)
#define MASTER_DBC_M104_VCU_STATES3_IS_EXTENDED (1)
#define MASTER_DBC_M106_DRIVER_INPUTS1_IS_EXTENDED (1)
#define MASTER_DBC_M108_DRIVER_INPUTS2_IS_EXTENDED (1)
#define MASTER_DBC_M112_VEHICLE_INPUTS1_IS_EXTENDED (1)
#define MASTER_DBC_M114_VEHICLE_INPUTS2_IS_EXTENDED (1)
#define MASTER_DBC_M116_VEHICLE_INPUTS3_IS_EXTENDED (1)
#define MASTER_DBC_M118_VEHICLE_INPUTS4_IS_EXTENDED (1)
#define MASTER_DBC_M120_MOTOR_TORQUE_DATA1_IS_EXTENDED (1)
#define MASTER_DBC_M122_MOTOR_TORQUE_DATA2_IS_EXTENDED (1)
#define MASTER_DBC_M124_MOTOR_TORQUE_DATA3_IS_EXTENDED (1)
#define MASTER_DBC_M126_MOTOR_TORQUE_DATA4_IS_EXTENDED (1)
#define MASTER_DBC_M128_MOTOR_TORQUE_DATA5_IS_EXTENDED (1)
#define MASTER_DBC_M130_MOTOR_TORQUE_DATA6_IS_EXTENDED (1)
#define MASTER_DBC_M132_MOTOR_TORQUE_DATA7_IS_EXTENDED (1)
#define MASTER_DBC_M134_MOTOR_TORQUE_DATA8_IS_EXTENDED (1)
#define MASTER_DBC_M136_MOTOR_SPEED_DATA1_IS_EXTENDED (1)
#define MASTER_DBC_M138_MOTOR_SPEED_DATA2_IS_EXTENDED (1)
#define MASTER_DBC_M140_MOTOR_SPEED_DATA3_IS_EXTENDED (1)
#define MASTER_DBC_M144_VCU_FAULT_STATES1_IS_EXTENDED (1)

/* Frame cycle times in milliseconds. */
#define MASTER_DBC_M172_TORQUE_AND_TIMER_INFO_CYCLE_TIME_MS (10u)
#define MASTER_DBC_M192_COMMAND_MESSAGE_CYCLE_TIME_MS (10u)
#define MASTER_DBC_M171_FAULT_CODES_CYCLE_TIME_MS (100u)
#define MASTER_DBC_M170_INTERNAL_STATES_CYCLE_TIME_MS (100u)
#define MASTER_DBC_M169_INTERNAL_VOLTAGES_CYCLE_TIME_MS (100u)
#define MASTER_DBC_M168_FLUX_ID_IQ_INFO_CYCLE_TIME_MS (10u)
#define MASTER_DBC_M167_VOLTAGE_INFO_CYCLE_TIME_MS (10u)
#define MASTER_DBC_M166_CURRENT_INFO_CYCLE_TIME_MS (10u)
#define MASTER_DBC_M165_MOTOR_POSITION_INFO_CYCLE_TIME_MS (10u)
#define MASTER_DBC_M164_DIGITAL_INPUT_STATUS_CYCLE_TIME_MS (10u)
#define MASTER_DBC_M163_ANALOG_INPUT_VOLTAGES_CYCLE_TIME_MS (10u)
#define MASTER_DBC_M162_TEMPERATURE_SET_3_CYCLE_TIME_MS (100u)
#define MASTER_DBC_M161_TEMPERATURE_SET_2_CYCLE_TIME_MS (100u)
#define MASTER_DBC_M160_TEMPERATURE_SET_1_CYCLE_TIME_MS (100u)
#define MASTER_DBC_M176_FAST_INFO_CYCLE_TIME_MS (3u)
#define MASTER_DBC_M177_TORQUE_CAPABILITY_CYCLE_TIME_MS (10u)

/* Signal choices. */
#define MASTER_DBC_M192_COMMAND_MESSAGE_VCU_INV_DIRECTION_COMMAND_CW_CHOICE (0u)
#define MASTER_DBC_M192_COMMAND_MESSAGE_VCU_INV_DIRECTION_COMMAND_CCW_CHOICE (1u)

#define MASTER_DBC_M192_COMMAND_MESSAGE_VCU_INV_INVERTER_ENABLE_TURN_THE_INVERTER_OFF_CHOICE (0u)
#define MASTER_DBC_M192_COMMAND_MESSAGE_VCU_INV_INVERTER_ENABLE_TURN_THE__INVERTER_ON_CHOICE (1u)

#define MASTER_DBC_M192_COMMAND_MESSAGE_VCU_INV_INVERTER_DISCHARGE_DISCHARGE__DISABLE_CHOICE (0u)
#define MASTER_DBC_M192_COMMAND_MESSAGE_VCU_INV_INVERTER_DISCHARGE_DISCHARGE__ENABLE__IF_EEPROM_PARAMETER_IS_SET__CHOICE (1u)

#define MASTER_DBC_M170_INTERNAL_STATES_INV_VSM_STATE_VSM__START__STATE_CHOICE (0u)
#define MASTER_DBC_M170_INTERNAL_STATES_INV_VSM_STATE_PRE__CHARGE__INIT_STATE_CHOICE (1u)
#define MASTER_DBC_M170_INTERNAL_STATES_INV_VSM_STATE_PRE_CHARGE_ACTIVE_STATE_CHOICE (2u)
#define MASTER_DBC_M170_INTERNAL_STATES_INV_VSM_STATE_PRE_CHARGE_COMPLETE_STATE_CHOICE (3u)
#define MASTER_DBC_M170_INTERNAL_STATES_INV_VSM_STATE_VSM_WAIT_STATE_CHOICE (4u)
#define MASTER_DBC_M170_INTERNAL_STATES_INV_VSM_STATE_VSM_READY_STATE_CHOICE (5u)
#define MASTER_DBC_M170_INTERNAL_STATES_INV_VSM_STATE_MOTOR__RUNNING__STATE_CHOICE (6u)
#define MASTER_DBC_M170_INTERNAL_STATES_INV_VSM_STATE_BLINK_FAULT_CODE_STATE_CHOICE (7u)
#define MASTER_DBC_M170_INTERNAL_STATES_INV_VSM_STATE_SHUTDOWN_STATE_FOR__KEY__SWITCH__MODE_1_CHOICE (14u)
#define MASTER_DBC_M170_INTERNAL_STATES_INV_VSM_STATE_RESET_THE_INVERTER_CHOICE (15u)

#define MASTER_DBC_M170_INTERNAL_STATES_INV_INVERTER_STATE_POWER_UP_CHOICE (0u)
#define MASTER_DBC_M170_INTERNAL_STATES_INV_INVERTER_STATE_STOP_CHOICE (1u)
#define MASTER_DBC_M170_INTERNAL_STATES_INV_INVERTER_STATE_OPEN__LOOP_CHOICE (2u)
#define MASTER_DBC_M170_INTERNAL_STATES_INV_INVERTER_STATE_CLOSED__LOOP_CHOICE (3u)
#define MASTER_DBC_M170_INTERNAL_STATES_INV_INVERTER_STATE_INTERNAL__STATE_4_CHOICE (4u)
#define MASTER_DBC_M170_INTERNAL_STATES_INV_INVERTER_STATE_INTERNAL__STATE_5_CHOICE (5u)
#define MASTER_DBC_M170_INTERNAL_STATES_INV_INVERTER_STATE_INTERNAL__STATE_6_CHOICE (6u)
#define MASTER_DBC_M170_INTERNAL_STATES_INV_INVERTER_STATE_INTERNAL__STATE_7_CHOICE (7u)
#define MASTER_DBC_M170_INTERNAL_STATES_INV_INVERTER_STATE_IDLE__RUN_CHOICE (8u)
#define MASTER_DBC_M170_INTERNAL_STATES_INV_INVERTER_STATE_IDLE__STOP_CHOICE (9u)
#define MASTER_DBC_M170_INTERNAL_STATES_INV_INVERTER_STATE_INTERNAL__STATE_10_CHOICE (10u)
#define MASTER_DBC_M170_INTERNAL_STATES_INV_INVERTER_STATE_INTERN__STATE_CHOICE (11u)
#define MASTER_DBC_M170_INTERNAL_STATES_INV_INVERTER_STATE_INTERNAL__STATE_12_CHOICE (12u)

#define MASTER_DBC_M170_INTERNAL_STATES_INV_INVERTER_DISCHARGE_STATE_DISABLED_CHOICE (0u)
#define MASTER_DBC_M170_INTERNAL_STATES_INV_INVERTER_DISCHARGE_STATE_ENABLED_CHOICE (1u)
#define MASTER_DBC_M170_INTERNAL_STATES_INV_INVERTER_DISCHARGE_STATE_SPEED__CHECK_CHOICE (2u)
#define MASTER_DBC_M170_INTERNAL_STATES_INV_INVERTER_DISCHARGE_STATE_ACTIVE_CHOICE (3u)
#define MASTER_DBC_M170_INTERNAL_STATES_INV_INVERTER_DISCHARGE_STATE_COMPLETE_CHOICE (4u)
#define MASTER_DBC_M170_INTERNAL_STATES_INV_INVERTER_DISCHARGE_STATE_ERROR_CHOICE (5u)
#define MASTER_DBC_M170_INTERNAL_STATES_INV_INVERTER_DISCHARGE_STATE_OVERRIDE_CHOICE (6u)
#define MASTER_DBC_M170_INTERNAL_STATES_INV_INVERTER_DISCHARGE_STATE_TIMEOUT_CHOICE (7u)

#define MASTER_DBC_M170_INTERNAL_STATES_INV_BURST_MODEL_MODE_STALL_CHOICE (0u)
#define MASTER_DBC_M170_INTERNAL_STATES_INV_BURST_MODEL_MODE_HIGH__SPEED_CHOICE (1u)

#define MASTER_DBC_M170_INTERNAL_STATES_INV_LIMIT_STALL_BURST_MODEL_NOT__LIMITING_CHOICE (0u)
#define MASTER_DBC_M170_INTERNAL_STATES_INV_LIMIT_STALL_BURST_MODEL_LIMITING_CHOICE (1u)

/* Frame Names. */
#define MASTER_DBC_M173_MODULATION_AND_FLUX_INFO_NAME "M173_Modulation_And_Flux_Info"
#define MASTER_DBC_M172_TORQUE_AND_TIMER_INFO_NAME "M172_Torque_And_Timer_Info"
#define MASTER_DBC_M194_READ_WRITE_PARAM_RESPONSE_NAME "M194_Read_Write_Param_Response"
#define MASTER_DBC_M193_READ_WRITE_PARAM_COMMAND_NAME "M193_Read_Write_Param_Command"
#define MASTER_DBC_M192_COMMAND_MESSAGE_NAME "M192_Command_Message"
#define MASTER_DBC_M171_FAULT_CODES_NAME "M171_Fault_Codes"
#define MASTER_DBC_M170_INTERNAL_STATES_NAME "M170_Internal_States"
#define MASTER_DBC_M169_INTERNAL_VOLTAGES_NAME "M169_Internal_Voltages"
#define MASTER_DBC_M168_FLUX_ID_IQ_INFO_NAME "M168_Flux_ID_IQ_Info"
#define MASTER_DBC_M167_VOLTAGE_INFO_NAME "M167_Voltage_Info"
#define MASTER_DBC_M166_CURRENT_INFO_NAME "M166_Current_Info"
#define MASTER_DBC_M165_MOTOR_POSITION_INFO_NAME "M165_Motor_Position_Info"
#define MASTER_DBC_M164_DIGITAL_INPUT_STATUS_NAME "M164_Digital_Input_Status"
#define MASTER_DBC_M163_ANALOG_INPUT_VOLTAGES_NAME "M163_Analog_Input_Voltages"
#define MASTER_DBC_M162_TEMPERATURE_SET_3_NAME "M162_Temperature_Set_3"
#define MASTER_DBC_M161_TEMPERATURE_SET_2_NAME "M161_Temperature_Set_2"
#define MASTER_DBC_M160_TEMPERATURE_SET_1_NAME "M160_Temperature_Set_1"
#define MASTER_DBC_M174_FIRMWARE_INFO_NAME "M174_Firmware_Info"
#define MASTER_DBC_M175_DIAG_DATA_MESSAGE_NAME "M175_Diag_Data_Message"
#define MASTER_DBC_BMS_CURRENT_LIMIT_NAME "BMS_Current_Limit"
#define MASTER_DBC_M176_FAST_INFO_NAME "M176_Fast_Info"
#define MASTER_DBC_M177_TORQUE_CAPABILITY_NAME "M177_Torque_Capability"
#define MASTER_DBC_LF_IRTS_BRAKE_5_NAME "LF_IRTS_Brake_5"
#define MASTER_DBC_RF_IRTS_BRAKE_5_NAME "RF_IRTS_Brake_5"
#define MASTER_DBC_RR_IRTS_BRAKE_5_NAME "RR_IRTS_Brake_5"
#define MASTER_DBC_LR_IRTS_BRAKE_5_NAME "LR_IRTS_Brake_5"
#define MASTER_DBC_LF_IRTS_BRAKE_1_NAME "LF_IRTS_Brake_1"
#define MASTER_DBC_LF_IRTS_BRAKE_2_NAME "LF_IRTS_Brake_2"
#define MASTER_DBC_LF_IRTS_BRAKE_3_NAME "LF_IRTS_Brake_3"
#define MASTER_DBC_LF_IRTS_BRAKE_4_NAME "LF_IRTS_Brake_4"
#define MASTER_DBC_RF_IRTS_BRAKE_1_NAME "RF_IRTS_Brake_1"
#define MASTER_DBC_RF_IRTS_BRAKE_2_NAME "RF_IRTS_Brake_2"
#define MASTER_DBC_RF_IRTS_BRAKE_3_NAME "RF_IRTS_Brake_3"
#define MASTER_DBC_RF_IRTS_BRAKE_4_NAME "RF_IRTS_Brake_4"
#define MASTER_DBC_LR_IRTS_BRAKE_1_NAME "LR_IRTS_Brake_1"
#define MASTER_DBC_LR_IRTS_BRAKE_2_NAME "LR_IRTS_Brake_2"
#define MASTER_DBC_LR_IRTS_BRAKE_3_NAME "LR_IRTS_Brake_3"
#define MASTER_DBC_LR_IRTS_BRAKE_4_NAME "LR_IRTS_Brake_4"
#define MASTER_DBC_RR_IRTS_BRAKE_1_NAME "RR_IRTS_Brake_1"
#define MASTER_DBC_RR_IRTS_BRAKE_2_NAME "RR_IRTS_Brake_2"
#define MASTER_DBC_RR_IRTS_BRAKE_3_NAME "RR_IRTS_Brake_3"
#define MASTER_DBC_RR_IRTS_BRAKE_4_NAME "RR_IRTS_Brake_4"
#define MASTER_DBC_STATUS_NAME "Status"
#define MASTER_DBC_FAULTS_NAME "Faults"
#define MASTER_DBC_DASHBOARD_NAME "Dashboard"
#define MASTER_DBC_TEMP1_NAME "Temp1"
#define MASTER_DBC_TEMP2_NAME "Temp2"
#define MASTER_DBC_TEMP3_NAME "Temp3"
#define MASTER_DBC_TEMP4_NAME "Temp4"
#define MASTER_DBC_TEMP5_NAME "Temp5"
#define MASTER_DBC_TEMP6_NAME "Temp6"
#define MASTER_DBC_VOLTAGE1_NAME "Voltage1"
#define MASTER_DBC_VOLTAGE2_NAME "Voltage2"
#define MASTER_DBC_VOLTAGE3_NAME "Voltage3"
#define MASTER_DBC_VOLTAGE4_NAME "Voltage4"
#define MASTER_DBC_VOLTAGE5_NAME "Voltage5"
#define MASTER_DBC_VOLTAGE6_NAME "Voltage6"
#define MASTER_DBC_VOLTAGE7_NAME "Voltage7"
#define MASTER_DBC_VOLTAGE8_NAME "Voltage8"
#define MASTER_DBC_VOLTAGE9_NAME "Voltage9"
#define MASTER_DBC_VOLTAGE10_NAME "Voltage10"
#define MASTER_DBC_VOLTAGE11_NAME "Voltage11"
#define MASTER_DBC_VOLTAGE12_NAME "Voltage12"
#define MASTER_DBC_ORION_MSG1_NAME "OrionMSG1"
#define MASTER_DBC_ORION_MSG2_NAME "OrionMSG2"
#define MASTER_DBC_ORION_MSG3_NAME "OrionMSG3"
#define MASTER_DBC_M100_VCU_STATES1_NAME "M100_VCU_States1"
#define MASTER_DBC_M102_VCU_STATES2_NAME "M102_VCU_States2"
#define MASTER_DBC_M104_VCU_STATES3_NAME "M104_VCU_States3"
#define MASTER_DBC_M106_DRIVER_INPUTS1_NAME "M106_DriverInputs1"
#define MASTER_DBC_M108_DRIVER_INPUTS2_NAME "M108_DriverInputs2"
#define MASTER_DBC_M112_VEHICLE_INPUTS1_NAME "M112_VehicleInputs1"
#define MASTER_DBC_M114_VEHICLE_INPUTS2_NAME "M114_VehicleInputs2"
#define MASTER_DBC_M116_VEHICLE_INPUTS3_NAME "M116_VehicleInputs3"
#define MASTER_DBC_M118_VEHICLE_INPUTS4_NAME "M118_VehicleInputs4"
#define MASTER_DBC_M120_MOTOR_TORQUE_DATA1_NAME "M120_MotorTorqueData1"
#define MASTER_DBC_M122_MOTOR_TORQUE_DATA2_NAME "M122_MotorTorqueData2"
#define MASTER_DBC_M124_MOTOR_TORQUE_DATA3_NAME "M124_MotorTorqueData3"
#define MASTER_DBC_M126_MOTOR_TORQUE_DATA4_NAME "M126_MotorTorqueData4"
#define MASTER_DBC_M128_MOTOR_TORQUE_DATA5_NAME "M128_MotorTorqueData5"
#define MASTER_DBC_M130_MOTOR_TORQUE_DATA6_NAME "M130_MotorTorqueData6"
#define MASTER_DBC_M132_MOTOR_TORQUE_DATA7_NAME "M132_MotorTorqueData7"
#define MASTER_DBC_M134_MOTOR_TORQUE_DATA8_NAME "M134_MotorTorqueData8"
#define MASTER_DBC_M136_MOTOR_SPEED_DATA1_NAME "M136_MotorSpeedData1"
#define MASTER_DBC_M138_MOTOR_SPEED_DATA2_NAME "M138_MotorSpeedData2"
#define MASTER_DBC_M140_MOTOR_SPEED_DATA3_NAME "M140_MotorSpeedData3"
#define MASTER_DBC_M144_VCU_FAULT_STATES1_NAME "M144_VCU_FaultStates1"

/* Signal Names. */
#define MASTER_DBC_M173_MODULATION_AND_FLUX_INFO_INV_MODULATION_INDEX_NAME "INV_Modulation_Index"
#define MASTER_DBC_M173_MODULATION_AND_FLUX_INFO_INV_FLUX_WEAKENING_OUTPUT_NAME "INV_Flux_Weakening_Output"
#define MASTER_DBC_M173_MODULATION_AND_FLUX_INFO_INV_ID_COMMAND_NAME "INV_Id_Command"
#define MASTER_DBC_M173_MODULATION_AND_FLUX_INFO_INV_IQ_COMMAND_NAME "INV_Iq_Command"
#define MASTER_DBC_M172_TORQUE_AND_TIMER_INFO_INV_COMMANDED_TORQUE_NAME "INV_Commanded_Torque"
#define MASTER_DBC_M172_TORQUE_AND_TIMER_INFO_INV_TORQUE_FEEDBACK_NAME "INV_Torque_Feedback"
#define MASTER_DBC_M172_TORQUE_AND_TIMER_INFO_INV_POWER_ON_TIMER_NAME "INV_Power_On_Timer"
#define MASTER_DBC_M194_READ_WRITE_PARAM_RESPONSE_INV_PARAMETER_RESPONSE_ADDR_NAME "INV_Parameter_Response_Addr"
#define MASTER_DBC_M194_READ_WRITE_PARAM_RESPONSE_INV_PARAMETER_RESPONSE_WRITE_OK_NAME "INV_Parameter_Response_Write_OK"
#define MASTER_DBC_M194_READ_WRITE_PARAM_RESPONSE_INV_PARAMETER_RESPONSE_DATA_NAME "INV_Parameter_Response_Data"
#define MASTER_DBC_M193_READ_WRITE_PARAM_COMMAND_VCU_INV_PARAMETER_ADDRESS_NAME "VCU_INV_Parameter_Address"
#define MASTER_DBC_M193_READ_WRITE_PARAM_COMMAND_VCU_INV_PARAMETER_RW_COMMAND_NAME "VCU_INV_Parameter_RW_Command"
#define MASTER_DBC_M193_READ_WRITE_PARAM_COMMAND_VCU_INV_PARAMETER_DATA_NAME "VCU_INV_Parameter_Data"
#define MASTER_DBC_M192_COMMAND_MESSAGE_VCU_INV_TORQUE_COMMAND_NAME "VCU_INV_Torque_Command"
#define MASTER_DBC_M192_COMMAND_MESSAGE_VCU_INV_SPEED_COMMAND_NAME "VCU_INV_Speed_Command"
#define MASTER_DBC_M192_COMMAND_MESSAGE_VCU_INV_DIRECTION_COMMAND_NAME "VCU_INV_Direction_Command"
#define MASTER_DBC_M192_COMMAND_MESSAGE_VCU_INV_INVERTER_ENABLE_NAME "VCU_INV_Inverter_Enable"
#define MASTER_DBC_M192_COMMAND_MESSAGE_VCU_INV_INVERTER_DISCHARGE_NAME "VCU_INV_Inverter_Discharge"
#define MASTER_DBC_M192_COMMAND_MESSAGE_VCU_INV_SPEED_MODE_ENABLE_NAME "VCU_INV_Speed_Mode_Enable"
#define MASTER_DBC_M192_COMMAND_MESSAGE_VCU_INV_ROLLING_COUNTER_NAME "VCU_INV_Rolling_Counter"
#define MASTER_DBC_M192_COMMAND_MESSAGE_VCU_INV_TORQUE_LIMIT_COMMAND_NAME "VCU_INV_Torque_Limit_Command"
#define MASTER_DBC_M171_FAULT_CODES_INV_POST_FAULT_LO_NAME "INV_Post_Fault_Lo"
#define MASTER_DBC_M171_FAULT_CODES_INV_POST_FAULT_HI_NAME "INV_Post_Fault_Hi"
#define MASTER_DBC_M171_FAULT_CODES_INV_RUN_FAULT_LO_NAME "INV_Run_Fault_Lo"
#define MASTER_DBC_M171_FAULT_CODES_INV_RUN_FAULT_HI_NAME "INV_Run_Fault_Hi"
#define MASTER_DBC_M170_INTERNAL_STATES_INV_VSM_STATE_NAME "INV_VSM_State"
#define MASTER_DBC_M170_INTERNAL_STATES_INV_PWM_FREQUENCY_NAME "INV_PWM_Frequency"
#define MASTER_DBC_M170_INTERNAL_STATES_INV_INVERTER_STATE_NAME "INV_Inverter_State"
#define MASTER_DBC_M170_INTERNAL_STATES_INV_RELAY_1_STATUS_NAME "INV_Relay_1_Status"
#define MASTER_DBC_M170_INTERNAL_STATES_INV_RELAY_2_STATUS_NAME "INV_Relay_2_Status"
#define MASTER_DBC_M170_INTERNAL_STATES_INV_RELAY_3_STATUS_NAME "INV_Relay_3_Status"
#define MASTER_DBC_M170_INTERNAL_STATES_INV_RELAY_4_STATUS_NAME "INV_Relay_4_Status"
#define MASTER_DBC_M170_INTERNAL_STATES_INV_RELAY_5_STATUS_NAME "INV_Relay_5_Status"
#define MASTER_DBC_M170_INTERNAL_STATES_INV_RELAY_6_STATUS_NAME "INV_Relay_6_Status"
#define MASTER_DBC_M170_INTERNAL_STATES_INV_INVERTER_RUN_MODE_NAME "INV_Inverter_Run_Mode"
#define MASTER_DBC_M170_INTERNAL_STATES_INV_SELF_SENSING_ASSIST_ENABLE_NAME "INV_Self_Sensing_Assist_Enable"
#define MASTER_DBC_M170_INTERNAL_STATES_INV_INVERTER_DISCHARGE_STATE_NAME "INV_Inverter_Discharge_State"
#define MASTER_DBC_M170_INTERNAL_STATES_INV_INVERTER_COMMAND_MODE_NAME "INV_Inverter_Command_Mode"
#define MASTER_DBC_M170_INTERNAL_STATES_INV_ROLLING_COUNTER_NAME "INV_Rolling_Counter"
#define MASTER_DBC_M170_INTERNAL_STATES_INV_INVERTER_ENABLE_STATE_NAME "INV_Inverter_Enable_State"
#define MASTER_DBC_M170_INTERNAL_STATES_INV_BURST_MODEL_MODE_NAME "INV_Burst_Model_Mode"
#define MASTER_DBC_M170_INTERNAL_STATES_INV_KEY_SWITCH_START_STATUS_NAME "INV_Key_Switch_Start_Status"
#define MASTER_DBC_M170_INTERNAL_STATES_INV_INVERTER_ENABLE_LOCKOUT_NAME "INV_Inverter_Enable_Lockout"
#define MASTER_DBC_M170_INTERNAL_STATES_INV_DIRECTION_COMMAND_NAME "INV_Direction_Command"
#define MASTER_DBC_M170_INTERNAL_STATES_INV_BMS_ACTIVE_NAME "INV_BMS_Active"
#define MASTER_DBC_M170_INTERNAL_STATES_INV_BMS_TORQUE_LIMITING_NAME "INV_BMS_Torque_Limiting"
#define MASTER_DBC_M170_INTERNAL_STATES_INV_LIMIT_MAX_SPEED_NAME "INV_Limit_Max_Speed"
#define MASTER_DBC_M170_INTERNAL_STATES_INV_LIMIT_HOT_SPOT_NAME "INV_Limit_Hot_Spot"
#define MASTER_DBC_M170_INTERNAL_STATES_INV_LOW_SPEED_LIMITING_NAME "INV_Low_Speed_Limiting"
#define MASTER_DBC_M170_INTERNAL_STATES_INV_LIMIT_COOLANT_DERATING_NAME "INV_Limit_Coolant_Derating"
#define MASTER_DBC_M170_INTERNAL_STATES_INV_LIMIT_STALL_BURST_MODEL_NAME "INV_Limit_Stall_Burst_Model"
#define MASTER_DBC_M169_INTERNAL_VOLTAGES_INV_REF_VOLTAGE_1_5_NAME "INV_Ref_Voltage_1_5"
#define MASTER_DBC_M169_INTERNAL_VOLTAGES_INV_REF_VOLTAGE_2_5_NAME "INV_Ref_Voltage_2_5"
#define MASTER_DBC_M169_INTERNAL_VOLTAGES_INV_REF_VOLTAGE_5_0_NAME "INV_Ref_Voltage_5_0"
#define MASTER_DBC_M169_INTERNAL_VOLTAGES_INV_REF_VOLTAGE_12_0_NAME "INV_Ref_Voltage_12_0"
#define MASTER_DBC_M168_FLUX_ID_IQ_INFO_INV_VD_FF_NAME "INV_Vd_ff"
#define MASTER_DBC_M168_FLUX_ID_IQ_INFO_INV_VQ_FF_NAME "INV_Vq_ff"
#define MASTER_DBC_M168_FLUX_ID_IQ_INFO_INV_ID_NAME "INV_Id"
#define MASTER_DBC_M168_FLUX_ID_IQ_INFO_INV_IQ_NAME "INV_Iq"
#define MASTER_DBC_M167_VOLTAGE_INFO_INV_DC_BUS_VOLTAGE_NAME "INV_DC_Bus_Voltage"
#define MASTER_DBC_M167_VOLTAGE_INFO_INV_OUTPUT_VOLTAGE_NAME "INV_Output_Voltage"
#define MASTER_DBC_M167_VOLTAGE_INFO_INV_VAB_VD_VOLTAGE_NAME "INV_VAB_Vd_Voltage"
#define MASTER_DBC_M167_VOLTAGE_INFO_INV_VBC_VQ_VOLTAGE_NAME "INV_VBC_Vq_Voltage"
#define MASTER_DBC_M166_CURRENT_INFO_INV_PHASE_A_CURRENT_NAME "INV_Phase_A_Current"
#define MASTER_DBC_M166_CURRENT_INFO_INV_PHASE_B_CURRENT_NAME "INV_Phase_B_Current"
#define MASTER_DBC_M166_CURRENT_INFO_INV_PHASE_C_CURRENT_NAME "INV_Phase_C_Current"
#define MASTER_DBC_M166_CURRENT_INFO_INV_DC_BUS_CURRENT_NAME "INV_DC_Bus_Current"
#define MASTER_DBC_M165_MOTOR_POSITION_INFO_INV_MOTOR_ANGLE_ELECTRICAL_NAME "INV_Motor_Angle_Electrical"
#define MASTER_DBC_M165_MOTOR_POSITION_INFO_INV_MOTOR_SPEED_NAME "INV_Motor_Speed"
#define MASTER_DBC_M165_MOTOR_POSITION_INFO_INV_ELECTRICAL_OUTPUT_FREQUENCY_NAME "INV_Electrical_Output_Frequency"
#define MASTER_DBC_M165_MOTOR_POSITION_INFO_INV_DELTA_RESOLVER_FILTERED_NAME "INV_Delta_Resolver_Filtered"
#define MASTER_DBC_M164_DIGITAL_INPUT_STATUS_INV_DIGITAL_INPUT_1_NAME "INV_Digital_Input_1"
#define MASTER_DBC_M164_DIGITAL_INPUT_STATUS_INV_DIGITAL_INPUT_2_NAME "INV_Digital_Input_2"
#define MASTER_DBC_M164_DIGITAL_INPUT_STATUS_INV_DIGITAL_INPUT_3_NAME "INV_Digital_Input_3"
#define MASTER_DBC_M164_DIGITAL_INPUT_STATUS_INV_DIGITAL_INPUT_4_NAME "INV_Digital_Input_4"
#define MASTER_DBC_M164_DIGITAL_INPUT_STATUS_INV_DIGITAL_INPUT_5_NAME "INV_Digital_Input_5"
#define MASTER_DBC_M164_DIGITAL_INPUT_STATUS_INV_DIGITAL_INPUT_6_NAME "INV_Digital_Input_6"
#define MASTER_DBC_M164_DIGITAL_INPUT_STATUS_INV_DIGITAL_INPUT_7_NAME "INV_Digital_Input_7"
#define MASTER_DBC_M164_DIGITAL_INPUT_STATUS_INV_DIGITAL_INPUT_8_NAME "INV_Digital_Input_8"
#define MASTER_DBC_M163_ANALOG_INPUT_VOLTAGES_INV_ANALOG_INPUT_1_NAME "INV_Analog_Input_1"
#define MASTER_DBC_M163_ANALOG_INPUT_VOLTAGES_INV_ANALOG_INPUT_2_NAME "INV_Analog_Input_2"
#define MASTER_DBC_M163_ANALOG_INPUT_VOLTAGES_INV_ANALOG_INPUT_3_NAME "INV_Analog_Input_3"
#define MASTER_DBC_M163_ANALOG_INPUT_VOLTAGES_INV_ANALOG_INPUT_4_NAME "INV_Analog_Input_4"
#define MASTER_DBC_M163_ANALOG_INPUT_VOLTAGES_INV_ANALOG_INPUT_5_NAME "INV_Analog_Input_5"
#define MASTER_DBC_M163_ANALOG_INPUT_VOLTAGES_INV_ANALOG_INPUT_6_NAME "INV_Analog_Input_6"
#define MASTER_DBC_M162_TEMPERATURE_SET_3_INV_COOLANT_TEMP_NAME "INV_Coolant_Temp"
#define MASTER_DBC_M162_TEMPERATURE_SET_3_INV_HOT_SPOT_TEMP_NAME "INV_Hot_Spot_Temp"
#define MASTER_DBC_M162_TEMPERATURE_SET_3_INV_MOTOR_TEMP_NAME "INV_Motor_Temp"
#define MASTER_DBC_M162_TEMPERATURE_SET_3_INV_TORQUE_SHUDDER_NAME "INV_Torque_Shudder"
#define MASTER_DBC_M161_TEMPERATURE_SET_2_INV_CONTROL_BOARD_TEMP_NAME "INV_Control_Board_Temp"
#define MASTER_DBC_M161_TEMPERATURE_SET_2_INV_RTD1_TEMPERATURE_NAME "INV_RTD1_Temperature"
#define MASTER_DBC_M161_TEMPERATURE_SET_2_INV_RTD2_TEMPERATURE_NAME "INV_RTD2_Temperature"
#define MASTER_DBC_M161_TEMPERATURE_SET_2_INV_STALL_BURST_MODEL_TEMP_NAME "INV_Stall_Burst_Model_Temp"
#define MASTER_DBC_M160_TEMPERATURE_SET_1_INV_MODULE_A_TEMP_NAME "INV_Module_A_Temp"
#define MASTER_DBC_M160_TEMPERATURE_SET_1_INV_MODULE_B_TEMP_NAME "INV_Module_B_Temp"
#define MASTER_DBC_M160_TEMPERATURE_SET_1_INV_MODULE_C_TEMP_NAME "INV_Module_C_Temp"
#define MASTER_DBC_M160_TEMPERATURE_SET_1_INV_GATE_DRIVER_BOARD_TEMP_NAME "INV_Gate_Driver_Board_Temp"
#define MASTER_DBC_M174_FIRMWARE_INFO_INV_PROJECT_CODE_EEP_VER_NAME "INV_Project_Code_EEP_Ver"
#define MASTER_DBC_M174_FIRMWARE_INFO_INV_SW_VERSION_NAME "INV_SW_Version"
#define MASTER_DBC_M174_FIRMWARE_INFO_INV_DATE_CODE_MMDD_NAME "INV_DateCode_MMDD"
#define MASTER_DBC_M174_FIRMWARE_INFO_INV_DATE_CODE_YYYY_NAME "INV_DateCode_YYYY"
#define MASTER_DBC_M175_DIAG_DATA_MESSAGE_INV_DIAG_RECORD_NAME "INV_Diag_Record"
#define MASTER_DBC_M175_DIAG_DATA_MESSAGE_INV_DIAG_SEGMENT_NAME "INV_Diag_Segment"
#define MASTER_DBC_M175_DIAG_DATA_MESSAGE_INV_DIAG_GAMMA_RESOLVER_NAME "INV_Diag_Gamma_Resolver"
#define MASTER_DBC_M175_DIAG_DATA_MESSAGE_INV_DIAG_COS_USED_NAME "INV_Diag_Cos_Used"
#define MASTER_DBC_M175_DIAG_DATA_MESSAGE_INV_DIAG_IC_NAME "INV_Diag_Ic"
#define MASTER_DBC_M175_DIAG_DATA_MESSAGE_INV_DIAG_ID_CMD_NAME "INV_Diag_Id_cmd"
#define MASTER_DBC_M175_DIAG_DATA_MESSAGE_INV_DIAG_VQ_CMD_NAME "INV_Diag_Vq_Cmd"
#define MASTER_DBC_M175_DIAG_DATA_MESSAGE_INV_DIAG_PWM_FREQ_NAME "INV_Diag_PWM_Freq"
#define MASTER_DBC_M175_DIAG_DATA_MESSAGE_INV_DIAG_GAMMA_OBSERVER_NAME "INV_Diag_Gamma_Observer"
#define MASTER_DBC_M175_DIAG_DATA_MESSAGE_INV_DIAG_IA_NAME "INV_Diag_Ia"
#define MASTER_DBC_M175_DIAG_DATA_MESSAGE_INV_DIAG_VDC_NAME "INV_Diag_Vdc"
#define MASTER_DBC_M175_DIAG_DATA_MESSAGE_INV_DIAG_MOD_INDEX_NAME "INV_Diag_Mod_Index"
#define MASTER_DBC_M175_DIAG_DATA_MESSAGE_INV_DIAG_VD_CMD_NAME "INV_Diag_Vd_Cmd"
#define MASTER_DBC_M175_DIAG_DATA_MESSAGE_INV_DIAG_RUN_FAULTS_LO_NAME "INV_Diag_Run_Faults_Lo"
#define MASTER_DBC_M175_DIAG_DATA_MESSAGE_INV_DIAG_SIN_USED_NAME "INV_Diag_Sin_Used"
#define MASTER_DBC_M175_DIAG_DATA_MESSAGE_INV_DIAG_IB_NAME "INV_Diag_Ib"
#define MASTER_DBC_M175_DIAG_DATA_MESSAGE_INV_DIAG_IQ_CMD_NAME "INV_Diag_Iq_cmd"
#define MASTER_DBC_M175_DIAG_DATA_MESSAGE_INV_DIAG_FW_OUTPUT_NAME "INV_Diag_FW_Output"
#define MASTER_DBC_M175_DIAG_DATA_MESSAGE_INV_DIAG_VQS_CMD_NAME "INV_Diag_Vqs_Cmd"
#define MASTER_DBC_M175_DIAG_DATA_MESSAGE_INV_DIAG_RUN_FAULTS_HI_NAME "INV_Diag_Run_Faults_Hi"
#define MASTER_DBC_BMS_CURRENT_LIMIT_BMS_MAX_DISCHARGE_CURRENT_NAME "BMS_Max_Discharge_Current"
#define MASTER_DBC_BMS_CURRENT_LIMIT_BMS_MAX_CHARGE_CURRENT_NAME "BMS_Max_Charge_Current"
#define MASTER_DBC_M176_FAST_INFO_INV_FAST_TORQUE_COMMAND_NAME "INV_Fast_Torque_Command"
#define MASTER_DBC_M176_FAST_INFO_INV_FAST_TORQUE_FEEDBACK_NAME "INV_Fast_Torque_Feedback"
#define MASTER_DBC_M176_FAST_INFO_INV_FAST_MOTOR_SPEED_NAME "INV_Fast_Motor_Speed"
#define MASTER_DBC_M176_FAST_INFO_INV_FAST_DC_BUS_VOLTAGE_NAME "INV_Fast_DC_Bus_Voltage"
#define MASTER_DBC_M177_TORQUE_CAPABILITY_INV_TORQUE_CAPABILITY_NAME "INV_Torque_Capability"
#define MASTER_DBC_LF_IRTS_BRAKE_5_LF_SENSOR_TEMP_NAME "LF_Sensor_Temp"
#define MASTER_DBC_RF_IRTS_BRAKE_5_RF_SENSOR_TEMP_NAME "RF_Sensor_Temp"
#define MASTER_DBC_RR_IRTS_BRAKE_5_RR_SENSOR_TEMP_NAME "RR_Sensor_Temp"
#define MASTER_DBC_LR_IRTS_BRAKE_5_LR_SENSOR_TEMP_NAME "LR_Sensor_Temp"
#define MASTER_DBC_LF_IRTS_BRAKE_1_LF_ROTOR_TEMP_01_NAME "LF_Rotor_Temp_01"
#define MASTER_DBC_LF_IRTS_BRAKE_1_LF_ROTOR_TEMP_02_NAME "LF_Rotor_Temp_02"
#define MASTER_DBC_LF_IRTS_BRAKE_1_LF_ROTOR_TEMP_03_NAME "LF_Rotor_Temp_03"
#define MASTER_DBC_LF_IRTS_BRAKE_1_LF_ROTOR_TEMP_04_NAME "LF_Rotor_Temp_04"
#define MASTER_DBC_LF_IRTS_BRAKE_2_LF_ROTOR_TEMP_05_NAME "LF_Rotor_Temp_05"
#define MASTER_DBC_LF_IRTS_BRAKE_2_LF_ROTOR_TEMP_06_NAME "LF_Rotor_Temp_06"
#define MASTER_DBC_LF_IRTS_BRAKE_2_LF_ROTOR_TEMP_07_NAME "LF_Rotor_Temp_07"
#define MASTER_DBC_LF_IRTS_BRAKE_2_LF_ROTOR_TEMP_08_NAME "LF_Rotor_Temp_08"
#define MASTER_DBC_LF_IRTS_BRAKE_3_LF_ROTOR_TEMP_09_NAME "LF_Rotor_Temp_09"
#define MASTER_DBC_LF_IRTS_BRAKE_3_LF_ROTOR_TEMP_10_NAME "LF_Rotor_Temp_10"
#define MASTER_DBC_LF_IRTS_BRAKE_3_LF_ROTOR_TEMP_11_NAME "LF_Rotor_Temp_11"
#define MASTER_DBC_LF_IRTS_BRAKE_3_LF_ROTOR_TEMP_12_NAME "LF_Rotor_Temp_12"
#define MASTER_DBC_LF_IRTS_BRAKE_4_LF_ROTOR_TEMP_13_NAME "LF_Rotor_Temp_13"
#define MASTER_DBC_LF_IRTS_BRAKE_4_LF_ROTOR_TEMP_14_NAME "LF_Rotor_Temp_14"
#define MASTER_DBC_LF_IRTS_BRAKE_4_LF_ROTOR_TEMP_15_NAME "LF_Rotor_Temp_15"
#define MASTER_DBC_LF_IRTS_BRAKE_4_LF_ROTOR_TEMP_16_NAME "LF_Rotor_Temp_16"
#define MASTER_DBC_RF_IRTS_BRAKE_1_RF_ROTOR_TEMP_01_NAME "RF_Rotor_Temp_01"
#define MASTER_DBC_RF_IRTS_BRAKE_1_RF_ROTOR_TEMP_02_NAME "RF_Rotor_Temp_02"
#define MASTER_DBC_RF_IRTS_BRAKE_1_RF_ROTOR_TEMP_03_NAME "RF_Rotor_Temp_03"
#define MASTER_DBC_RF_IRTS_BRAKE_1_RF_ROTOR_TEMP_04_NAME "RF_Rotor_Temp_04"
#define MASTER_DBC_RF_IRTS_BRAKE_2_RF_ROTOR_TEMP_05_NAME "RF_Rotor_Temp_05"
#define MASTER_DBC_RF_IRTS_BRAKE_2_RF_ROTOR_TEMP_06_NAME "RF_Rotor_Temp_06"
#define MASTER_DBC_RF_IRTS_BRAKE_2_RF_ROTOR_TEMP_07_NAME "RF_Rotor_Temp_07"
#define MASTER_DBC_RF_IRTS_BRAKE_2_RF_ROTOR_TEMP_08_NAME "RF_Rotor_Temp_08"
#define MASTER_DBC_RF_IRTS_BRAKE_3_RF_ROTOR_TEMP_09_NAME "RF_Rotor_Temp_09"
#define MASTER_DBC_RF_IRTS_BRAKE_3_RF_ROTOR_TEMP_10_NAME "RF_Rotor_Temp_10"
#define MASTER_DBC_RF_IRTS_BRAKE_3_RF_ROTOR_TEMP_11_NAME "RF_Rotor_Temp_11"
#define MASTER_DBC_RF_IRTS_BRAKE_3_RF_ROTOR_TEMP_12_NAME "RF_Rotor_Temp_12"
#define MASTER_DBC_RF_IRTS_BRAKE_4_RF_ROTOR_TEMP_13_NAME "RF_Rotor_Temp_13"
#define MASTER_DBC_RF_IRTS_BRAKE_4_RF_ROTOR_TEMP_14_NAME "RF_Rotor_Temp_14"
#define MASTER_DBC_RF_IRTS_BRAKE_4_RF_ROTOR_TEMP_15_NAME "RF_Rotor_Temp_15"
#define MASTER_DBC_RF_IRTS_BRAKE_4_RF_ROTOR_TEMP_16_NAME "RF_Rotor_Temp_16"
#define MASTER_DBC_LR_IRTS_BRAKE_1_LR_ROTOR_TEMP_01_NAME "LR_Rotor_Temp_01"
#define MASTER_DBC_LR_IRTS_BRAKE_1_LR_ROTOR_TEMP_02_NAME "LR_Rotor_Temp_02"
#define MASTER_DBC_LR_IRTS_BRAKE_1_LR_ROTOR_TEMP_03_NAME "LR_Rotor_Temp_03"
#define MASTER_DBC_LR_IRTS_BRAKE_1_LR_ROTOR_TEMP_04_NAME "LR_Rotor_Temp_04"
#define MASTER_DBC_LR_IRTS_BRAKE_2_LR_ROTOR_TEMP_05_NAME "LR_Rotor_Temp_05"
#define MASTER_DBC_LR_IRTS_BRAKE_2_LR_ROTOR_TEMP_06_NAME "LR_Rotor_Temp_06"
#define MASTER_DBC_LR_IRTS_BRAKE_2_LR_ROTOR_TEMP_07_NAME "LR_Rotor_Temp_07"
#define MASTER_DBC_LR_IRTS_BRAKE_2_LR_ROTOR_TEMP_08_NAME "LR_Rotor_Temp_08"
#define MASTER_DBC_LR_IRTS_BRAKE_3_LR_ROTOR_TEMP_09_NAME "LR_Rotor_Temp_09"
#define MASTER_DBC_LR_IRTS_BRAKE_3_LR_ROTOR_TEMP_10_NAME "LR_Rotor_Temp_10"
#define MASTER_DBC_LR_IRTS_BRAKE_3_LR_ROTOR_TEMP_11_NAME "LR_Rotor_Temp_11"
#define MASTER_DBC_LR_IRTS_BRAKE_3_LR_ROTOR_TEMP_12_NAME "LR_Rotor_Temp_12"
#define MASTER_DBC_LR_IRTS_BRAKE_4_LR_ROTOR_TEMP_13_NAME "LR_Rotor_Temp_13"
#define MASTER_DBC_LR_IRTS_BRAKE_4_LR_ROTOR_TEMP_14_NAME "LR_Rotor_Temp_14"
#define MASTER_DBC_LR_IRTS_BRAKE_4_LR_ROTOR_TEMP_15_NAME "LR_Rotor_Temp_15"
#define MASTER_DBC_LR_IRTS_BRAKE_4_LR_ROTOR_TEMP_16_NAME "LR_Rotor_Temp_16"
#define MASTER_DBC_RR_IRTS_BRAKE_1_RR_ROTOR_TEMP_01_NAME "RR_Rotor_Temp_01"
#define MASTER_DBC_RR_IRTS_BRAKE_1_RR_ROTOR_TEMP_02_NAME "RR_Rotor_Temp_02"
#define MASTER_DBC_RR_IRTS_BRAKE_1_RR_ROTOR_TEMP_03_NAME "RR_Rotor_Temp_03"
#define MASTER_DBC_RR_IRTS_BRAKE_1_RR_ROTOR_TEMP_04_NAME "RR_Rotor_Temp_04"
#define MASTER_DBC_RR_IRTS_BRAKE_2_RR_ROTOR_TEMP_05_NAME "RR_Rotor_Temp_05"
#define MASTER_DBC_RR_IRTS_BRAKE_2_RR_ROTOR_TEMP_06_NAME "RR_Rotor_Temp_06"
#define MASTER_DBC_RR_IRTS_BRAKE_2_RR_ROTOR_TEMP_07_NAME "RR_Rotor_Temp_07"
#define MASTER_DBC_RR_IRTS_BRAKE_2_RR_ROTOR_TEMP_08_NAME "RR_Rotor_Temp_08"
#define MASTER_DBC_RR_IRTS_BRAKE_3_RR_ROTOR_TEMP_09_NAME "RR_Rotor_Temp_09"
#define MASTER_DBC_RR_IRTS_BRAKE_3_RR_ROTOR_TEMP_10_NAME "RR_Rotor_Temp_10"
#define MASTER_DBC_RR_IRTS_BRAKE_3_RR_ROTOR_TEMP_11_NAME "RR_Rotor_Temp_11"
#define MASTER_DBC_RR_IRTS_BRAKE_3_RR_ROTOR_TEMP_12_NAME "RR_Rotor_Temp_12"
#define MASTER_DBC_RR_IRTS_BRAKE_4_RR_ROTOR_TEMP_13_NAME "RR_Rotor_Temp_13"
#define MASTER_DBC_RR_IRTS_BRAKE_4_RR_ROTOR_TEMP_14_NAME "RR_Rotor_Temp_14"
#define MASTER_DBC_RR_IRTS_BRAKE_4_RR_ROTOR_TEMP_15_NAME "RR_Rotor_Temp_15"
#define MASTER_DBC_RR_IRTS_BRAKE_4_RR_ROTOR_TEMP_16_NAME "RR_Rotor_Temp_16"
#define MASTER_DBC_TEMP1_TEMP1_NAME "Temp1"
#define MASTER_DBC_TEMP1_TEMP2_NAME "Temp2"
#define MASTER_DBC_TEMP1_TEMP3_NAME "Temp3"
#define MASTER_DBC_TEMP1_TEMP4_NAME "Temp4"
#define MASTER_DBC_TEMP1_TEMP5_NAME "Temp5"
#define MASTER_DBC_TEMP1_TEMP6_NAME "Temp6"
#define MASTER_DBC_TEMP1_TEMP7_NAME "Temp7"
#define MASTER_DBC_TEMP1_TEMP8_NAME "Temp8"
#define MASTER_DBC_TEMP2_TEMP9_NAME "Temp9"
#define MASTER_DBC_TEMP2_TEMP10_NAME "Temp10"
#define MASTER_DBC_TEMP2_TEMP11_NAME "Temp11"
#define MASTER_DBC_TEMP2_TEMP12_NAME "Temp12"
#define MASTER_DBC_TEMP2_TEMP13_NAME "Temp13"
#define MASTER_DBC_TEMP2_TEMP14_NAME "Temp14"
#define MASTER_DBC_TEMP2_TEMP15_NAME "Temp15"
#define MASTER_DBC_TEMP2_TEMP16_NAME "Temp16"
#define MASTER_DBC_TEMP3_TEMP17_NAME "Temp17"
#define MASTER_DBC_TEMP3_TEMP18_NAME "Temp18"
#define MASTER_DBC_TEMP3_TEMP19_NAME "Temp19"
#define MASTER_DBC_TEMP3_TEMP20_NAME "Temp20"
#define MASTER_DBC_TEMP3_TEMP21_NAME "Temp21"
#define MASTER_DBC_TEMP3_TEMP22_NAME "Temp22"
#define MASTER_DBC_TEMP3_TEMP23_NAME "Temp23"
#define MASTER_DBC_TEMP3_TEMP24_NAME "Temp24"
#define MASTER_DBC_TEMP4_TEMP25_NAME "Temp25"
#define MASTER_DBC_TEMP4_TEMP26_NAME "Temp26"
#define MASTER_DBC_TEMP4_TEMP27_NAME "Temp27"
#define MASTER_DBC_TEMP4_TEMP28_NAME "Temp28"
#define MASTER_DBC_TEMP4_TEMP29_NAME "Temp29"
#define MASTER_DBC_TEMP4_TEMP30_NAME "Temp30"
#define MASTER_DBC_TEMP4_TEMP31_NAME "Temp31"
#define MASTER_DBC_TEMP4_TEMP32_NAME "Temp32"
#define MASTER_DBC_TEMP5_TEMP33_NAME "Temp33"
#define MASTER_DBC_TEMP5_TEMP34_NAME "Temp34"
#define MASTER_DBC_TEMP5_TEMP35_NAME "Temp35"
#define MASTER_DBC_TEMP5_TEMP36_NAME "Temp36"
#define MASTER_DBC_TEMP5_TEMP37_NAME "Temp37"
#define MASTER_DBC_TEMP5_TEMP38_NAME "Temp38"
#define MASTER_DBC_TEMP5_TEMP39_NAME "Temp39"
#define MASTER_DBC_TEMP5_TEMP40_NAME "Temp40"
#define MASTER_DBC_TEMP6_TEMP41_NAME "Temp41"
#define MASTER_DBC_TEMP6_TEMP42_NAME "Temp42"
#define MASTER_DBC_TEMP6_TEMP43_NAME "Temp43"
#define MASTER_DBC_TEMP6_TEMP44_NAME "Temp44"
#define MASTER_DBC_TEMP6_TEMP45_NAME "Temp45"
#define MASTER_DBC_TEMP6_TEMP46_NAME "Temp46"
#define MASTER_DBC_TEMP6_TEMP47_NAME "Temp47"
#define MASTER_DBC_TEMP6_TEMP48_NAME "Temp48"
#define MASTER_DBC_VOLTAGE1_CELL1_NAME "Cell1"
#define MASTER_DBC_VOLTAGE1_CELL2_NAME "Cell2"
#define MASTER_DBC_VOLTAGE1_CELL3_NAME "Cell3"
#define MASTER_DBC_VOLTAGE1_CELL4_NAME "Cell4"
#define MASTER_DBC_VOLTAGE1_CELL5_NAME "Cell5"
#define MASTER_DBC_VOLTAGE1_CELL6_NAME "Cell6"
#define MASTER_DBC_VOLTAGE1_CELL7_NAME "Cell7"
#define MASTER_DBC_VOLTAGE1_CELL8_NAME "Cell8"
#define MASTER_DBC_VOLTAGE2_CELL9_NAME "Cell9"
#define MASTER_DBC_VOLTAGE2_CELL10_NAME "Cell10"
#define MASTER_DBC_VOLTAGE2_CELL11_NAME "Cell11"
#define MASTER_DBC_VOLTAGE2_CELL12_NAME "Cell12"
#define MASTER_DBC_VOLTAGE2_CELL13_NAME "Cell13"
#define MASTER_DBC_VOLTAGE2_CELL14_NAME "Cell14"
#define MASTER_DBC_VOLTAGE2_CELL15_NAME "Cell15"
#define MASTER_DBC_VOLTAGE2_CELL16_NAME "Cell16"
#define MASTER_DBC_VOLTAGE3_CELL17_NAME "Cell17"
#define MASTER_DBC_VOLTAGE3_CELL18_NAME "Cell18"
#define MASTER_DBC_VOLTAGE3_CELL19_NAME "Cell19"
#define MASTER_DBC_VOLTAGE3_CELL20_NAME "Cell20"
#define MASTER_DBC_VOLTAGE3_CELL21_NAME "Cell21"
#define MASTER_DBC_VOLTAGE3_CELL22_NAME "Cell22"
#define MASTER_DBC_VOLTAGE3_CELL23_NAME "Cell23"
#define MASTER_DBC_VOLTAGE3_CELL24_NAME "Cell24"
#define MASTER_DBC_VOLTAGE4_CELL25_NAME "Cell25"
#define MASTER_DBC_VOLTAGE4_CELL26_NAME "Cell26"
#define MASTER_DBC_VOLTAGE4_CELL27_NAME "Cell27"
#define MASTER_DBC_VOLTAGE4_CELL28_NAME "Cell28"
#define MASTER_DBC_VOLTAGE4_CELL29_NAME "Cell29"
#define MASTER_DBC_VOLTAGE4_CELL30_NAME "Cell30"
#define MASTER_DBC_VOLTAGE4_CELL31_NAME "Cell31"
#define MASTER_DBC_VOLTAGE4_CELL32_NAME "Cell32"
#define MASTER_DBC_VOLTAGE5_CELL33_NAME "Cell33"
#define MASTER_DBC_VOLTAGE5_CELL34_NAME "Cell34"
#define MASTER_DBC_VOLTAGE5_CELL35_NAME "Cell35"
#define MASTER_DBC_VOLTAGE5_CELL36_NAME "Cell36"
#define MASTER_DBC_VOLTAGE5_CELL37_NAME "Cell37"
#define MASTER_DBC_VOLTAGE5_CELL38_NAME "Cell38"
#define MASTER_DBC_VOLTAGE5_CELL39_NAME "Cell39"
#define MASTER_DBC_VOLTAGE5_CELL40_NAME "Cell40"
#define MASTER_DBC_VOLTAGE6_CELL41_NAME "Cell41"
#define MASTER_DBC_VOLTAGE6_CELL42_NAME "Cell42"
#define MASTER_DBC_VOLTAGE6_CELL43_NAME "Cell43"
#define MASTER_DBC_VOLTAGE6_CELL44_NAME "Cell44"
#define MASTER_DBC_VOLTAGE6_CELL45_NAME "Cell45"
#define MASTER_DBC_VOLTAGE6_CELL46_NAME "Cell46"
#define MASTER_DBC_VOLTAGE6_CELL47_NAME "Cell47"
#define MASTER_DBC_VOLTAGE6_CELL48_NAME "Cell48"
#define MASTER_DBC_VOLTAGE7_CELL49_NAME "Cell49"
#define MASTER_DBC_VOLTAGE7_CELL50_NAME "Cell50"
#define MASTER_DBC_VOLTAGE7_CELL51_NAME "Cell51"
#define MASTER_DBC_VOLTAGE7_CELL52_NAME "Cell52"
#define MASTER_DBC_VOLTAGE7_CELL53_NAME "Cell53"
#define MASTER_DBC_VOLTAGE7_CELL54_NAME "Cell54"
#define MASTER_DBC_VOLTAGE7_CELL55_NAME "Cell55"
#define MASTER_DBC_VOLTAGE7_CELL56_NAME "Cell56"
#define MASTER_DBC_VOLTAGE8_CELL57_NAME "Cell57"
#define MASTER_DBC_VOLTAGE8_CELL58_NAME "Cell58"
#define MASTER_DBC_VOLTAGE8_CELL59_NAME "Cell59"
#define MASTER_DBC_VOLTAGE8_CELL60_NAME "Cell60"
#define MASTER_DBC_VOLTAGE8_CELL61_NAME "Cell61"
#define MASTER_DBC_VOLTAGE8_CELL62_NAME "Cell62"
#define MASTER_DBC_VOLTAGE8_CELL63_NAME "Cell63"
#define MASTER_DBC_VOLTAGE8_CELL64_NAME "Cell64"
#define MASTER_DBC_VOLTAGE9_CELL65_NAME "Cell65"
#define MASTER_DBC_VOLTAGE9_CELL66_NAME "Cell66"
#define MASTER_DBC_VOLTAGE9_CELL67_NAME "Cell67"
#define MASTER_DBC_VOLTAGE9_CELL68_NAME "Cell68"
#define MASTER_DBC_VOLTAGE9_CELL69_NAME "Cell69"
#define MASTER_DBC_VOLTAGE9_CELL70_NAME "Cell70"
#define MASTER_DBC_VOLTAGE9_CELL71_NAME "Cell71"
#define MASTER_DBC_VOLTAGE9_CELL72_NAME "Cell72"
#define MASTER_DBC_VOLTAGE10_CELL73_NAME "Cell73"
#define MASTER_DBC_VOLTAGE10_CELL74_NAME "Cell74"
#define MASTER_DBC_VOLTAGE10_CELL75_NAME "Cell75"
#define MASTER_DBC_VOLTAGE10_CELL76_NAME "Cell76"
#define MASTER_DBC_VOLTAGE10_CELL77_NAME "Cell77"
#define MASTER_DBC_VOLTAGE10_CELL78_NAME "Cell78"
#define MASTER_DBC_VOLTAGE10_CELL79_NAME "Cell79"
#define MASTER_DBC_VOLTAGE10_CELL80_NAME "Cell80"
#define MASTER_DBC_VOLTAGE11_CELL81_NAME "Cell81"
#define MASTER_DBC_VOLTAGE11_CELL82_NAME "Cell82"
#define MASTER_DBC_VOLTAGE11_CELL83_NAME "Cell83"
#define MASTER_DBC_VOLTAGE11_CELL84_NAME "Cell84"
#define MASTER_DBC_VOLTAGE11_CELL85_NAME "Cell85"
#define MASTER_DBC_VOLTAGE11_CELL86_NAME "Cell86"
#define MASTER_DBC_VOLTAGE11_CELL87_NAME "Cell87"
#define MASTER_DBC_VOLTAGE11_CELL88_NAME "Cell88"
#define MASTER_DBC_VOLTAGE12_CELL89_NAME "Cell89"
#define MASTER_DBC_VOLTAGE12_CELL90_NAME "Cell90"
#define MASTER_DBC_VOLTAGE12_CELL91_NAME "Cell91"
#define MASTER_DBC_VOLTAGE12_CELL92_NAME "Cell92"
#define MASTER_DBC_VOLTAGE12_CELL93_NAME "Cell93"
#define MASTER_DBC_VOLTAGE12_CELL94_NAME "Cell94"
#define MASTER_DBC_VOLTAGE12_CELL95_NAME "Cell95"
#define MASTER_DBC_VOLTAGE12_CELL96_NAME "Cell96"
#define MASTER_DBC_ORION_MSG1_PACK_INST_VOLTAGE_NAME "Pack_Inst_voltage"
#define MASTER_DBC_ORION_MSG1_PACK_SOC_NAME "Pack_SOC"
#define MASTER_DBC_ORION_MSG2_PACK_HIGH_TEMP_NAME "Pack_High_Temp"
#define MASTER_DBC_ORION_MSG2_PACK_LOW_TEMP_NAME "Pack_Low_Temp"
#define MASTER_DBC_ORION_MSG3_LOW_CELL_VOLTAGE_NAME "Low_Cell_Voltage"
#define MASTER_DBC_ORION_MSG3_HIGH_CELL_VOLTAGE_NAME "High_Cell_Voltage"
#define MASTER_DBC_M100_VCU_STATES1_RUN_TIME_NAME "Run_Time"
#define MASTER_DBC_M100_VCU_STATES1_DRIVE_MODE_STATE_NAME "Drive_Mode_State"
#define MASTER_DBC_M100_VCU_STATES1_RUN_MODE_STATE_NAME "Run_Mode_State"
#define MASTER_DBC_M100_VCU_STATES1_OP_STATE_NAME "OPState"
#define MASTER_DBC_M100_VCU_STATES1_START_COMMAND_STATE_NAME "Start_Command_State"
#define MASTER_DBC_M100_VCU_STATES1_STOP_COMMAND_STATE_NAME "Stop_Command_State"
#define MASTER_DBC_M100_VCU_STATES1_START_SAFE_NAME "Start_Safe"
#define MASTER_DBC_M100_VCU_STATES1_MC1_ENABLE_NAME "MC1Enable"
#define MASTER_DBC_M100_VCU_STATES1_MC2_ENABLE_NAME "MC2Enable"
#define MASTER_DBC_M100_VCU_STATES1_MC3_ENABLE_NAME "MC3Enable"
#define MASTER_DBC_M100_VCU_STATES1_MC4_ENABLE_NAME "MC4Enable"
#define MASTER_DBC_M100_VCU_STATES1_MC_POWER_NAME "MCPower"
#define MASTER_DBC_M100_VCU_STATES1_MC1_DISCHARGE_CMD_NAME "MC1DischargeCmd"
#define MASTER_DBC_M100_VCU_STATES1_MC2_DISCHARGE_CMD_NAME "MC2DischargeCmd"
#define MASTER_DBC_M100_VCU_STATES1_MC3_DISCHARGE_CMD_NAME "MC3DischargeCmd"
#define MASTER_DBC_M100_VCU_STATES1_MC4_DISCHARGE_CMD_NAME "MC4DischargeCmd"
#define MASTER_DBC_M100_VCU_STATES1_HVIL_MAIN_NAME "HVIL_Main"
#define MASTER_DBC_M100_VCU_STATES1_HVIL_CHARGE_NAME "HVIL_Charge"
#define MASTER_DBC_M100_VCU_STATES1_PUMP_CONT_X_CHECK_NAME "PumpCont_XCheck"
#define MASTER_DBC_M100_VCU_STATES1_MC1_CONT_ENABLE_NAME "MC1ContEnable"
#define MASTER_DBC_M100_VCU_STATES1_MC2_CONT_ENABLE_NAME "MC2ContEnable"
#define MASTER_DBC_M100_VCU_STATES1_MC3_CONT_ENABLE_NAME "MC3ContEnable"
#define MASTER_DBC_M100_VCU_STATES1_MC4_CONT_ENABLE_NAME "MC4ContEnable"
#define MASTER_DBC_M100_VCU_STATES1_MC1_DC_VOLTAGE_SAFE_STATE_NAME "MC1_DCVoltageSafeState"
#define MASTER_DBC_M100_VCU_STATES1_MC2_DC_VOLTAGE_SAFE_STATE_NAME "MC2_DCVoltageSafeState"
#define MASTER_DBC_M100_VCU_STATES1_MC3_DC_VOLTAGE_SAFE_STATE_NAME "MC3_DCVoltageSafeState"
#define MASTER_DBC_M100_VCU_STATES1_MC4_DC_VOLTAGE_SAFE_STATE_NAME "MC4_DCVoltageSafeState"
#define MASTER_DBC_M100_VCU_STATES1_MC1_HV_DETECT_NAME "MC1_HVDetect"
#define MASTER_DBC_M100_VCU_STATES1_MC1_NEG_FB_NAME "MC1_NegFB"
#define MASTER_DBC_M100_VCU_STATES1_MC1_POS_FB_NAME "MC1_PosFB"
#define MASTER_DBC_M100_VCU_STATES1_MC1_PRE_CHG_FB_NAME "MC1_PreChgFB"
#define MASTER_DBC_M100_VCU_STATES1_MC2_HV_DETECT_NAME "MC2_HVDetect"
#define MASTER_DBC_M100_VCU_STATES1_MC2_NEG_FB_NAME "MC2_NegFB"
#define MASTER_DBC_M100_VCU_STATES1_MC2_POS_FB_NAME "MC2_PosFB"
#define MASTER_DBC_M100_VCU_STATES1_MC2_PRE_CHG_FB_NAME "MC2_PreChgFB"
#define MASTER_DBC_M100_VCU_STATES1_MC3_HV_DETECT_NAME "MC3_HVDetect"
#define MASTER_DBC_M100_VCU_STATES1_MC3_NEG_FB_NAME "MC3_NegFB"
#define MASTER_DBC_M100_VCU_STATES1_MC3_POS_FB_NAME "MC3_PosFB"
#define MASTER_DBC_M100_VCU_STATES1_MC3_PRE_CHG_FB_NAME "MC3_PreChgFB"
#define MASTER_DBC_M100_VCU_STATES1_MC4_HV_DETECT_NAME "MC4_HVDetect"
#define MASTER_DBC_M100_VCU_STATES1_MC4_NEG_FB_NAME "MC4_NegFB"
#define MASTER_DBC_M100_VCU_STATES1_MC4_POS_FB_NAME "MC4_PosFB"
#define MASTER_DBC_M100_VCU_STATES1_MC4_PRE_CHG_FB_NAME "MC4_PreChgFB"
#define MASTER_DBC_M100_VCU_STATES1_PERFORMANCE_LEVEL_NAME "Performance_Level"
#define MASTER_DBC_M102_VCU_STATES2_VCU_12_V_INPUT_NAME "VCU_12V_Input"
#define MASTER_DBC_M102_VCU_STATES2_VCU_5_V_OUTPUT_NAME "VCU_5V_Output"
#define MASTER_DBC_M102_VCU_STATES2_MC1_POS_CMD_NAME "MC1_Pos_Cmd"
#define MASTER_DBC_M102_VCU_STATES2_MC1_PRE_CHG_CMD_NAME "MC1_PreChg_Cmd"
#define MASTER_DBC_M102_VCU_STATES2_MC1_PRE_CHG_COMPLETE_NAME "MC1_PreChgComplete"
#define MASTER_DBC_M102_VCU_STATES2_MC2_POS_CMD_NAME "MC2_Pos_Cmd"
#define MASTER_DBC_M102_VCU_STATES2_MC2_PRE_CHG_CMD_NAME "MC2_PreChg_Cmd"
#define MASTER_DBC_M102_VCU_STATES2_MC2_PRE_CHG_COMPLETE_NAME "MC2_PreChgComplete"
#define MASTER_DBC_M102_VCU_STATES2_MC3_POS_CMD_NAME "MC3_Pos_Cmd"
#define MASTER_DBC_M102_VCU_STATES2_MC3_PRE_CHG_CMD_NAME "MC3_PreChg_Cmd"
#define MASTER_DBC_M102_VCU_STATES2_MC3_PRE_CHG_COMPLETE_NAME "MC3_PreChgComplete"
#define MASTER_DBC_M102_VCU_STATES2_MC4_POS_CMD_NAME "MC4_Pos_Cmd"
#define MASTER_DBC_M102_VCU_STATES2_MC4_PRE_CHG_CMD_NAME "MC4_PreChg_Cmd"
#define MASTER_DBC_M102_VCU_STATES2_MC4_PRE_CHG_COMPLETE_NAME "MC4_PreChgComplete"
#define MASTER_DBC_M102_VCU_STATES2_CREEP_MODE_NAME "Creep_Mode"
#define MASTER_DBC_M102_VCU_STATES2_IDLE_MODE_NAME "Idle_Mode"
#define MASTER_DBC_M102_VCU_STATES2_BURNOUT_MODE_NAME "Burnout_Mode"
#define MASTER_DBC_M102_VCU_STATES2_LAUNCH_MODE_NAME "Launch_Mode"
#define MASTER_DBC_M102_VCU_STATES2_INV_CONTROL_MODE_NAME "InvControl_Mode"
#define MASTER_DBC_M102_VCU_STATES2_SPEED_MODE_ALLOWED_NAME "SpeedMode_Allowed"
#define MASTER_DBC_M102_VCU_STATES2_COOL_FAN1_ON_NAME "Cool_Fan1_On"
#define MASTER_DBC_M102_VCU_STATES2_COOL_FAN2_ON_NAME "Cool_Fan2_On"
#define MASTER_DBC_M102_VCU_STATES2_OIL_PUMP1_ON_NAME "OilPump1_On"
#define MASTER_DBC_M102_VCU_STATES2_COOL_PUMP1_CNTRL_NAME "Cool_Pump1_Cntrl"
#define MASTER_DBC_M102_VCU_STATES2_COOL_PUMP2_CNTRL_NAME "Cool_Pump2_Cntrl"
#define MASTER_DBC_M102_VCU_STATES2_COOL_PUMP_WAKE_NAME "Cool_Pump_Wake"
#define MASTER_DBC_M102_VCU_STATES2_TRANS_BRAKE_CNTRL_NAME "TransBrake_Cntrl"
#define MASTER_DBC_M102_VCU_STATES2_LINE_LOCK_CNTRL_NAME "LineLock_Cntrl"
#define MASTER_DBC_M102_VCU_STATES2_COOL_PUMP_SPD_TARGET_NAME "Cool_PumpSpdTarget"
#define MASTER_DBC_M102_VCU_STATES2_SHIFT_SOL1_NAME "Shift_Sol1"
#define MASTER_DBC_M102_VCU_STATES2_SHIFT_SOL2_NAME "Shift_Sol2"
#define MASTER_DBC_M102_VCU_STATES2_SHIFT_SOL_CNTRL_NAME "ShiftSol_Cntrl"
#define MASTER_DBC_M102_VCU_STATES2_IMD_STATE_NAME "IMDState"
#define MASTER_DBC_M102_VCU_STATES2_INERTIA_SWITCH_NAME "Inertia_Switch"
#define MASTER_DBC_M102_VCU_STATES2_LINE_LOCK_SWITCH_NAME "LineLock_Switch"
#define MASTER_DBC_M102_VCU_STATES2_TRANS_BRAKE_SWITCH_NAME "TransBrake_Switch"
#define MASTER_DBC_M102_VCU_STATES2_BRAKE_LAMPS_CNTRL_NAME "Brake_LampsCntrl"
#define MASTER_DBC_M102_VCU_STATES2_HEAD_LAMPS_CNTRL_NAME "Head_LampsCntrl"
#define MASTER_DBC_M102_VCU_STATES2_HV_SAFETY_LIGHT_CNTRL_NAME "HVSafetyLight_Cntrl"
#define MASTER_DBC_M102_VCU_STATES2_PARK_LAMPS_CNTRL_NAME "ParkLamps_Cntrl"
#define MASTER_DBC_M102_VCU_STATES2_REVERSE_LAMPS_CNTRL_NAME "ReverseLamps_Cntrl"
#define MASTER_DBC_M102_VCU_STATES2_ACC_LIGHT_CNTRL_NAME "Acc_LightCntrl"
#define MASTER_DBC_M102_VCU_STATES2_ACC_POWER_CNTRL_NAME "Acc_PowerCntrl"
#define MASTER_DBC_M102_VCU_STATES2_CHARGE_CONTACTOR_CNTRL_NAME "ChargeContactorCntrl"
#define MASTER_DBC_M102_VCU_STATES2_CONTACTORS_ENABLED_NAME "Contactors_Enabled"
#define MASTER_DBC_M104_VCU_STATES3_LIM_MULT_BATT_DCL_ACTIVE_NAME "LimMult_Batt_DCL_Active"
#define MASTER_DBC_M104_VCU_STATES3_LIM_MULT_BATT_SOC_ACTIVE_NAME "LimMult_Batt_SOC_Active"
#define MASTER_DBC_M104_VCU_STATES3_LIM_MULT_CELL_VOLT_MAX_ACTIVE_NAME "LimMult_CellVolt_Max_Active"
#define MASTER_DBC_M104_VCU_STATES3_LIM_MULT_CELL_VOLT_MIN_ACTIVE_NAME "LimMult_CellVolt_Min_Active"
#define MASTER_DBC_M104_VCU_STATES3_LIM_MULT_DRIVE_SHAFT_SPD_ACTIVE_NAME "LimMult_DriveShaft_Spd_Active"
#define MASTER_DBC_M104_VCU_STATES3_LIM_MULT_LAUNCH_TIME_ACTIVE_NAME "LimMult_Launch_Time_Active"
#define MASTER_DBC_M104_VCU_STATES3_LIM_MULT_MC1_CURR_ACTIVE_NAME "LimMult_MC1Curr_Active"
#define MASTER_DBC_M104_VCU_STATES3_LIM_MULT_MC1_TEMP_ACTIVE_NAME "LimMult_MC1Temp_Active"
#define MASTER_DBC_M104_VCU_STATES3_LIM_MULT_MC2_CURR_ACTIVE_NAME "LimMult_MC2Curr_Active"
#define MASTER_DBC_M104_VCU_STATES3_LIM_MULT_MC2_TEMP_ACTIVE_NAME "LimMult_MC2Temp_Active"
#define MASTER_DBC_M104_VCU_STATES3_LIM_MULT_MC3_CURR_ACTIVE_NAME "LimMult_MC3Curr_Active"
#define MASTER_DBC_M104_VCU_STATES3_LIM_MULT_MC3_TEMP_ACTIVE_NAME "LimMult_MC3Temp_Active"
#define MASTER_DBC_M104_VCU_STATES3_LIM_MULT_MC4_CURR_ACTIVE_NAME "LimMult_MC4Curr_Active"
#define MASTER_DBC_M104_VCU_STATES3_LIM_MULT_MC4_TEMP_ACTIVE_NAME "LimMult_MC4Temp_Active"
#define MASTER_DBC_M104_VCU_STATES3_LIM_MULT_MOTOR1_SPD_LO_ACTIVE_NAME "LimMult_Motor1_SpdLo_Active"
#define MASTER_DBC_M104_VCU_STATES3_LIM_MULT_MOTOR1_TEMP_ACTIVE_NAME "LimMult_Motor1_Temp_Active"
#define MASTER_DBC_M104_VCU_STATES3_LIM_MULT_MOTOR2_SPD_LO_ACTIVE_NAME "LimMult_Motor2_SpdLo_Active"
#define MASTER_DBC_M104_VCU_STATES3_LIM_MULT_MOTOR2_TEMP_ACTIVE_NAME "LimMult_Motor2_Temp_Active"
#define MASTER_DBC_M104_VCU_STATES3_LIM_MULT_MOTOR3_SPD_LO_ACTIVE_NAME "LimMult_Motor3_SpdLo_Active"
#define MASTER_DBC_M104_VCU_STATES3_LIM_MULT_MOTOR3_TEMP_ACTIVE_NAME "LimMult_Motor3_Temp_Active"
#define MASTER_DBC_M104_VCU_STATES3_LIM_MULT_MOTOR4_SPD_LO_ACTIVE_NAME "LimMult_Motor4_SpdLo_Active"
#define MASTER_DBC_M104_VCU_STATES3_LIM_MULT_MOTOR4_TEMP_ACTIVE_NAME "LimMult_Motor4_Temp_Active"
#define MASTER_DBC_M104_VCU_STATES3_LIM_MULT_OVER_REV_ACTIVE_NAME "LimMult_Over_rev_Active"
#define MASTER_DBC_M104_VCU_STATES3_LIM_MULT_PACK_CURRENT_ACTIVE_NAME "LimMult_Pack_Current_Active"
#define MASTER_DBC_M104_VCU_STATES3_LIM_MULT_PACK_TEMP_HI_ACTIVE_NAME "LimMult_Pack_TempHi_Active"
#define MASTER_DBC_M104_VCU_STATES3_LIM_MULT_PACK_TEMP_LO_ACTIVE_NAME "LimMult_Pack_TempLo_Active"
#define MASTER_DBC_M104_VCU_STATES3_LIM_MULT_PACK_VOLTAGE_ACTIVE_NAME "LimMult_Pack_Voltage_Active"
#define MASTER_DBC_M104_VCU_STATES3_LIM_MULT_SHIFT1_TQ_ACTIVE_NAME "LimMult_Shift1_Tq_Active"
#define MASTER_DBC_M104_VCU_STATES3_LIM_MULT_SHIFT2_TQ_ACTIVE_NAME "LimMult_Shift2_Tq_Active"
#define MASTER_DBC_M104_VCU_STATES3_LIM_MULT_SHIFT3_TQ_ACTIVE_NAME "LimMult_Shift3_Tq_Active"
#define MASTER_DBC_M104_VCU_STATES3_LIM_MULT_SHIFT4_TQ_ACTIVE_NAME "LimMult_Shift4_Tq_Active"
#define MASTER_DBC_M104_VCU_STATES3_LIM_MULT_SHIFT5_TQ_ACTIVE_NAME "LimMult_Shift5_Tq_Active"
#define MASTER_DBC_M104_VCU_STATES3_LIM_MULT_VEH_SPD_HI_ACTIVE_NAME "LimMult_VehSpd_Hi_Active"
#define MASTER_DBC_M104_VCU_STATES3_LIM_MULT_VEH_SPD_LO_ACTIVE_NAME "LimMult_VehSpd_Lo_Active"
#define MASTER_DBC_M104_VCU_STATES3_LIM_MULT_MC1_CURR_RAMP_ACTIVE_NAME "LimMult_MC1CurrRamp_Active"
#define MASTER_DBC_M104_VCU_STATES3_LIM_MULT_MC2_CURR_RAMP_ACTIVE_NAME "LimMult_MC2CurrRamp_Active"
#define MASTER_DBC_M104_VCU_STATES3_LIM_MULT_MC3_CURR_RAMP_ACTIVE_NAME "LimMult_MC3CurrRamp_Active"
#define MASTER_DBC_M104_VCU_STATES3_LIM_MULT_MC4_CURR_RAMP_ACTIVE_NAME "LimMult_MC4CurrRamp_Active"
#define MASTER_DBC_M104_VCU_STATES3_LAUNCH_TIMER_RUNNING_NAME "LaunchTimer_Running"
#define MASTER_DBC_M104_VCU_STATES3_LAUNCH_RAMP_TIME_NAME "LaunchRamp_Time"
#define MASTER_DBC_M104_VCU_STATES3_RUN_TIME_COUNTER_NAME "Run_Time_Counter"
#define MASTER_DBC_M106_DRIVER_INPUTS1_ACCEL_PEDAL_NAME "AccelPedal"
#define MASTER_DBC_M106_DRIVER_INPUTS1_ACCEL_PEDAL1_NAME "AccelPedal1"
#define MASTER_DBC_M106_DRIVER_INPUTS1_ACCEL_PEDAL2_NAME "AccelPedal2"
#define MASTER_DBC_M106_DRIVER_INPUTS1_ACCEL_PEDAL_X_CHECK_DIFF_NAME "AccelPedalXCheckDiff"
#define MASTER_DBC_M106_DRIVER_INPUTS1_ACCEL_PEDAL_VALID_NAME "AccelPedalValid"
#define MASTER_DBC_M106_DRIVER_INPUTS1_ACCEL_PEDAL1_VALID_NAME "AccelPedal1Valid"
#define MASTER_DBC_M106_DRIVER_INPUTS1_ACCEL_PEDAL2_VALID_NAME "AccelPedal2Valid"
#define MASTER_DBC_M106_DRIVER_INPUTS1_BRAKE_SWITCH_NAME "Brake_Switch"
#define MASTER_DBC_M106_DRIVER_INPUTS1_BRAKE_SWITCH1_NAME "Brake_Switch1"
#define MASTER_DBC_M106_DRIVER_INPUTS1_BRAKE_SWITCH2_NAME "Brake_Switch2"
#define MASTER_DBC_M106_DRIVER_INPUTS1_IGNITION_SWITCH_NAME "Ignition_Switch"
#define MASTER_DBC_M106_DRIVER_INPUTS1_START_SWITCH_NAME "Start_Switch"
#define MASTER_DBC_M106_DRIVER_INPUTS1_MANUAL_REGEN_NAME "Manual_Regen"
#define MASTER_DBC_M106_DRIVER_INPUTS1_MANUAL_REGEN1_NAME "Manual_Regen1"
#define MASTER_DBC_M106_DRIVER_INPUTS1_MANUAL_REGEN2_NAME "Manual_Regen2"
#define MASTER_DBC_M108_DRIVER_INPUTS2_MAN_REGEN_X_CHECK_DIFF_NAME "ManRegen_XCheckDiff"
#define MASTER_DBC_M108_DRIVER_INPUTS2_MANUAL_REGEN1_VALID_NAME "Manual_Regen1Valid"
#define MASTER_DBC_M108_DRIVER_INPUTS2_MANUAL_REGEN2_VALID_NAME "Manual_Regen2Valid"
#define MASTER_DBC_M108_DRIVER_INPUTS2_PARK_SWITCH_NAME "Park_Switch"
#define MASTER_DBC_M108_DRIVER_INPUTS2_NEUTRAL_SWITCH_NAME "Neutral_Switch"
#define MASTER_DBC_M108_DRIVER_INPUTS2_DRIVE_SWITCH_NAME "Drive_Switch"
#define MASTER_DBC_M108_DRIVER_INPUTS2_REVERSE_SWITCH_NAME "Reverse_Switch"
#define MASTER_DBC_M108_DRIVER_INPUTS2_HEAD_LAMP_SWITCH_NAME "Head_LampSwitch"
#define MASTER_DBC_M108_DRIVER_INPUTS2_PARK_LAMP_SWITCH_NAME "ParkLamp_Switch"
#define MASTER_DBC_M108_DRIVER_INPUTS2_ENABLE_SWITCH_NAME "Enable_Switch"
#define MASTER_DBC_M108_DRIVER_INPUTS2_COOLING_FAN_ORD_SWITCH_NAME "Cooling_FanOrdSwitch"
#define MASTER_DBC_M108_DRIVER_INPUTS2_COOLING_PUMP_ORD_SWITCH_NAME "Cooling_PumpOrdSwitch"
#define MASTER_DBC_M108_DRIVER_INPUTS2_HEATER_SWITCH_NAME "HeaterSwitch"
#define MASTER_DBC_M108_DRIVER_INPUTS2_AC_SWITCH_NAME "ACSwitch"
#define MASTER_DBC_M108_DRIVER_INPUTS2_ACC_LIGHT_SWITCH_NAME "Acc_LightSwitch"
#define MASTER_DBC_M108_DRIVER_INPUTS2_WAKE_SWITCH_NAME "Wake_Switch"
#define MASTER_DBC_M108_DRIVER_INPUTS2_LOGGING_SWITCH_NAME "Logging_Switch"
#define MASTER_DBC_M108_DRIVER_INPUTS2_CC_CANCEL_NAME "CCCancel"
#define MASTER_DBC_M108_DRIVER_INPUTS2_CC_ON_NAME "CCOn"
#define MASTER_DBC_M108_DRIVER_INPUTS2_CC_RSM_ACC_NAME "CCRsmAcc"
#define MASTER_DBC_M108_DRIVER_INPUTS2_CC_SET_CST_NAME "CCSetCst"
#define MASTER_DBC_M112_VEHICLE_INPUTS1_BRAKE_PRESSURE_NAME "Brake_Pressure"
#define MASTER_DBC_M112_VEHICLE_INPUTS1_TRANSMISSION_PRESSURE_NAME "Transmission_Pressure"
#define MASTER_DBC_M112_VEHICLE_INPUTS1_WHEEL_BAR_PRESS1_NAME "WheelBar_Press1"
#define MASTER_DBC_M112_VEHICLE_INPUTS1_WHEEL_BAR_PRESS2_NAME "WheelBar_Press2"
#define MASTER_DBC_M114_VEHICLE_INPUTS2_TRANSMISSION_TEMP_NAME "Transmission_Temp"
#define MASTER_DBC_M114_VEHICLE_INPUTS2_COOLANT_TEMP1_NAME "Coolant_Temp1"
#define MASTER_DBC_M114_VEHICLE_INPUTS2_COOLANT_TEMP2_NAME "Coolant_Temp2"
#define MASTER_DBC_M114_VEHICLE_INPUTS2_AMBIENT_AIR_TEMP_NAME "AmbientAirTemp"
#define MASTER_DBC_M114_VEHICLE_INPUTS2_HEATER_INLET_TEMP_NAME "HeaterInletTemp"
#define MASTER_DBC_M114_VEHICLE_INPUTS2_HEATER_OUTLET_TEMP_NAME "HeaterOutletTemp"
#define MASTER_DBC_M114_VEHICLE_INPUTS2_AC_PRESSURE_NAME "ACPressure"
#define MASTER_DBC_M116_VEHICLE_INPUTS3_BRAKE_VAC_PRESSURE_NAME "BrakeVacPressure"
#define MASTER_DBC_M116_VEHICLE_INPUTS3_VEHICLE_SPEED_NAME "Vehicle_Speed"
#define MASTER_DBC_M116_VEHICLE_INPUTS3_DRIVE_SHAFT_SPEED_NAME "DriveShaft_Speed"
#define MASTER_DBC_M116_VEHICLE_INPUTS3_DRIVE_WHEEL_SPEED_NAME "DriveWheel_Speed"
#define MASTER_DBC_M116_VEHICLE_INPUTS3_GROUND_WHEEL_SPEED_NAME "Ground_WheelSpeed"
#define MASTER_DBC_M116_VEHICLE_INPUTS3_TC_SLIP_MEASURED_NAME "TC_Slip_Measured"
#define MASTER_DBC_M118_VEHICLE_INPUTS4_VEHICLE_ODOMETER_NAME "Vehicle_Odometer"
#define MASTER_DBC_M120_MOTOR_TORQUE_DATA1_MOTOR1_TORQUE_REQUEST_NAME "Motor1_Torque_Request"
#define MASTER_DBC_M120_MOTOR_TORQUE_DATA1_MOTOR1_TQ_LIM_HI_NAME "Motor1_TqLimHi"
#define MASTER_DBC_M120_MOTOR_TORQUE_DATA1_MOTOR1_TQ_LIM_LO_NAME "Motor1_TqLimLo"
#define MASTER_DBC_M120_MOTOR_TORQUE_DATA1_MOTOR1_TQ_TABLE_NAME "Motor1_TqTable"
#define MASTER_DBC_M120_MOTOR_TORQUE_DATA1_MOTOR1_TQ_LIM_MULT_HI_NAME "Motor1_TqLimMultHi"
#define MASTER_DBC_M120_MOTOR_TORQUE_DATA1_MOTOR1_TQ_LIM_MULT_LO_NAME "Motor1_TqLimMultLo"
#define MASTER_DBC_M122_MOTOR_TORQUE_DATA2_MOTOR1_CREEP_TORQUE_NAME "Motor1_CreepTorque"
#define MASTER_DBC_M122_MOTOR_TORQUE_DATA2_MOTOR1_REVERSE_TORQUE_NAME "Motor1_ReverseTorque"
#define MASTER_DBC_M122_MOTOR_TORQUE_DATA2_MOTOR1_TORQUE_TRIM_TABLE_NAME "Motor1_TorqueTrimTable"
#define MASTER_DBC_M122_MOTOR_TORQUE_DATA2_MOTOR_TQ_SPD_FEED_FORWARD_NAME "MotorTqSpd_FeedForward"
#define MASTER_DBC_M122_MOTOR_TORQUE_DATA2_PEDAL_TQ_MULT_TBL1_NAME "PedalTqMult_Tbl1"
#define MASTER_DBC_M122_MOTOR_TORQUE_DATA2_PEDAL_TQ_MULT_TBL2_NAME "PedalTqMult_Tbl2"
#define MASTER_DBC_M124_MOTOR_TORQUE_DATA3_MOTOR2_TORQUE_REQUEST_NAME "Motor2_TorqueRequest"
#define MASTER_DBC_M124_MOTOR_TORQUE_DATA3_MOTOR2_TQ_LIM_HI_NAME "Motor2_TqLimHi"
#define MASTER_DBC_M124_MOTOR_TORQUE_DATA3_MOTOR2_TQ_LIM_LO_NAME "Motor2_TqLimLo"
#define MASTER_DBC_M124_MOTOR_TORQUE_DATA3_MOTOR2_TQ_TABLE_NAME "Motor2_TqTable"
#define MASTER_DBC_M124_MOTOR_TORQUE_DATA3_MOTOR2_TQ_LIM_MULT_HI_NAME "Motor2_TqLimMultHi"
#define MASTER_DBC_M124_MOTOR_TORQUE_DATA3_MOTOR2_TQ_LIM_MULT_LO_NAME "Motor2_TqLimMultLo"
#define MASTER_DBC_M126_MOTOR_TORQUE_DATA4_MOTOR2_CREEP_TORQUE_NAME "Motor2_CreepTorque"
#define MASTER_DBC_M126_MOTOR_TORQUE_DATA4_MOTOR2_REVERSE_TORQUE_NAME "Motor2_ReverseTorque"
#define MASTER_DBC_M126_MOTOR_TORQUE_DATA4_MOTOR2_TORQUE_TRIM_TABLE_NAME "Motor2_TorqueTrimTable"
#define MASTER_DBC_M126_MOTOR_TORQUE_DATA4_REGEN_BRAKE_TORQUE_NAME "RegenBrake_Torque"
#define MASTER_DBC_M126_MOTOR_TORQUE_DATA4_PEDAL_TQ_MULT_TBL3_NAME "PedalTqMult_Tbl3"
#define MASTER_DBC_M126_MOTOR_TORQUE_DATA4_PEDAL_TQ_MULT_TBL4_NAME "PedalTqMult_Tbl4"
#define MASTER_DBC_M128_MOTOR_TORQUE_DATA5_MOTOR3_TORQUE_REQUEST_NAME "Motor3_TorqueRequest"
#define MASTER_DBC_M128_MOTOR_TORQUE_DATA5_MOTOR3_TQ_LIM_HI_NAME "Motor3_TqLimHi"
#define MASTER_DBC_M128_MOTOR_TORQUE_DATA5_MOTOR3_TQ_LIM_LO_NAME "Motor3_TqLimLo"
#define MASTER_DBC_M128_MOTOR_TORQUE_DATA5_MOTOR3_TQ_TABLE_NAME "Motor3_TqTable"
#define MASTER_DBC_M128_MOTOR_TORQUE_DATA5_MOTOR3_TQ_LIM_MULT_HI_NAME "Motor3_TqLimMultHi"
#define MASTER_DBC_M128_MOTOR_TORQUE_DATA5_MOTOR3_TQ_LIM_MULT_LO_NAME "Motor3_TqLimMultLo"
#define MASTER_DBC_M130_MOTOR_TORQUE_DATA6_MOTOR3_CREEP_TORQUE_NAME "Motor3_CreepTorque"
#define MASTER_DBC_M130_MOTOR_TORQUE_DATA6_MOTOR3_REVERSE_TORQUE_NAME "Motor3_ReverseTorque"
#define MASTER_DBC_M130_MOTOR_TORQUE_DATA6_MOTOR3_TORQUE_TRIM_TABLE_NAME "Motor3_TorqueTrimTable"
#define MASTER_DBC_M130_MOTOR_TORQUE_DATA6_MOTOR4_TORQUE_REQUEST_NAME "Motor4_TorqueRequest"
#define MASTER_DBC_M132_MOTOR_TORQUE_DATA7_MOTOR4_TQ_LIM_HI_NAME "Motor4_TqLimHi"
#define MASTER_DBC_M132_MOTOR_TORQUE_DATA7_MOTOR4_TQ_LIM_LO_NAME "Motor4_TqLimLo"
#define MASTER_DBC_M132_MOTOR_TORQUE_DATA7_MOTOR4_TQ_TABLE_NAME "Motor4_TqTable"
#define MASTER_DBC_M132_MOTOR_TORQUE_DATA7_MOTOR4_CREEP_TORQUE_NAME "Motor4_CreepTorque"
#define MASTER_DBC_M132_MOTOR_TORQUE_DATA7_MOTOR4_TQ_LIM_MULT_HI_NAME "Motor4_TqLimMultHi"
#define MASTER_DBC_M132_MOTOR_TORQUE_DATA7_MOTOR4_TQ_LIM_MULT_LO_NAME "Motor4_TqLimMultLo"
#define MASTER_DBC_M134_MOTOR_TORQUE_DATA8_MOTOR4_REVERSE_TORQUE_NAME "Motor4_ReverseTorque"
#define MASTER_DBC_M134_MOTOR_TORQUE_DATA8_MOTOR4_TORQUE_TRIM_TABLE_NAME "Motor4_TorqueTrimTable"
#define MASTER_DBC_M134_MOTOR_TORQUE_DATA8_LAUNCH_TORQUE_MULTIPLIER_NAME "Launch_Torque_Multiplier"
#define MASTER_DBC_M134_MOTOR_TORQUE_DATA8_LAUNCH_TORQUE_TIME_NAME "Launch_Torque_Time"
#define MASTER_DBC_M136_MOTOR_SPEED_DATA1_IDLE_TARGET_SPEED_NAME "IdleTarget_Speed"
#define MASTER_DBC_M136_MOTOR_SPEED_DATA1_START_RAMP_TARGET_SPEED_NAME "StartRamp_TargetSpeed"
#define MASTER_DBC_M136_MOTOR_SPEED_DATA1_FREE_REV_TARGET_SPEED_NAME "FreeRevTarget_Speed"
#define MASTER_DBC_M136_MOTOR_SPEED_DATA1_BURNOUT_TARGET_SPEED_NAME "BurnoutTargetSpeed"
#define MASTER_DBC_M138_MOTOR_SPEED_DATA2_LAUNCH_TARGET_SPEED_NAME "LaunchTarget_Speed"
#define MASTER_DBC_M138_MOTOR_SPEED_DATA2_MOTOR_TARGET_SPEED_NAME "Motor_TargetSpeed"
#define MASTER_DBC_M138_MOTOR_SPEED_DATA2_SPEED_CONTROL_PID_NAME "SpeedControl_PID"
#define MASTER_DBC_M138_MOTOR_SPEED_DATA2_SPEED_CONTROL_PID_ERROR_NAME "SpeedControl_PID_Error"
#define MASTER_DBC_M140_MOTOR_SPEED_DATA3_SPEED_CONTROL_PID_P_TERM_NAME "SpeedControl_PID_PTerm"
#define MASTER_DBC_M140_MOTOR_SPEED_DATA3_SPEED_CONTROL_PID_I_TERM_NAME "SpeedControl_PID_ITerm"
#define MASTER_DBC_M140_MOTOR_SPEED_DATA3_SPEED_CONTROL_PID_D_TERM_NAME "SpeedControl_PID_DTerm"
#define MASTER_DBC_M144_VCU_FAULT_STATES1_FAULT_ACC_LED_NAME "Fault_Acc_LED"
#define MASTER_DBC_M144_VCU_FAULT_STATES1_FAULT_ACC_POWER_NAME "Fault_Acc_Power"
#define MASTER_DBC_M144_VCU_FAULT_STATES1_FAULT_ACC_PEDAL1_INPUT_HI_NAME "Fault_AccPedal1_Input_Hi"
#define MASTER_DBC_M144_VCU_FAULT_STATES1_FAULT_ACC_PEDAL1_INPUT_LO_NAME "Fault_AccPedal1_Input_Lo"
#define MASTER_DBC_M144_VCU_FAULT_STATES1_FAULT_ACC_PEDAL1_SPIKE_NAME "Fault_AccPedal1_Spike"
#define MASTER_DBC_M144_VCU_FAULT_STATES1_FAULT_ACC_PEDAL2_INPUT_HI_NAME "Fault_AccPedal2_InputHi"
#define MASTER_DBC_M144_VCU_FAULT_STATES1_FAULT_ACC_PEDAL2_INPUT_LO_NAME "Fault_AccPedal2_InputLo"
#define MASTER_DBC_M144_VCU_FAULT_STATES1_FAULT_ACC_PEDAL2_SPIKE_NAME "Fault_AccPedal2_Spike"
#define MASTER_DBC_M144_VCU_FAULT_STATES1_FAULT_ACCEL_PEDAL_X_CHECK_NAME "Fault_AccelPedal_XCheck"
#define MASTER_DBC_M144_VCU_FAULT_STATES1_FAULT_BRAKE_LAMPS_NAME "Fault_Brake_Lamps"
#define MASTER_DBC_M144_VCU_FAULT_STATES1_FAULT_BRK_PRESS_INPUT_HI_NAME "Fault_Brk_Press_InputHi"
#define MASTER_DBC_M144_VCU_FAULT_STATES1_FAULT_BRK_PRESS_INPUT_LO_NAME "Fault_Brk_Press_InputLo"
#define MASTER_DBC_M144_VCU_FAULT_STATES1_FAULT_COOLING_PUMP1_NAME "Fault_Cooling_Pump1"
#define MASTER_DBC_M144_VCU_FAULT_STATES1_FAULT_COOLING_PUMP2_NAME "Fault_Cooling_Pump2"
#define MASTER_DBC_M144_VCU_FAULT_STATES1_FAULT_COOL_TEMP1_INPUT_HI_NAME "Fault_Cool_Temp1_InputHi"
#define MASTER_DBC_M144_VCU_FAULT_STATES1_FAULT_COOL_TEMP1_INPUT_LO_NAME "Fault_Cool_Temp1_InputLo"
#define MASTER_DBC_M144_VCU_FAULT_STATES1_FAULT_COOL_TEMP2_INPUT_HI_NAME "Fault_Cool_Temp2_InputHi"
#define MASTER_DBC_M144_VCU_FAULT_STATES1_FAULT_COOL_TEMP2_INPUT_LO_NAME "Fault_Cool_Temp2_InputLo"
#define MASTER_DBC_M144_VCU_FAULT_STATES1_FAULT_DC_VOLTAGE_SAFE_LIGHT_NAME "Fault_DCVoltage_SafeLight"
#define MASTER_DBC_M144_VCU_FAULT_STATES1_FAULT_HEAD_LAMPS_NAME "Fault_Head_Lamps"
#define MASTER_DBC_M144_VCU_FAULT_STATES1_FAULT_IDLE_TARGET_NAME "Fault_Idle_Target"
#define MASTER_DBC_M144_VCU_FAULT_STATES1_FAULT_IGN_CHG_PLUG_X_CHECK_NAME "Fault_IgnChgPlug_XCheck"
#define MASTER_DBC_M144_VCU_FAULT_STATES1_FAULT_MC1_CONTACTOR_NAME "Fault_MC1_Contactor"
#define MASTER_DBC_M144_VCU_FAULT_STATES1_FAULT_MC1_SUPPLY_VOLTAGE_LOW_NAME "Fault_MC1SupplyVoltageLow"
#define MASTER_DBC_M144_VCU_FAULT_STATES1_FAULT_MC2_CONTACTOR_NAME "Fault_MC2_Contactor"
#define MASTER_DBC_M144_VCU_FAULT_STATES1_FAULT_MC2_SUPPLY_VOLTAGE_LOW_NAME "Fault_MC2SupplyVoltageLow"
#define MASTER_DBC_M144_VCU_FAULT_STATES1_FAULT_MC3_CONTACTOR_NAME "Fault_MC3_Contactor"
#define MASTER_DBC_M144_VCU_FAULT_STATES1_FAULT_MC3_SUPPLY_VOLTAGE_LOW_NAME "Fault_MC3SupplyVoltageLow"
#define MASTER_DBC_M144_VCU_FAULT_STATES1_FAULT_MC4_CONTACTOR_NAME "Fault_MC4_Contactor"
#define MASTER_DBC_M144_VCU_FAULT_STATES1_FAULT_MC4_SUPPLY_VOLTAGE_LOW_NAME "Fault_MC4SupplyVoltageLow"
#define MASTER_DBC_M144_VCU_FAULT_STATES1_FAULT_MC5_SUPPLY_VOLTAGE_LOW_NAME "Fault_MC5SupplyVoltageLow"
#define MASTER_DBC_M144_VCU_FAULT_STATES1_FAULT_LINE_LOCK_SOL_NAME "Fault_LineLock_Sol"
#define MASTER_DBC_M144_VCU_FAULT_STATES1_FAULT_MANUAL_REGEN1_INPUT_HI_NAME "Fault_Manual_Regen1_InputHi"
#define MASTER_DBC_M144_VCU_FAULT_STATES1_FAULT_MANUAL_REGEN1_INPUT_LO_NAME "Fault_Manual_Regen1_InputLo"
#define MASTER_DBC_M144_VCU_FAULT_STATES1_FAULT_MANUAL_REGEN1_SPIKE_NAME "Fault_Manual_Regen1_Spike"
#define MASTER_DBC_M144_VCU_FAULT_STATES1_FAULT_MANUAL_REGEN2_INPUT_HI_NAME "Fault_Manual_Regen2_InputHi"
#define MASTER_DBC_M144_VCU_FAULT_STATES1_FAULT_MANUAL_REGEN2_INPUT_LO_NAME "Fault_Manual_Regen2_InputLo"
#define MASTER_DBC_M144_VCU_FAULT_STATES1_FAULT_MANUAL_REGEN2_SPIKE_NAME "Fault_Manual_Regen2_Spike"
#define MASTER_DBC_M144_VCU_FAULT_STATES1_FAULT_PARK_LAMPS_NAME "Fault_Park_Lamps"
#define MASTER_DBC_M144_VCU_FAULT_STATES1_FAULT_REGEN_LEVER_X_CHK_NAME "Fault_Regen_LeverXChk"
#define MASTER_DBC_M144_VCU_FAULT_STATES1_FAULT_REVERSE_LAMPS_NAME "Fault_Reverse_Lamps"
#define MASTER_DBC_M144_VCU_FAULT_STATES1_FAULT_SHIFT_SOL_NAME "Fault_Shift_Sol"
#define MASTER_DBC_M144_VCU_FAULT_STATES1_FAULT_TRANS_BRK_SOL_NAME "Fault_TransBrk_Sol"
#define MASTER_DBC_M144_VCU_FAULT_STATES1_FAULT_TRANS_PRESS_INPUT_HI_NAME "Fault_Trans_Press_InputHi"
#define MASTER_DBC_M144_VCU_FAULT_STATES1_FAULT_TRANS_PRESS_INPUT_LO_NAME "Fault_Trans_Press_InputLo"
#define MASTER_DBC_M144_VCU_FAULT_STATES1_FAULT_TRANS_TEMP_INPUT_HI_NAME "Fault_Trans_Temp_InputHi"
#define MASTER_DBC_M144_VCU_FAULT_STATES1_FAULT_TRANS_TEMP_INPUT_LO_NAME "Fault_Trans_Temp_InputLo"
#define MASTER_DBC_M144_VCU_FAULT_STATES1_FAULT_WHEEL_BAR_PRESS1_INPUT_HI_NAME "Fault_WheelBar_Press1_InputHi"
#define MASTER_DBC_M144_VCU_FAULT_STATES1_FAULT_WHEEL_BAR_PRESS1_INPUT_LO_NAME "Fault_WheelBar_Press1_InputLo"
#define MASTER_DBC_M144_VCU_FAULT_STATES1_FAULT_WHEEL_BAR_PRESS2_INPUT_HI_NAME "Fault_WheelBar_Press2_InputHi"
#define MASTER_DBC_M144_VCU_FAULT_STATES1_FAULT_WHEEL_BAR_PRESS2_INPUT_LO_NAME "Fault_WheelBar_Press2_InputLo"
#define MASTER_DBC_M144_VCU_FAULT_STATES1_FAULT_WHEEL_SPEED_DD_SPIKE_NAME "Fault_Wheel_Speed_DD_Spike"
#define MASTER_DBC_M144_VCU_FAULT_STATES1_FAULT_WHEEL_SPEED_DL_SPIKE_NAME "Fault_Wheel_Speed_DL_Spike"
#define MASTER_DBC_M144_VCU_FAULT_STATES1_FAULT_WHEEL_SPEED_DR_SPIKE_NAME "Fault_Wheel_Speed_DR_Spike"
#define MASTER_DBC_M144_VCU_FAULT_STATES1_FAULT_WHEEL_SPEED_NL_SPIKE_NAME "Fault_Wheel_Speed_NL_Spike"
#define MASTER_DBC_M144_VCU_FAULT_STATES1_FAULT_WHEEL_SPEED_NR_SPIKE_NAME "Fault_Wheel_Speed_NR_Spike"

/**
 * Signals in message M173_Modulation_And_Flux_Info.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_m173_modulation_and_flux_info_t {
    /**
     * This is the modulation index. The scale factor is x100. To get the actual modulation index divide the value by 100.
     *
     * Range: -32768..32767 (-3.2768..3.2767 -)
     * Scale: 0.0001
     * Offset: 0
     */
    int16_t inv_modulation_index;

    /**
     * This is the current output of the flux regulator.
     *
     * Range: -32768..32767 (-3276.8..3276.7 current:A)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_flux_weakening_output;

    /**
     * The commanded D-axis current
     *
     * Range: -32768..32767 (-3276.8..3276.7 current:A)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_id_command;

    /**
     * The commanded Q-axis current
     *
     * Range: -32768..32767 (-3276.8..3276.7 current:A)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_iq_command;
};

/**
 * Signals in message M172_Torque_And_Timer_Info.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_m172_torque_and_timer_info_t {
    /**
     * The commanded Torque
     *
     * Range: -32768..32767 (-3276.8..3276.7 torque:N.m)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_commanded_torque;

    /**
     * Estimated motor torque feedback
     *
     * Range: -32768..32767 (-3276.8..3276.7 torque:N.m)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_torque_feedback;

    /**
     * Updated every 3 msec. This will roll over in approximately 150 days!
     *
     * Range: 0..4294933333 (0..12884800 time:second)
     * Scale: 0.003
     * Offset: 0
     */
    uint32_t inv_power_on_timer;
};

/**
 * Signals in message M194_Read_Write_Param_Response.
 *
 * To write a parameter use message 0x0C1 with byte #2 set to 1 (write). 
To read a parameter use message 0x0C1 with byte #2 to set 0 (read). 
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_m194_read_write_param_response_t {
    /**
     * Address of parameter response message data.
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t inv_parameter_response_addr;

    /**
     * 0=Write failure, 1=Success
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_parameter_response_write_ok;

    /**
     * Data from parameter message.  All data is 16 bits and is contained in bytes 4 and 5. Bytes 6 and 7 should be ignored.
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t inv_parameter_response_data;
};

/**
 * Signals in message M193_Read_Write_Param_Command.
 *
 * To write a parameter use message 0x0C1 with byte #2 set to 1 (write). 
To read a parameter use message 0x0C1 with byte #2 to set 0 (read). 
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_m193_read_write_param_command_t {
    /**
     * Address of parameter to be written or read.
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t vcu_inv_parameter_address;

    /**
     * 0=Read, 1=Write
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_inv_parameter_rw_command;

    /**
     * Data to be written.  All data is 16 bits and is contained in bytes 4 and 5.
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t vcu_inv_parameter_data;
};

/**
 * Signals in message M192_Command_Message.
 *
 * The command message is used to transmit data to the controller. This message is sent from a user supplied external controller to the PMxxx controller.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_m192_command_message_t {
    /**
     * Torque command when in torque mode
     *
     * Range: -32768..32767 (-3276.8..3276.7 torque:N.m)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t vcu_inv_torque_command;

    /**
     * Speed command used when in speed mode
     *
     * Range: -32768..32767 (-32768..32767 angular_speed:rpm)
     * Scale: 1
     * Offset: 0
     */
    int16_t vcu_inv_speed_command;

    /**
     * 0=Reverse, 1=Forward.  Forward is positive motor speed.
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_inv_direction_command;

    /**
     * 0=Inverter OFF, 1 = Inverter ON
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_inv_inverter_enable;

    /**
     * 0=Discharge Disable,1=Discharge Enable
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_inv_inverter_discharge;

    /**
     * 0 = No change to mode, 1 = change to speed mode from torque mode
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_inv_speed_mode_enable;

    /**
     * Rolling Counter sent to inverter.  If used increment count with each message sent.  Otherwise can be set to 0.
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_inv_rolling_counter;

    /**
     * Torque Limit, set to 0 to keep default
     *
     * Range: -32768..32767 (-3276.8..3276.7 torque:N.m)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t vcu_inv_torque_limit_command;
};

/**
 * Signals in message M171_Fault_Codes.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_m171_fault_codes_t {
    /**
     * Each bit represents a fault. Please refer to PM100 Users Manual for details.
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t inv_post_fault_lo;

    /**
     * Each bit represents a fault. Please refer to PM100 Users Manual for details.
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t inv_post_fault_hi;

    /**
     * Each bit represents a fault. Please refer to PM100 Users Manual for details.
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t inv_run_fault_lo;

    /**
     * Each bit represents a fault. Please refer to PM100 Users Manual for details.
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t inv_run_fault_hi;
};

/**
 * Signals in message M170_Internal_States.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_m170_internal_states_t {
    /**
     * Different states for the vehicle state machine
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_vsm_state;

    /**
     * The current active PWM frequency
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_pwm_frequency;

    /**
     * Different states for the inverter state machine
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_inverter_state;

    /**
     * 0=OFF, 1=ON
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_relay_1_status;

    /**
     * 0=OFF, 1=ON
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_relay_2_status;

    /**
     * 0=OFF, 1=ON
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_relay_3_status;

    /**
     * 0=OFF, 1=ON
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_relay_4_status;

    /**
     * 0=OFF, 1=ON
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_relay_5_status;

    /**
     * 0=OFF, 1=ON
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_relay_6_status;

    /**
     * 0=Torque Mode, 1=Speed Mode
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_inverter_run_mode;

    /**
     * 1 = Self Sensing Assist Enabled, 0 = Self Sensing Assist Disabled
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_self_sensing_assist_enable;

    /**
     * 0 = Disabled, 1 = Enabled, 2 = Speed Check, 3 = Active, 4 = Complete, 5 = Error, 6 = Override, 7 = Timeout
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_inverter_discharge_state;

    /**
     * 0=CAN mode, 1=VSM mode
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_inverter_command_mode;

    /**
     * Rolling Counter value
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_rolling_counter;

    /**
     * 0=Inverter Disabled,
     * 1=Inverter Enabled
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_inverter_enable_state;

    /**
     * 0 = Stall, 1 = High Speed
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_burst_model_mode;

    /**
     * 0 = OFF, 1 = ON
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_key_switch_start_status;

    /**
     * 0=Lockout Disabled, 1=Lockout Enabled
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_inverter_enable_lockout;

    /**
     * 1 = Forward
     * 0 = 'Reverse' if inverter enabled  & 'Stopped' if inverter is disabled
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_direction_command;

    /**
     * 0 = BMS Not Active, 1 = BMS Active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_bms_active;

    /**
     * 0 = Not Limiting, 1 = Limiting
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_bms_torque_limiting;

    /**
     * Indicates that torque is being modified to limit the speed.
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_limit_max_speed;

    /**
     * Indicates that torque is being limited to limit the hot spot temp
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_limit_hot_spot;

    /**
     * Indicates that motor current is being limited due to low motor electrical frequency.
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_low_speed_limiting;

    /**
     * 0 = Not limiting, 1 = Limiting
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_limit_coolant_derating;

    /**
     * 0 = Not limiting, 1 = Limiting
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_limit_stall_burst_model;
};

/**
 * Signals in message M169_Internal_Voltages.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_m169_internal_voltages_t {
    /**
     * Internal reference voltage
     *
     * Range: -32768..32767 (-327.68..327.67 voltage:V)
     * Scale: 0.01
     * Offset: 0
     */
    int16_t inv_ref_voltage_1_5;

    /**
     * Internal reference voltage
     *
     * Range: -32768..32767 (-327.68..327.67 voltage:V)
     * Scale: 0.01
     * Offset: 0
     */
    int16_t inv_ref_voltage_2_5;

    /**
     * Transducer voltage
     *
     * Range: -32768..32767 (-327.68..327.67 voltage:V)
     * Scale: 0.01
     * Offset: 0
     */
    int16_t inv_ref_voltage_5_0;

    /**
     * 12V Input Voltage
     *
     * Range: -32768..32767 (-327.68..327.67 voltage:V)
     * Scale: 0.01
     * Offset: 0
     */
    int16_t inv_ref_voltage_12_0;
};

/**
 * Signals in message M168_Flux_ID_IQ_Info.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_m168_flux_id_iq_info_t {
    /**
     * The d-axis voltage feedforward
     *
     * Range: -32767..32767 (-3276.7..3276.7 voltage:V)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_vd_ff;

    /**
     * The q-axis voltage feedforward
     *
     * Range: -32767..32767 (-3276.7..3276.7 voltage:V)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_vq_ff;

    /**
     * The measured Id current
     *
     * Range: -32768..32767 (-3276.8..3276.7 current:A)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_id;

    /**
     * The measured Iq current
     *
     * Range: -32768..32767 (-3276.8..3276.7 current:A)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_iq;
};

/**
 * Signals in message M167_Voltage_Info.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_m167_voltage_info_t {
    /**
     * The actual measured value of the DC bus voltage
     *
     * Range: -32768..32767 (-3276.8..3276.7 voltage:V)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_dc_bus_voltage;

    /**
     * The calculated value of the output voltage, in peak line-neutral volts
     *
     * Range: -32768..32767 (-3276.8..3276.7 voltage:V)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_output_voltage;

    /**
     * Measured value of the voltage betwen phase A and Phase B
     *
     * Range: -32768..32767 (-3276.8..3276.7 voltage:V)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_vab_vd_voltage;

    /**
     * Measured value of the voltage between Phase B and Phase C
     *
     * Range: -32768..32767 (-3276.8..3276.7 voltage:V)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_vbc_vq_voltage;
};

/**
 * Signals in message M166_Current_Info.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_m166_current_info_t {
    /**
     * The measured value of Phase A current
     *
     * Range: -32768..32767 (-3276.8..3276.7 current:A)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_phase_a_current;

    /**
     * The measured value of Phase B current
     *
     * Range: -32768..32767 (-3276.8..3276.7 current:A)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_phase_b_current;

    /**
     * The measured value of Phase C current
     *
     * Range: -32768..32767 (-3276.8..3276.7 current:A)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_phase_c_current;

    /**
     * The Calculated DC Bus Current
     *
     * Range: -32768..32767 (-3276.8..3276.7 current:A)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_dc_bus_current;
};

/**
 * Signals in message M165_Motor_Position_Info.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_m165_motor_position_info_t {
    /**
     * The Electrical Angle of the motor as read by the encoder or resolver
     *
     * Range: 0..65535 (0..6553.5 angle:deg)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t inv_motor_angle_electrical;

    /**
     * The measured speed of the motor
     *
     * Range: -32768..32767 (-32768..32767 angular_speed:rpm)
     * Scale: 1
     * Offset: 0
     */
    int16_t inv_motor_speed;

    /**
     * The actual electrical frequency of the inverter
     *
     * Range: -32768..32767 (-3276.8..3276.7 frequency:Hz)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_electrical_output_frequency;

    /**
     * Used in calibration of resolver angle adjustment.
     *
     * Range: -32768..32767 (-3276.8..3276.7 angle:deg)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_delta_resolver_filtered;
};

/**
 * Signals in message M164_Digital_Input_Status.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_m164_digital_input_status_t {
    /**
     * Status of Digital Input #1
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_digital_input_1;

    /**
     * Status of Digital Input #2
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_digital_input_2;

    /**
     * Status of Digital Input #3
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_digital_input_3;

    /**
     * Status of Digital Input #4
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_digital_input_4;

    /**
     * Status of Digital Input #5
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_digital_input_5;

    /**
     * Status of Digital Input #6
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_digital_input_6;

    /**
     * Status of Digital Input #7
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_digital_input_7;

    /**
     * Status of Digital Input #8
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_digital_input_8;
};

/**
 * Signals in message M163_Analog_Input_Voltages.
 *
 * 
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_m163_analog_input_voltages_t {
    /**
     * Voltage on Analog Input #1
     *
     * Range: 0..1023 (0..10.23 voltage:V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t inv_analog_input_1;

    /**
     * Voltage on Analog Input #2
     *
     * Range: 0..1023 (0..10.23 voltage:V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t inv_analog_input_2;

    /**
     * Voltage on Analog Input #3
     *
     * Range: 0..1023 (0..10.23 voltage:V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t inv_analog_input_3;

    /**
     * Voltage on Analog Input #4
     *
     * Range: 0..1023 (0..10.23 voltage:V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t inv_analog_input_4;

    /**
     * Voltage on Analog Input #5
     *
     * Range: 0..1023 (0..10.23 voltage:V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t inv_analog_input_5;

    /**
     * Voltage on Analog Input #6
     *
     * Range: 0..1023 (0..10.23 voltage:V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t inv_analog_input_6;
};

/**
 * Signals in message M162_Temperature_Set_3.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_m162_temperature_set_3_t {
    /**
     * Estimated Coolant Temperature
     *
     * Range: -32768..32767 (-3276.8..3276.7 temperature:C)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_coolant_temp;

    /**
     * Estimated inverter hot spot temperature
     *
     * Range: -32768..32767 (-3276.8..3276.7 temperature:C)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_hot_spot_temp;

    /**
     * Motor Temperature Sensor
     *
     * Range: -32768..32767 (-3276.8..3276.7 temperature:C)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_motor_temp;

    /**
     * Shudder compensation value of torque
     *
     * Range: -32768..32767 (-3276.8..3276.7 torque:N.m)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_torque_shudder;
};

/**
 * Signals in message M161_Temperature_Set_2.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_m161_temperature_set_2_t {
    /**
     * Control Board Temperature
     *
     * Range: -32768..32767 (-3276.8..3276.7 temperature:C)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_control_board_temp;

    /**
     * RTD input 1 (PT1000) Temperature
     *
     * Range: -32768..32767 (-3276.8..3276.7 temperature:C)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_rtd1_temperature;

    /**
     * RTD input 2 (PT1000) Temperature
     *
     * Range: -32768..32767 (-3276.8..3276.7 temperature:C)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_rtd2_temperature;

    /**
     * Hottest temperature estimated from the stall burst thermal model feature
     *
     * Range: -32768..32767 (-3276.8..3276.7 temperature:C)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_stall_burst_model_temp;
};

/**
 * Signals in message M160_Temperature_Set_1.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_m160_temperature_set_1_t {
    /**
     * IGBT Module A Temperature
     *
     * Range: -32768..32767 (-3276.8..3276.7 temperature:C)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_module_a_temp;

    /**
     * IGBT Module B Temperature
     *
     * Range: -32768..32767 (-3276.8..3276.7 temperature:C)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_module_b_temp;

    /**
     * IGBT Module C Temperature
     *
     * Range: -32768..32767 (-3276.8..3276.7 temperature:C)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_module_c_temp;

    /**
     * Gate Driver Board Temperature
     *
     * Range: -32768..32767 (-3276.8..3276.7 temperature:C)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_gate_driver_board_temp;
};

/**
 * Signals in message M174_Firmware_Info.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_m174_firmware_info_t {
    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t inv_project_code_eep_ver;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t inv_sw_version;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t inv_date_code_mmdd;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t inv_date_code_yyyy;
};

/**
 * Signals in message M175_Diag_Data_Message.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_m175_diag_data_message_t {
    /**
     * Range: 0..160 (0..160 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_diag_record;

    /**
     * Range: 0..5 (0..5 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_diag_segment;

    /**
     * Range: 0..3600 (0..360 angle:deg)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_diag_gamma_resolver;

    /**
     * Range: -5..5 (-5..5 voltage:V)
     * Scale: 1
     * Offset: 0
     */
    int16_t inv_diag_cos_used;

    /**
     * Range: -20000..20000 (-2000..2000 current:A)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_diag_ic;

    /**
     * Range: -20000..20000 (-2000..2000 current:A)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_diag_id_cmd;

    /**
     * Range: -10000..10000 (-1000..1000 voltage:V)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_diag_vq_cmd;

    /**
     * Range: 0..24 (0..24 frequency:kHz)
     * Scale: 1
     * Offset: 0
     */
    uint16_t inv_diag_pwm_freq;

    /**
     * Range: 0..3600 (0..360 angle:deg)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_diag_gamma_observer;

    /**
     * Range: -20000..20000 (-2000..2000 current:A)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_diag_ia;

    /**
     * Range: 0..10000 (0..1000 voltage:V)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_diag_vdc;

    /**
     * Range: 0..20000 (0..2 -)
     * Scale: 0.0001
     * Offset: 0
     */
    int16_t inv_diag_mod_index;

    /**
     * Range: -10000..10000 (-1000..1000 voltage:V)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_diag_vd_cmd;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t inv_diag_run_faults_lo;

    /**
     * Range: -5..5 (-5..5 voltage:V)
     * Scale: 1
     * Offset: 0
     */
    int16_t inv_diag_sin_used;

    /**
     * Range: -20000..20000 (-2000..2000 current:A)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_diag_ib;

    /**
     * Range: -20000..20000 (-2000..2000 current:A)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_diag_iq_cmd;

    /**
     * Range: -20000..20000 (-2000..2000 current:A)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_diag_fw_output;

    /**
     * Range: -10000..10000 (-1000..1000 voltage:V)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_diag_vqs_cmd;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t inv_diag_run_faults_hi;
};

/**
 * Signals in message BMS_Current_Limit.
 *
 * Sent by BMS
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_bms_current_limit_t {
    /**
     * Maximum discharge current from BMS
     *
     * Range: 0..1000 (0..1000 current:A)
     * Scale: 1
     * Offset: 0
     */
    uint16_t bms_max_discharge_current;

    /**
     * Maximum charge current from BMS
     *
     * Range: 0..1000 (0..1000 current:A)
     * Scale: 1
     * Offset: 0
     */
    uint16_t bms_max_charge_current;
};

/**
 * Signals in message M176_Fast_Info.
 *
 * To enable fast message set CAN ACTIVE MSGS HI WORD to 0xFFFE.  Setting to default value of 0xFFFF will disable the fast message.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_m176_fast_info_t {
    /**
     * The commanded torque
     *
     * Range: -32768..327677 (-3276.8..32767.7 torque:N.m)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_fast_torque_command;

    /**
     * The estimated torque
     *
     * Range: -32768..32767 (-3276.8..3276.7 torque:N.m)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_fast_torque_feedback;

    /**
     * Motor speed
     *
     * Range: -32768..32767 (-32768..32767 angular_speed:rpm)
     * Scale: 1
     * Offset: 0
     */
    int16_t inv_fast_motor_speed;

    /**
     * DC Bus Voltage
     *
     * Range: -32768..32767 (-3276.8..3276.7 voltage:V)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inv_fast_dc_bus_voltage;
};

/**
 * Signals in message M177_Torque_Capability.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_m177_torque_capability_t {
    /**
     * The torque capability of the inverter given the current operating point.
     *
     * Range: 0..65536 (0..6553.6 torque:N.m)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t inv_torque_capability;
};

/**
 * Signals in message LF_IRTS_Brake_5.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_lf_irts_brake_5_t {
    /**
     * Range: 0..65535 (-100..6453.5 C)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t lf_sensor_temp;
};

/**
 * Signals in message RF_IRTS_Brake_5.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_rf_irts_brake_5_t {
    /**
     * Range: 0..65535 (-100..6453.5 C)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rf_sensor_temp;
};

/**
 * Signals in message RR_IRTS_Brake_5.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_rr_irts_brake_5_t {
    /**
     * Range: 0..65535 (-100..6453.5 C)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rr_sensor_temp;
};

/**
 * Signals in message LR_IRTS_Brake_5.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_lr_irts_brake_5_t {
    /**
     * Range: 0..65535 (-100..6453.5 C)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t lr_sensor_temp;
};

/**
 * Signals in message LF_IRTS_Brake_1.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_lf_irts_brake_1_t {
    /**
     * Range: 0..65535 (-100..6453.5 C)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t lf_rotor_temp_01;

    /**
     * Range: 0..65535 (-100..6453.5 C)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t lf_rotor_temp_02;

    /**
     * Range: 0..65535 (-100..6453.5 C)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t lf_rotor_temp_03;

    /**
     * Range: 0..65535 (-100..6453.5 C)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t lf_rotor_temp_04;
};

/**
 * Signals in message LF_IRTS_Brake_2.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_lf_irts_brake_2_t {
    /**
     * Range: 0..65535 (-100..6453.5 C)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t lf_rotor_temp_05;

    /**
     * Range: 0..65535 (-100..6453.5 C)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t lf_rotor_temp_06;

    /**
     * Range: 0..65535 (-100..6453.5 C)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t lf_rotor_temp_07;

    /**
     * Range: 0..65535 (-100..6453.5 C)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t lf_rotor_temp_08;
};

/**
 * Signals in message LF_IRTS_Brake_3.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_lf_irts_brake_3_t {
    /**
     * Range: 0..65535 (-100..6453.5 C)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t lf_rotor_temp_09;

    /**
     * Range: 0..65535 (-100..6453.5 C)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t lf_rotor_temp_10;

    /**
     * Range: 0..65535 (-100..6453.5 C)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t lf_rotor_temp_11;

    /**
     * Range: 0..65535 (-100..6453.5 C)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t lf_rotor_temp_12;
};

/**
 * Signals in message LF_IRTS_Brake_4.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_lf_irts_brake_4_t {
    /**
     * Range: 0..65535 (-100..6453.5 C)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t lf_rotor_temp_13;

    /**
     * Range: 0..65535 (-100..6453.5 C)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t lf_rotor_temp_14;

    /**
     * Range: 0..65535 (-100..6453.5 C)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t lf_rotor_temp_15;

    /**
     * Range: 0..65535 (-100..6453.5 C)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t lf_rotor_temp_16;
};

/**
 * Signals in message RF_IRTS_Brake_1.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_rf_irts_brake_1_t {
    /**
     * Range: 0..65535 (-100..6453.5 C)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rf_rotor_temp_01;

    /**
     * Range: 0..65535 (-100..6453.5 C)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rf_rotor_temp_02;

    /**
     * Range: 0..65535 (-100..6453.5 C)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rf_rotor_temp_03;

    /**
     * Range: 0..65535 (-100..6453.5 C)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rf_rotor_temp_04;
};

/**
 * Signals in message RF_IRTS_Brake_2.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_rf_irts_brake_2_t {
    /**
     * Range: 0..65535 (-100..6453.5 C)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rf_rotor_temp_05;

    /**
     * Range: 0..65535 (-100..6453.5 C)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rf_rotor_temp_06;

    /**
     * Range: 0..65535 (-100..6453.5 C)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rf_rotor_temp_07;

    /**
     * Range: 0..65535 (-100..6453.5 C)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rf_rotor_temp_08;
};

/**
 * Signals in message RF_IRTS_Brake_3.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_rf_irts_brake_3_t {
    /**
     * Range: 0..65535 (-100..6453.5 C)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rf_rotor_temp_09;

    /**
     * Range: 0..65535 (-100..6453.5 C)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rf_rotor_temp_10;

    /**
     * Range: 0..65535 (-100..6453.5 C)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rf_rotor_temp_11;

    /**
     * Range: 0..65535 (-100..6453.5 C)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rf_rotor_temp_12;
};

/**
 * Signals in message RF_IRTS_Brake_4.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_rf_irts_brake_4_t {
    /**
     * Range: 0..65535 (-100..6453.5 C)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rf_rotor_temp_13;

    /**
     * Range: 0..65535 (-100..6453.5 C)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rf_rotor_temp_14;

    /**
     * Range: 0..65535 (-100..6453.5 C)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rf_rotor_temp_15;

    /**
     * Range: 0..65535 (-100..6453.5 C)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rf_rotor_temp_16;
};

/**
 * Signals in message LR_IRTS_Brake_1.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_lr_irts_brake_1_t {
    /**
     * Range: 0..65535 (-100..6453.5 C)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t lr_rotor_temp_01;

    /**
     * Range: 0..65535 (-100..6453.5 C)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t lr_rotor_temp_02;

    /**
     * Range: 0..65535 (-100..6453.5 C)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t lr_rotor_temp_03;

    /**
     * Range: 0..65535 (-100..6453.5 C)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t lr_rotor_temp_04;
};

/**
 * Signals in message LR_IRTS_Brake_2.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_lr_irts_brake_2_t {
    /**
     * Range: 0..65535 (-100..6453.5 C)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t lr_rotor_temp_05;

    /**
     * Range: 0..65535 (-100..6453.5 C)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t lr_rotor_temp_06;

    /**
     * Range: 0..65535 (-100..6453.5 C)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t lr_rotor_temp_07;

    /**
     * Range: 0..65535 (-100..6453.5 C)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t lr_rotor_temp_08;
};

/**
 * Signals in message LR_IRTS_Brake_3.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_lr_irts_brake_3_t {
    /**
     * Range: 0..65535 (-100..6453.5 C)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t lr_rotor_temp_09;

    /**
     * Range: 0..65535 (-100..6453.5 C)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t lr_rotor_temp_10;

    /**
     * Range: 0..65535 (-100..6453.5 C)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t lr_rotor_temp_11;

    /**
     * Range: 0..65535 (-100..6453.5 C)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t lr_rotor_temp_12;
};

/**
 * Signals in message LR_IRTS_Brake_4.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_lr_irts_brake_4_t {
    /**
     * Range: 0..65535 (-100..6453.5 C)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t lr_rotor_temp_13;

    /**
     * Range: 0..65535 (-100..6453.5 C)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t lr_rotor_temp_14;

    /**
     * Range: 0..65535 (-100..6453.5 C)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t lr_rotor_temp_15;

    /**
     * Range: 0..65535 (-100..6453.5 C)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t lr_rotor_temp_16;
};

/**
 * Signals in message RR_IRTS_Brake_1.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_rr_irts_brake_1_t {
    /**
     * Range: 0..65535 (-100..6453.5 C)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rr_rotor_temp_01;

    /**
     * Range: 0..65535 (-100..6453.5 C)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rr_rotor_temp_02;

    /**
     * Range: 0..65535 (-100..6453.5 C)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rr_rotor_temp_03;

    /**
     * Range: 0..65535 (-100..6453.5 C)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rr_rotor_temp_04;
};

/**
 * Signals in message RR_IRTS_Brake_2.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_rr_irts_brake_2_t {
    /**
     * Range: 0..65535 (-100..6453.5 C)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rr_rotor_temp_05;

    /**
     * Range: 0..65535 (-100..6453.5 C)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rr_rotor_temp_06;

    /**
     * Range: 0..65535 (-100..6453.5 C)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rr_rotor_temp_07;

    /**
     * Range: 0..65535 (-100..6453.5 C)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rr_rotor_temp_08;
};

/**
 * Signals in message RR_IRTS_Brake_3.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_rr_irts_brake_3_t {
    /**
     * Range: 0..65535 (-100..6453.5 C)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rr_rotor_temp_09;

    /**
     * Range: 0..65535 (-100..6453.5 C)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rr_rotor_temp_10;

    /**
     * Range: 0..65535 (-100..6453.5 C)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rr_rotor_temp_11;

    /**
     * Range: 0..65535 (-100..6453.5 C)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rr_rotor_temp_12;
};

/**
 * Signals in message RR_IRTS_Brake_4.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_rr_irts_brake_4_t {
    /**
     * Range: 0..65535 (-100..6453.5 C)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rr_rotor_temp_13;

    /**
     * Range: 0..65535 (-100..6453.5 C)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rr_rotor_temp_14;

    /**
     * Range: 0..65535 (-100..6453.5 C)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rr_rotor_temp_15;

    /**
     * Range: 0..65535 (-100..6453.5 C)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t rr_rotor_temp_16;
};

/**
 * Signals in message Status.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_status_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Faults.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_faults_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Dashboard.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_dashboard_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Temp1.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_temp1_t {
    /**
     * Range: 0..120 (0..120 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp1;

    /**
     * Range: 0..120 (0..120 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp2;

    /**
     * Range: 0..120 (0..120 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp3;

    /**
     * Range: 0..120 (0..120 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp4;

    /**
     * Range: 0..120 (0..120 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp5;

    /**
     * Range: 0..120 (0..120 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp6;

    /**
     * Range: 0..120 (0..120 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp7;

    /**
     * Range: 0..120 (0..120 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp8;
};

/**
 * Signals in message Temp2.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_temp2_t {
    /**
     * Range: 0..120 (0..120 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp9;

    /**
     * Range: 0..120 (0..120 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp10;

    /**
     * Range: 0..120 (0..120 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp11;

    /**
     * Range: 0..120 (0..120 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp12;

    /**
     * Range: 0..120 (0..120 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp13;

    /**
     * Range: 0..120 (0..120 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp14;

    /**
     * Range: 0..120 (0..120 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp15;

    /**
     * Range: 0..120 (0..120 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp16;
};

/**
 * Signals in message Temp3.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_temp3_t {
    /**
     * Range: 0..120 (0..120 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp17;

    /**
     * Range: 0..120 (0..120 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp18;

    /**
     * Range: 0..120 (0..120 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp19;

    /**
     * Range: 0..120 (0..120 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp20;

    /**
     * Range: 0..120 (0..120 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp21;

    /**
     * Range: 0..120 (0..120 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp22;

    /**
     * Range: 0..120 (0..120 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp23;

    /**
     * Range: 0..120 (0..120 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp24;
};

/**
 * Signals in message Temp4.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_temp4_t {
    /**
     * Range: 0..120 (0..120 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp25;

    /**
     * Range: 0..120 (0..120 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp26;

    /**
     * Range: 0..120 (0..120 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp27;

    /**
     * Range: 0..120 (0..120 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp28;

    /**
     * Range: 0..120 (0..120 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp29;

    /**
     * Range: 0..120 (0..120 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp30;

    /**
     * Range: 0..120 (0..120 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp31;

    /**
     * Range: 0..120 (0..120 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp32;
};

/**
 * Signals in message Temp5.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_temp5_t {
    /**
     * Range: 0..120 (0..120 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp33;

    /**
     * Range: 0..120 (0..120 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp34;

    /**
     * Range: 0..120 (0..120 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp35;

    /**
     * Range: 0..120 (0..120 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp36;

    /**
     * Range: 0..120 (0..120 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp37;

    /**
     * Range: 0..120 (0..120 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp38;

    /**
     * Range: 0..120 (0..120 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp39;

    /**
     * Range: 0..120 (0..120 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp40;
};

/**
 * Signals in message Temp6.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_temp6_t {
    /**
     * Range: 0..120 (0..120 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp41;

    /**
     * Range: 0..120 (0..120 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp42;

    /**
     * Range: 0..120 (0..120 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp43;

    /**
     * Range: 0..120 (0..120 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp44;

    /**
     * Range: 0..120 (0..120 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp45;

    /**
     * Range: 0..120 (0..120 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp46;

    /**
     * Range: 0..120 (0..120 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp47;

    /**
     * Range: 0..120 (0..120 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp48;
};

/**
 * Signals in message Voltage1.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_voltage1_t {
    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell1;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell2;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell3;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell4;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell5;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell6;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell7;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell8;
};

/**
 * Signals in message Voltage2.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_voltage2_t {
    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell9;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell10;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell11;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell12;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell13;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell14;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell15;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell16;
};

/**
 * Signals in message Voltage3.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_voltage3_t {
    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell17;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell18;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell19;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell20;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell21;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell22;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell23;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell24;
};

/**
 * Signals in message Voltage4.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_voltage4_t {
    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell25;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell26;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell27;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell28;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell29;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell30;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell31;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell32;
};

/**
 * Signals in message Voltage5.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_voltage5_t {
    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell33;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell34;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell35;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell36;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell37;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell38;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell39;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell40;
};

/**
 * Signals in message Voltage6.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_voltage6_t {
    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell41;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell42;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell43;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell44;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell45;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell46;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell47;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell48;
};

/**
 * Signals in message Voltage7.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_voltage7_t {
    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell49;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell50;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell51;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell52;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell53;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell54;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell55;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell56;
};

/**
 * Signals in message Voltage8.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_voltage8_t {
    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell57;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell58;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell59;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell60;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell61;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell62;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell63;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell64;
};

/**
 * Signals in message Voltage9.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_voltage9_t {
    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell65;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell66;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell67;

    /**
     * Range: -9750..-9600 (2.5..4 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell68;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell69;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell70;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell71;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell72;
};

/**
 * Signals in message Voltage10.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_voltage10_t {
    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell73;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell74;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell75;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell76;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell77;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell78;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell79;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell80;
};

/**
 * Signals in message Voltage11.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_voltage11_t {
    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell81;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell82;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell83;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell84;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell85;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell86;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell87;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell88;
};

/**
 * Signals in message Voltage12.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_voltage12_t {
    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell89;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell90;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell91;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell92;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell93;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell94;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell95;

    /**
     * Range: -9750..-9570 (2.5..4.3 V)
     * Scale: 0.01
     * Offset: 100
     */
    uint8_t cell96;
};

/**
 * Signals in message OrionMSG1.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_orion_msg1_t {
    /**
     * Range: 0..65535 (0..6553.5 -)
     * Scale: 0.1
     * Offset: 0
     */
    uint32_t pack_inst_voltage;

    /**
     * Range: 0..255 (0..127.5 -)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t pack_soc;
};

/**
 * Signals in message OrionMSG2.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_orion_msg2_t {
    /**
     * Range: -128..127 (-128..127 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t pack_high_temp;

    /**
     * Range: -128..127 (-128..127 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t pack_low_temp;
};

/**
 * Signals in message OrionMSG3.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_orion_msg3_t {
    /**
     * Range: 0..65535 (0..6.5535 -)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t low_cell_voltage;

    /**
     * Range: 0..65535 (0..6.5535 -)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t high_cell_voltage;
};

/**
 * Signals in message M100_VCU_States1.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_m100_vcu_states1_t {
    /**
     * Range: 0..1023 (0..1023 s)
     * Scale: 1
     * Offset: 0
     */
    uint16_t run_time;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t drive_mode_state;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t run_mode_state;

    /**
     * Range: 0..63 (0..63 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t op_state;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t start_command_state;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t stop_command_state;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t start_safe;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mc1_enable;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mc2_enable;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mc3_enable;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mc4_enable;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mc_power;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mc1_discharge_cmd;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mc2_discharge_cmd;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mc3_discharge_cmd;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mc4_discharge_cmd;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hvil_main;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hvil_charge;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pump_cont_x_check;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mc1_cont_enable;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mc2_cont_enable;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mc3_cont_enable;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mc4_cont_enable;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mc1_dc_voltage_safe_state;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mc2_dc_voltage_safe_state;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mc3_dc_voltage_safe_state;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mc4_dc_voltage_safe_state;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mc1_hv_detect;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mc1_neg_fb;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mc1_pos_fb;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mc1_pre_chg_fb;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mc2_hv_detect;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mc2_neg_fb;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mc2_pos_fb;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mc2_pre_chg_fb;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mc3_hv_detect;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mc3_neg_fb;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mc3_pos_fb;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mc3_pre_chg_fb;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mc4_hv_detect;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mc4_neg_fb;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mc4_pos_fb;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mc4_pre_chg_fb;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t performance_level;
};

/**
 * Signals in message M102_VCU_States2.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_m102_vcu_states2_t {
    /**
     * Range: 0..255 (0..25.5 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t vcu_12_v_input;

    /**
     * Range: 0..63 (0..6.3 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t vcu_5_v_output;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mc1_pos_cmd;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mc1_pre_chg_cmd;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mc1_pre_chg_complete;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mc2_pos_cmd;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mc2_pre_chg_cmd;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mc2_pre_chg_complete;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mc3_pos_cmd;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mc3_pre_chg_cmd;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mc3_pre_chg_complete;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mc4_pos_cmd;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mc4_pre_chg_cmd;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mc4_pre_chg_complete;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t creep_mode;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t idle_mode;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t burnout_mode;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t launch_mode;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_control_mode;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t speed_mode_allowed;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cool_fan1_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cool_fan2_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t oil_pump1_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cool_pump1_cntrl;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cool_pump2_cntrl;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cool_pump_wake;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t trans_brake_cntrl;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t line_lock_cntrl;

    /**
     * Range: 0..255 (0..6375 rpm)
     * Scale: 25
     * Offset: 0
     */
    uint8_t cool_pump_spd_target;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t shift_sol1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t shift_sol2;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t shift_sol_cntrl;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t imd_state;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inertia_switch;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t line_lock_switch;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t trans_brake_switch;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t brake_lamps_cntrl;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t head_lamps_cntrl;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hv_safety_light_cntrl;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t park_lamps_cntrl;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t reverse_lamps_cntrl;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_light_cntrl;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_power_cntrl;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t charge_contactor_cntrl;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t contactors_enabled;
};

/**
 * Signals in message M104_VCU_States3.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_m104_vcu_states3_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lim_mult_batt_dcl_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lim_mult_batt_soc_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lim_mult_cell_volt_max_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lim_mult_cell_volt_min_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lim_mult_drive_shaft_spd_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lim_mult_launch_time_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lim_mult_mc1_curr_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lim_mult_mc1_temp_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lim_mult_mc2_curr_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lim_mult_mc2_temp_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lim_mult_mc3_curr_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lim_mult_mc3_temp_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lim_mult_mc4_curr_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lim_mult_mc4_temp_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lim_mult_motor1_spd_lo_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lim_mult_motor1_temp_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lim_mult_motor2_spd_lo_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lim_mult_motor2_temp_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lim_mult_motor3_spd_lo_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lim_mult_motor3_temp_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lim_mult_motor4_spd_lo_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lim_mult_motor4_temp_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lim_mult_over_rev_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lim_mult_pack_current_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lim_mult_pack_temp_hi_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lim_mult_pack_temp_lo_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lim_mult_pack_voltage_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lim_mult_shift1_tq_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lim_mult_shift2_tq_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lim_mult_shift3_tq_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lim_mult_shift4_tq_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lim_mult_shift5_tq_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lim_mult_veh_spd_hi_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lim_mult_veh_spd_lo_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lim_mult_mc1_curr_ramp_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lim_mult_mc2_curr_ramp_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lim_mult_mc3_curr_ramp_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lim_mult_mc4_curr_ramp_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t launch_timer_running;

    /**
     * Range: 0..255 (0..25.5 s)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t launch_ramp_time;

    /**
     * Range: 0..65535 (0..65535 s)
     * Scale: 1
     * Offset: 0
     */
    uint16_t run_time_counter;
};

/**
 * Signals in message M106_DriverInputs1.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_m106_driver_inputs1_t {
    /**
     * Range: 0..255 (0..100.0 -)
     * Scale: 0.392157
     * Offset: 0
     */
    uint8_t accel_pedal;

    /**
     * Range: 0..255 (0..100.0 -)
     * Scale: 0.392157
     * Offset: 0
     */
    uint8_t accel_pedal1;

    /**
     * Range: 0..255 (0..100.0 -)
     * Scale: 0.392157
     * Offset: 0
     */
    uint8_t accel_pedal2;

    /**
     * Range: 0..255 (0..100.0 -)
     * Scale: 0.392157
     * Offset: 0
     */
    uint8_t accel_pedal_x_check_diff;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t accel_pedal_valid;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t accel_pedal1_valid;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t accel_pedal2_valid;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t brake_switch;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t brake_switch1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t brake_switch2;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ignition_switch;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t start_switch;

    /**
     * Range: 0..255 (0..100.0 -)
     * Scale: 0.392157
     * Offset: 0
     */
    uint8_t manual_regen;

    /**
     * Range: 0..255 (0..100.0 -)
     * Scale: 0.392157
     * Offset: 0
     */
    uint8_t manual_regen1;

    /**
     * Range: 0..255 (0..100.0 -)
     * Scale: 0.392157
     * Offset: 0
     */
    uint8_t manual_regen2;
};

/**
 * Signals in message M108_DriverInputs2.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_m108_driver_inputs2_t {
    /**
     * Range: 0..255 (0..100.0 -)
     * Scale: 0.392157
     * Offset: 0
     */
    uint8_t man_regen_x_check_diff;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t manual_regen1_valid;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t manual_regen2_valid;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t park_switch;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t neutral_switch;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t drive_switch;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t reverse_switch;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t head_lamp_switch;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t park_lamp_switch;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t enable_switch;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cooling_fan_ord_switch;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cooling_pump_ord_switch;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t heater_switch;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_switch;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_light_switch;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t wake_switch;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t logging_switch;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cc_cancel;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cc_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cc_rsm_acc;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cc_set_cst;
};

/**
 * Signals in message M112_VehicleInputs1.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_m112_vehicle_inputs1_t {
    /**
     * Range: 0..65535 (0..6553.5 psi)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t brake_pressure;

    /**
     * Range: 0..65535 (0..6553.5 psi)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t transmission_pressure;

    /**
     * Range: 0..65535 (0..6553.5 psi)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t wheel_bar_press1;

    /**
     * Range: 0..65535 (0..6553.5 psi)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t wheel_bar_press2;
};

/**
 * Signals in message M114_VehicleInputs2.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_m114_vehicle_inputs2_t {
    /**
     * Range: 0..255 (-50..205 C)
     * Scale: 1
     * Offset: -50
     */
    uint8_t transmission_temp;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t coolant_temp1;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t coolant_temp2;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t ambient_air_temp;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t heater_inlet_temp;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t heater_outlet_temp;

    /**
     * Range: 0..65535 (0..6553.5 psi)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t ac_pressure;
};

/**
 * Signals in message M116_VehicleInputs3.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_m116_vehicle_inputs3_t {
    /**
     * Range: 0..255 (-14.696..22.2892 psi)
     * Scale: 0.14504
     * Offset: -14.696
     */
    uint8_t brake_vac_pressure;

    /**
     * Range: 0..255 (0..255 mph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vehicle_speed;

    /**
     * Range: 0..65535 (0..65535 rpm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t drive_shaft_speed;

    /**
     * Range: 0..255 (0..255 mph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t drive_wheel_speed;

    /**
     * Range: 0..255 (0..255 mph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ground_wheel_speed;

    /**
     * Range: 0..255 (0..255 mph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tc_slip_measured;
};

/**
 * Signals in message M118_VehicleInputs4.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_m118_vehicle_inputs4_t {
    /**
     * Range: 0..4294967295 (0..42949672.95 mi)
     * Scale: 0.01
     * Offset: 0
     */
    uint32_t vehicle_odometer;
};

/**
 * Signals in message M120_MotorTorqueData1.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_m120_motor_torque_data1_t {
    /**
     * Range: -2048..2047 (-1024..1023.5 N.m)
     * Scale: 0.5
     * Offset: 0
     */
    int16_t motor1_torque_request;

    /**
     * Range: 0..4095 (0..2047.5 N.m)
     * Scale: 0.5
     * Offset: 0
     */
    uint16_t motor1_tq_lim_hi;

    /**
     * Range: -2048..2047 (-1024..1023.5 N.m)
     * Scale: 0.5
     * Offset: 0
     */
    int16_t motor1_tq_lim_lo;

    /**
     * Range: 0..4095 (0..2047.5 N.m)
     * Scale: 0.5
     * Offset: 0
     */
    uint16_t motor1_tq_table;

    /**
     * Range: 0..255 (0..1.275 frac)
     * Scale: 0.005
     * Offset: 0
     */
    uint8_t motor1_tq_lim_mult_hi;

    /**
     * Range: 0..255 (0..1.275 frac)
     * Scale: 0.005
     * Offset: 0
     */
    uint8_t motor1_tq_lim_mult_lo;
};

/**
 * Signals in message M122_MotorTorqueData2.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_m122_motor_torque_data2_t {
    /**
     * Range: 0..4095 (0..409.5 N.m)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t motor1_creep_torque;

    /**
     * Range: 0..4095 (0..409.5 N.m)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t motor1_reverse_torque;

    /**
     * Range: -2048..2047 (-2.048..2.047 frac)
     * Scale: 0.001
     * Offset: 0
     */
    int16_t motor1_torque_trim_table;

    /**
     * Range: 0..4095 (0..2047.5 N.m)
     * Scale: 0.5
     * Offset: 0
     */
    uint16_t motor_tq_spd_feed_forward;

    /**
     * Range: -128..127 (-128..127 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t pedal_tq_mult_tbl1;

    /**
     * Range: -128..127 (-128..127 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t pedal_tq_mult_tbl2;
};

/**
 * Signals in message M124_MotorTorqueData3.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_m124_motor_torque_data3_t {
    /**
     * Range: -2048..2047 (-1024..1023.5 N.m)
     * Scale: 0.5
     * Offset: 0
     */
    int16_t motor2_torque_request;

    /**
     * Range: 0..4095 (0..2047.5 N.m)
     * Scale: 0.5
     * Offset: 0
     */
    uint16_t motor2_tq_lim_hi;

    /**
     * Range: -2048..2047 (-1024..1023.5 N.m)
     * Scale: 0.5
     * Offset: 0
     */
    int16_t motor2_tq_lim_lo;

    /**
     * Range: 0..4095 (0..2047.5 N.m)
     * Scale: 0.5
     * Offset: 0
     */
    uint16_t motor2_tq_table;

    /**
     * Range: 0..255 (0..1.275 frac)
     * Scale: 0.005
     * Offset: 0
     */
    uint8_t motor2_tq_lim_mult_hi;

    /**
     * Range: 0..255 (0..1.275 frac)
     * Scale: 0.005
     * Offset: 0
     */
    uint8_t motor2_tq_lim_mult_lo;
};

/**
 * Signals in message M126_MotorTorqueData4.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_m126_motor_torque_data4_t {
    /**
     * Range: 0..4095 (0..409.5 N.m)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t motor2_creep_torque;

    /**
     * Range: 0..4095 (0..409.5 N.m)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t motor2_reverse_torque;

    /**
     * Range: -2048..2047 (-2.048..2.047 frac)
     * Scale: 0.001
     * Offset: 0
     */
    int16_t motor2_torque_trim_table;

    /**
     * Range: 0..4095 (0..2047.5 N.m)
     * Scale: 0.5
     * Offset: 0
     */
    uint16_t regen_brake_torque;

    /**
     * Range: -128..127 (-128..127 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t pedal_tq_mult_tbl3;

    /**
     * Range: -128..127 (-128..127 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t pedal_tq_mult_tbl4;
};

/**
 * Signals in message M128_MotorTorqueData5.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_m128_motor_torque_data5_t {
    /**
     * Range: -2048..2047 (-1024..1023.5 N.m)
     * Scale: 0.5
     * Offset: 0
     */
    int16_t motor3_torque_request;

    /**
     * Range: 0..4095 (0..2047.5 N.m)
     * Scale: 0.5
     * Offset: 0
     */
    uint16_t motor3_tq_lim_hi;

    /**
     * Range: -2048..2047 (-1024..1023.5 N.m)
     * Scale: 0.5
     * Offset: 0
     */
    int16_t motor3_tq_lim_lo;

    /**
     * Range: 0..4095 (0..2047.5 N.m)
     * Scale: 0.5
     * Offset: 0
     */
    uint16_t motor3_tq_table;

    /**
     * Range: 0..255 (0..1.275 frac)
     * Scale: 0.005
     * Offset: 0
     */
    uint8_t motor3_tq_lim_mult_hi;

    /**
     * Range: 0..255 (0..1.275 frac)
     * Scale: 0.005
     * Offset: 0
     */
    uint8_t motor3_tq_lim_mult_lo;
};

/**
 * Signals in message M130_MotorTorqueData6.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_m130_motor_torque_data6_t {
    /**
     * Range: 0..4095 (0..409.5 N.m)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t motor3_creep_torque;

    /**
     * Range: 0..4095 (0..409.5 N.m)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t motor3_reverse_torque;

    /**
     * Range: -2048..2047 (-2.048..2.047 frac)
     * Scale: 0.001
     * Offset: 0
     */
    int16_t motor3_torque_trim_table;

    /**
     * Range: -2048..2047 (-1024..1023.5 N.m)
     * Scale: 0.5
     * Offset: 0
     */
    int16_t motor4_torque_request;
};

/**
 * Signals in message M132_MotorTorqueData7.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_m132_motor_torque_data7_t {
    /**
     * Range: 0..4095 (0..2047.5 N.m)
     * Scale: 0.5
     * Offset: 0
     */
    uint16_t motor4_tq_lim_hi;

    /**
     * Range: -2048..2047 (-1024..1023.5 N.m)
     * Scale: 0.5
     * Offset: 0
     */
    int16_t motor4_tq_lim_lo;

    /**
     * Range: 0..4095 (0..2047.5 N.m)
     * Scale: 0.5
     * Offset: 0
     */
    uint16_t motor4_tq_table;

    /**
     * Range: 0..4095 (0..409.5 N.m)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t motor4_creep_torque;

    /**
     * Range: 0..255 (0..1.275 frac)
     * Scale: 0.005
     * Offset: 0
     */
    uint8_t motor4_tq_lim_mult_hi;

    /**
     * Range: 0..255 (0..1.275 frac)
     * Scale: 0.005
     * Offset: 0
     */
    uint8_t motor4_tq_lim_mult_lo;
};

/**
 * Signals in message M134_MotorTorqueData8.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_m134_motor_torque_data8_t {
    /**
     * Range: 0..4095 (0..409.5 N.m)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t motor4_reverse_torque;

    /**
     * Range: -2048..2047 (-2.048..2.047 frac)
     * Scale: 0.001
     * Offset: 0
     */
    int16_t motor4_torque_trim_table;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t launch_torque_multiplier;

    /**
     * Range: 0..255 (0..25.5 s)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t launch_torque_time;
};

/**
 * Signals in message M136_MotorSpeedData1.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_m136_motor_speed_data1_t {
    /**
     * Range: 0..65535 (0..16383.75 rpm)
     * Scale: 0.25
     * Offset: 0
     */
    uint16_t idle_target_speed;

    /**
     * Range: 0..65535 (0..16383.75 rpm)
     * Scale: 0.25
     * Offset: 0
     */
    uint16_t start_ramp_target_speed;

    /**
     * Range: 0..65535 (0..16383.75 rpm)
     * Scale: 0.25
     * Offset: 0
     */
    uint16_t free_rev_target_speed;

    /**
     * Range: 0..65535 (0..16383.75 rpm)
     * Scale: 0.25
     * Offset: 0
     */
    uint16_t burnout_target_speed;
};

/**
 * Signals in message M138_MotorSpeedData2.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_m138_motor_speed_data2_t {
    /**
     * Range: 0..65535 (0..16383.75 rpm)
     * Scale: 0.25
     * Offset: 0
     */
    uint16_t launch_target_speed;

    /**
     * Range: 0..65535 (0..16383.75 rpm)
     * Scale: 0.25
     * Offset: 0
     */
    uint16_t motor_target_speed;

    /**
     * Range: -2048..2047 (-1024..1023.5 N.m)
     * Scale: 0.5
     * Offset: 0
     */
    int16_t speed_control_pid;

    /**
     * Range: -2048..2047 (-1024..1023.5 N.m)
     * Scale: 0.5
     * Offset: 0
     */
    int16_t speed_control_pid_error;
};

/**
 * Signals in message M140_MotorSpeedData3.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_m140_motor_speed_data3_t {
    /**
     * Range: -2048..2047 (-1024..1023.5 N.m)
     * Scale: 0.5
     * Offset: 0
     */
    int16_t speed_control_pid_p_term;

    /**
     * Range: -2048..2047 (-1024..1023.5 N.m)
     * Scale: 0.5
     * Offset: 0
     */
    int16_t speed_control_pid_i_term;

    /**
     * Range: -2048..2047 (-1024..1023.5 N.m)
     * Scale: 0.5
     * Offset: 0
     */
    int16_t speed_control_pid_d_term;
};

/**
 * Signals in message M144_VCU_FaultStates1.
 *
 * All signal values are as on the CAN bus.
 */
struct master_dbc_m144_vcu_fault_states1_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fault_acc_led;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fault_acc_power;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fault_acc_pedal1_input_hi;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fault_acc_pedal1_input_lo;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fault_acc_pedal1_spike;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fault_acc_pedal2_input_hi;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fault_acc_pedal2_input_lo;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fault_acc_pedal2_spike;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fault_accel_pedal_x_check;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fault_brake_lamps;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fault_brk_press_input_hi;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fault_brk_press_input_lo;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fault_cooling_pump1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fault_cooling_pump2;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fault_cool_temp1_input_hi;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fault_cool_temp1_input_lo;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fault_cool_temp2_input_hi;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fault_cool_temp2_input_lo;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fault_dc_voltage_safe_light;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fault_head_lamps;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fault_idle_target;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fault_ign_chg_plug_x_check;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fault_mc1_contactor;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fault_mc1_supply_voltage_low;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fault_mc2_contactor;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fault_mc2_supply_voltage_low;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fault_mc3_contactor;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fault_mc3_supply_voltage_low;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fault_mc4_contactor;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fault_mc4_supply_voltage_low;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fault_mc5_supply_voltage_low;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fault_line_lock_sol;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fault_manual_regen1_input_hi;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fault_manual_regen1_input_lo;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fault_manual_regen1_spike;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fault_manual_regen2_input_hi;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fault_manual_regen2_input_lo;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fault_manual_regen2_spike;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fault_park_lamps;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fault_regen_lever_x_chk;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fault_reverse_lamps;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fault_shift_sol;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fault_trans_brk_sol;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fault_trans_press_input_hi;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fault_trans_press_input_lo;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fault_trans_temp_input_hi;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fault_trans_temp_input_lo;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fault_wheel_bar_press1_input_hi;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fault_wheel_bar_press1_input_lo;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fault_wheel_bar_press2_input_hi;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fault_wheel_bar_press2_input_lo;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fault_wheel_speed_dd_spike;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fault_wheel_speed_dl_spike;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fault_wheel_speed_dr_spike;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fault_wheel_speed_nl_spike;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fault_wheel_speed_nr_spike;
};

/**
 * Pack message M173_Modulation_And_Flux_Info.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_m173_modulation_and_flux_info_pack(
    uint8_t *dst_p,
    const struct master_dbc_m173_modulation_and_flux_info_t *src_p,
    size_t size);

/**
 * Unpack message M173_Modulation_And_Flux_Info.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_m173_modulation_and_flux_info_unpack(
    struct master_dbc_m173_modulation_and_flux_info_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from M173_Modulation_And_Flux_Info.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_m173_modulation_and_flux_info_init(struct master_dbc_m173_modulation_and_flux_info_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m173_modulation_and_flux_info_inv_modulation_index_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m173_modulation_and_flux_info_inv_modulation_index_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m173_modulation_and_flux_info_inv_modulation_index_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m173_modulation_and_flux_info_inv_flux_weakening_output_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m173_modulation_and_flux_info_inv_flux_weakening_output_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m173_modulation_and_flux_info_inv_flux_weakening_output_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m173_modulation_and_flux_info_inv_id_command_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m173_modulation_and_flux_info_inv_id_command_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m173_modulation_and_flux_info_inv_id_command_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m173_modulation_and_flux_info_inv_iq_command_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m173_modulation_and_flux_info_inv_iq_command_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m173_modulation_and_flux_info_inv_iq_command_is_in_range(int16_t value);

/**
 * Pack message M172_Torque_And_Timer_Info.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_m172_torque_and_timer_info_pack(
    uint8_t *dst_p,
    const struct master_dbc_m172_torque_and_timer_info_t *src_p,
    size_t size);

/**
 * Unpack message M172_Torque_And_Timer_Info.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_m172_torque_and_timer_info_unpack(
    struct master_dbc_m172_torque_and_timer_info_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from M172_Torque_And_Timer_Info.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_m172_torque_and_timer_info_init(struct master_dbc_m172_torque_and_timer_info_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m172_torque_and_timer_info_inv_commanded_torque_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m172_torque_and_timer_info_inv_commanded_torque_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m172_torque_and_timer_info_inv_commanded_torque_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m172_torque_and_timer_info_inv_torque_feedback_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m172_torque_and_timer_info_inv_torque_feedback_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m172_torque_and_timer_info_inv_torque_feedback_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t master_dbc_m172_torque_and_timer_info_inv_power_on_timer_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m172_torque_and_timer_info_inv_power_on_timer_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m172_torque_and_timer_info_inv_power_on_timer_is_in_range(uint32_t value);

/**
 * Pack message M194_Read_Write_Param_Response.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_m194_read_write_param_response_pack(
    uint8_t *dst_p,
    const struct master_dbc_m194_read_write_param_response_t *src_p,
    size_t size);

/**
 * Unpack message M194_Read_Write_Param_Response.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_m194_read_write_param_response_unpack(
    struct master_dbc_m194_read_write_param_response_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from M194_Read_Write_Param_Response.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_m194_read_write_param_response_init(struct master_dbc_m194_read_write_param_response_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_m194_read_write_param_response_inv_parameter_response_addr_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m194_read_write_param_response_inv_parameter_response_addr_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m194_read_write_param_response_inv_parameter_response_addr_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m194_read_write_param_response_inv_parameter_response_write_ok_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m194_read_write_param_response_inv_parameter_response_write_ok_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m194_read_write_param_response_inv_parameter_response_write_ok_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m194_read_write_param_response_inv_parameter_response_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m194_read_write_param_response_inv_parameter_response_data_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m194_read_write_param_response_inv_parameter_response_data_is_in_range(int16_t value);

/**
 * Pack message M193_Read_Write_Param_Command.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_m193_read_write_param_command_pack(
    uint8_t *dst_p,
    const struct master_dbc_m193_read_write_param_command_t *src_p,
    size_t size);

/**
 * Unpack message M193_Read_Write_Param_Command.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_m193_read_write_param_command_unpack(
    struct master_dbc_m193_read_write_param_command_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from M193_Read_Write_Param_Command.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_m193_read_write_param_command_init(struct master_dbc_m193_read_write_param_command_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_m193_read_write_param_command_vcu_inv_parameter_address_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m193_read_write_param_command_vcu_inv_parameter_address_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m193_read_write_param_command_vcu_inv_parameter_address_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m193_read_write_param_command_vcu_inv_parameter_rw_command_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m193_read_write_param_command_vcu_inv_parameter_rw_command_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m193_read_write_param_command_vcu_inv_parameter_rw_command_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m193_read_write_param_command_vcu_inv_parameter_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m193_read_write_param_command_vcu_inv_parameter_data_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m193_read_write_param_command_vcu_inv_parameter_data_is_in_range(int16_t value);

/**
 * Pack message M192_Command_Message.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_m192_command_message_pack(
    uint8_t *dst_p,
    const struct master_dbc_m192_command_message_t *src_p,
    size_t size);

/**
 * Unpack message M192_Command_Message.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_m192_command_message_unpack(
    struct master_dbc_m192_command_message_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from M192_Command_Message.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_m192_command_message_init(struct master_dbc_m192_command_message_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m192_command_message_vcu_inv_torque_command_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m192_command_message_vcu_inv_torque_command_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m192_command_message_vcu_inv_torque_command_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m192_command_message_vcu_inv_speed_command_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m192_command_message_vcu_inv_speed_command_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m192_command_message_vcu_inv_speed_command_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m192_command_message_vcu_inv_direction_command_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m192_command_message_vcu_inv_direction_command_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m192_command_message_vcu_inv_direction_command_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m192_command_message_vcu_inv_inverter_enable_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m192_command_message_vcu_inv_inverter_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m192_command_message_vcu_inv_inverter_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m192_command_message_vcu_inv_inverter_discharge_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m192_command_message_vcu_inv_inverter_discharge_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m192_command_message_vcu_inv_inverter_discharge_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m192_command_message_vcu_inv_speed_mode_enable_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m192_command_message_vcu_inv_speed_mode_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m192_command_message_vcu_inv_speed_mode_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m192_command_message_vcu_inv_rolling_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m192_command_message_vcu_inv_rolling_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m192_command_message_vcu_inv_rolling_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m192_command_message_vcu_inv_torque_limit_command_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m192_command_message_vcu_inv_torque_limit_command_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m192_command_message_vcu_inv_torque_limit_command_is_in_range(int16_t value);

/**
 * Pack message M171_Fault_Codes.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_m171_fault_codes_pack(
    uint8_t *dst_p,
    const struct master_dbc_m171_fault_codes_t *src_p,
    size_t size);

/**
 * Unpack message M171_Fault_Codes.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_m171_fault_codes_unpack(
    struct master_dbc_m171_fault_codes_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from M171_Fault_Codes.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_m171_fault_codes_init(struct master_dbc_m171_fault_codes_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_m171_fault_codes_inv_post_fault_lo_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m171_fault_codes_inv_post_fault_lo_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m171_fault_codes_inv_post_fault_lo_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_m171_fault_codes_inv_post_fault_hi_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m171_fault_codes_inv_post_fault_hi_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m171_fault_codes_inv_post_fault_hi_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_m171_fault_codes_inv_run_fault_lo_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m171_fault_codes_inv_run_fault_lo_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m171_fault_codes_inv_run_fault_lo_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_m171_fault_codes_inv_run_fault_hi_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m171_fault_codes_inv_run_fault_hi_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m171_fault_codes_inv_run_fault_hi_is_in_range(uint16_t value);

/**
 * Pack message M170_Internal_States.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_m170_internal_states_pack(
    uint8_t *dst_p,
    const struct master_dbc_m170_internal_states_t *src_p,
    size_t size);

/**
 * Unpack message M170_Internal_States.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_m170_internal_states_unpack(
    struct master_dbc_m170_internal_states_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from M170_Internal_States.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_m170_internal_states_init(struct master_dbc_m170_internal_states_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m170_internal_states_inv_vsm_state_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m170_internal_states_inv_vsm_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m170_internal_states_inv_vsm_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m170_internal_states_inv_pwm_frequency_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m170_internal_states_inv_pwm_frequency_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m170_internal_states_inv_pwm_frequency_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m170_internal_states_inv_inverter_state_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m170_internal_states_inv_inverter_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m170_internal_states_inv_inverter_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m170_internal_states_inv_relay_1_status_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m170_internal_states_inv_relay_1_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m170_internal_states_inv_relay_1_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m170_internal_states_inv_relay_2_status_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m170_internal_states_inv_relay_2_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m170_internal_states_inv_relay_2_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m170_internal_states_inv_relay_3_status_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m170_internal_states_inv_relay_3_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m170_internal_states_inv_relay_3_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m170_internal_states_inv_relay_4_status_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m170_internal_states_inv_relay_4_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m170_internal_states_inv_relay_4_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m170_internal_states_inv_relay_5_status_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m170_internal_states_inv_relay_5_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m170_internal_states_inv_relay_5_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m170_internal_states_inv_relay_6_status_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m170_internal_states_inv_relay_6_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m170_internal_states_inv_relay_6_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m170_internal_states_inv_inverter_run_mode_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m170_internal_states_inv_inverter_run_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m170_internal_states_inv_inverter_run_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m170_internal_states_inv_self_sensing_assist_enable_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m170_internal_states_inv_self_sensing_assist_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m170_internal_states_inv_self_sensing_assist_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m170_internal_states_inv_inverter_discharge_state_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m170_internal_states_inv_inverter_discharge_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m170_internal_states_inv_inverter_discharge_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m170_internal_states_inv_inverter_command_mode_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m170_internal_states_inv_inverter_command_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m170_internal_states_inv_inverter_command_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m170_internal_states_inv_rolling_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m170_internal_states_inv_rolling_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m170_internal_states_inv_rolling_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m170_internal_states_inv_inverter_enable_state_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m170_internal_states_inv_inverter_enable_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m170_internal_states_inv_inverter_enable_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m170_internal_states_inv_burst_model_mode_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m170_internal_states_inv_burst_model_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m170_internal_states_inv_burst_model_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m170_internal_states_inv_key_switch_start_status_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m170_internal_states_inv_key_switch_start_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m170_internal_states_inv_key_switch_start_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m170_internal_states_inv_inverter_enable_lockout_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m170_internal_states_inv_inverter_enable_lockout_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m170_internal_states_inv_inverter_enable_lockout_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m170_internal_states_inv_direction_command_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m170_internal_states_inv_direction_command_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m170_internal_states_inv_direction_command_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m170_internal_states_inv_bms_active_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m170_internal_states_inv_bms_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m170_internal_states_inv_bms_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m170_internal_states_inv_bms_torque_limiting_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m170_internal_states_inv_bms_torque_limiting_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m170_internal_states_inv_bms_torque_limiting_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m170_internal_states_inv_limit_max_speed_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m170_internal_states_inv_limit_max_speed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m170_internal_states_inv_limit_max_speed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m170_internal_states_inv_limit_hot_spot_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m170_internal_states_inv_limit_hot_spot_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m170_internal_states_inv_limit_hot_spot_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m170_internal_states_inv_low_speed_limiting_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m170_internal_states_inv_low_speed_limiting_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m170_internal_states_inv_low_speed_limiting_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m170_internal_states_inv_limit_coolant_derating_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m170_internal_states_inv_limit_coolant_derating_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m170_internal_states_inv_limit_coolant_derating_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m170_internal_states_inv_limit_stall_burst_model_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m170_internal_states_inv_limit_stall_burst_model_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m170_internal_states_inv_limit_stall_burst_model_is_in_range(uint8_t value);

/**
 * Pack message M169_Internal_Voltages.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_m169_internal_voltages_pack(
    uint8_t *dst_p,
    const struct master_dbc_m169_internal_voltages_t *src_p,
    size_t size);

/**
 * Unpack message M169_Internal_Voltages.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_m169_internal_voltages_unpack(
    struct master_dbc_m169_internal_voltages_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from M169_Internal_Voltages.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_m169_internal_voltages_init(struct master_dbc_m169_internal_voltages_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m169_internal_voltages_inv_ref_voltage_1_5_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m169_internal_voltages_inv_ref_voltage_1_5_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m169_internal_voltages_inv_ref_voltage_1_5_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m169_internal_voltages_inv_ref_voltage_2_5_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m169_internal_voltages_inv_ref_voltage_2_5_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m169_internal_voltages_inv_ref_voltage_2_5_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m169_internal_voltages_inv_ref_voltage_5_0_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m169_internal_voltages_inv_ref_voltage_5_0_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m169_internal_voltages_inv_ref_voltage_5_0_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m169_internal_voltages_inv_ref_voltage_12_0_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m169_internal_voltages_inv_ref_voltage_12_0_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m169_internal_voltages_inv_ref_voltage_12_0_is_in_range(int16_t value);

/**
 * Pack message M168_Flux_ID_IQ_Info.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_m168_flux_id_iq_info_pack(
    uint8_t *dst_p,
    const struct master_dbc_m168_flux_id_iq_info_t *src_p,
    size_t size);

/**
 * Unpack message M168_Flux_ID_IQ_Info.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_m168_flux_id_iq_info_unpack(
    struct master_dbc_m168_flux_id_iq_info_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from M168_Flux_ID_IQ_Info.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_m168_flux_id_iq_info_init(struct master_dbc_m168_flux_id_iq_info_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m168_flux_id_iq_info_inv_vd_ff_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m168_flux_id_iq_info_inv_vd_ff_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m168_flux_id_iq_info_inv_vd_ff_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m168_flux_id_iq_info_inv_vq_ff_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m168_flux_id_iq_info_inv_vq_ff_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m168_flux_id_iq_info_inv_vq_ff_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m168_flux_id_iq_info_inv_id_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m168_flux_id_iq_info_inv_id_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m168_flux_id_iq_info_inv_id_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m168_flux_id_iq_info_inv_iq_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m168_flux_id_iq_info_inv_iq_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m168_flux_id_iq_info_inv_iq_is_in_range(int16_t value);

/**
 * Pack message M167_Voltage_Info.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_m167_voltage_info_pack(
    uint8_t *dst_p,
    const struct master_dbc_m167_voltage_info_t *src_p,
    size_t size);

/**
 * Unpack message M167_Voltage_Info.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_m167_voltage_info_unpack(
    struct master_dbc_m167_voltage_info_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from M167_Voltage_Info.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_m167_voltage_info_init(struct master_dbc_m167_voltage_info_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m167_voltage_info_inv_dc_bus_voltage_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m167_voltage_info_inv_dc_bus_voltage_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m167_voltage_info_inv_dc_bus_voltage_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m167_voltage_info_inv_output_voltage_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m167_voltage_info_inv_output_voltage_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m167_voltage_info_inv_output_voltage_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m167_voltage_info_inv_vab_vd_voltage_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m167_voltage_info_inv_vab_vd_voltage_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m167_voltage_info_inv_vab_vd_voltage_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m167_voltage_info_inv_vbc_vq_voltage_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m167_voltage_info_inv_vbc_vq_voltage_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m167_voltage_info_inv_vbc_vq_voltage_is_in_range(int16_t value);

/**
 * Pack message M166_Current_Info.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_m166_current_info_pack(
    uint8_t *dst_p,
    const struct master_dbc_m166_current_info_t *src_p,
    size_t size);

/**
 * Unpack message M166_Current_Info.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_m166_current_info_unpack(
    struct master_dbc_m166_current_info_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from M166_Current_Info.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_m166_current_info_init(struct master_dbc_m166_current_info_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m166_current_info_inv_phase_a_current_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m166_current_info_inv_phase_a_current_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m166_current_info_inv_phase_a_current_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m166_current_info_inv_phase_b_current_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m166_current_info_inv_phase_b_current_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m166_current_info_inv_phase_b_current_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m166_current_info_inv_phase_c_current_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m166_current_info_inv_phase_c_current_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m166_current_info_inv_phase_c_current_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m166_current_info_inv_dc_bus_current_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m166_current_info_inv_dc_bus_current_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m166_current_info_inv_dc_bus_current_is_in_range(int16_t value);

/**
 * Pack message M165_Motor_Position_Info.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_m165_motor_position_info_pack(
    uint8_t *dst_p,
    const struct master_dbc_m165_motor_position_info_t *src_p,
    size_t size);

/**
 * Unpack message M165_Motor_Position_Info.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_m165_motor_position_info_unpack(
    struct master_dbc_m165_motor_position_info_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from M165_Motor_Position_Info.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_m165_motor_position_info_init(struct master_dbc_m165_motor_position_info_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_m165_motor_position_info_inv_motor_angle_electrical_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m165_motor_position_info_inv_motor_angle_electrical_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m165_motor_position_info_inv_motor_angle_electrical_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m165_motor_position_info_inv_motor_speed_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m165_motor_position_info_inv_motor_speed_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m165_motor_position_info_inv_motor_speed_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m165_motor_position_info_inv_electrical_output_frequency_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m165_motor_position_info_inv_electrical_output_frequency_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m165_motor_position_info_inv_electrical_output_frequency_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m165_motor_position_info_inv_delta_resolver_filtered_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m165_motor_position_info_inv_delta_resolver_filtered_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m165_motor_position_info_inv_delta_resolver_filtered_is_in_range(int16_t value);

/**
 * Pack message M164_Digital_Input_Status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_m164_digital_input_status_pack(
    uint8_t *dst_p,
    const struct master_dbc_m164_digital_input_status_t *src_p,
    size_t size);

/**
 * Unpack message M164_Digital_Input_Status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_m164_digital_input_status_unpack(
    struct master_dbc_m164_digital_input_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from M164_Digital_Input_Status.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_m164_digital_input_status_init(struct master_dbc_m164_digital_input_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m164_digital_input_status_inv_digital_input_1_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m164_digital_input_status_inv_digital_input_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m164_digital_input_status_inv_digital_input_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m164_digital_input_status_inv_digital_input_2_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m164_digital_input_status_inv_digital_input_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m164_digital_input_status_inv_digital_input_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m164_digital_input_status_inv_digital_input_3_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m164_digital_input_status_inv_digital_input_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m164_digital_input_status_inv_digital_input_3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m164_digital_input_status_inv_digital_input_4_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m164_digital_input_status_inv_digital_input_4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m164_digital_input_status_inv_digital_input_4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m164_digital_input_status_inv_digital_input_5_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m164_digital_input_status_inv_digital_input_5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m164_digital_input_status_inv_digital_input_5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m164_digital_input_status_inv_digital_input_6_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m164_digital_input_status_inv_digital_input_6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m164_digital_input_status_inv_digital_input_6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m164_digital_input_status_inv_digital_input_7_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m164_digital_input_status_inv_digital_input_7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m164_digital_input_status_inv_digital_input_7_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m164_digital_input_status_inv_digital_input_8_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m164_digital_input_status_inv_digital_input_8_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m164_digital_input_status_inv_digital_input_8_is_in_range(uint8_t value);

/**
 * Pack message M163_Analog_Input_Voltages.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_m163_analog_input_voltages_pack(
    uint8_t *dst_p,
    const struct master_dbc_m163_analog_input_voltages_t *src_p,
    size_t size);

/**
 * Unpack message M163_Analog_Input_Voltages.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_m163_analog_input_voltages_unpack(
    struct master_dbc_m163_analog_input_voltages_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from M163_Analog_Input_Voltages.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_m163_analog_input_voltages_init(struct master_dbc_m163_analog_input_voltages_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_m163_analog_input_voltages_inv_analog_input_1_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m163_analog_input_voltages_inv_analog_input_1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m163_analog_input_voltages_inv_analog_input_1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_m163_analog_input_voltages_inv_analog_input_2_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m163_analog_input_voltages_inv_analog_input_2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m163_analog_input_voltages_inv_analog_input_2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_m163_analog_input_voltages_inv_analog_input_3_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m163_analog_input_voltages_inv_analog_input_3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m163_analog_input_voltages_inv_analog_input_3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_m163_analog_input_voltages_inv_analog_input_4_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m163_analog_input_voltages_inv_analog_input_4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m163_analog_input_voltages_inv_analog_input_4_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_m163_analog_input_voltages_inv_analog_input_5_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m163_analog_input_voltages_inv_analog_input_5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m163_analog_input_voltages_inv_analog_input_5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_m163_analog_input_voltages_inv_analog_input_6_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m163_analog_input_voltages_inv_analog_input_6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m163_analog_input_voltages_inv_analog_input_6_is_in_range(uint16_t value);

/**
 * Pack message M162_Temperature_Set_3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_m162_temperature_set_3_pack(
    uint8_t *dst_p,
    const struct master_dbc_m162_temperature_set_3_t *src_p,
    size_t size);

/**
 * Unpack message M162_Temperature_Set_3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_m162_temperature_set_3_unpack(
    struct master_dbc_m162_temperature_set_3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from M162_Temperature_Set_3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_m162_temperature_set_3_init(struct master_dbc_m162_temperature_set_3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m162_temperature_set_3_inv_coolant_temp_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m162_temperature_set_3_inv_coolant_temp_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m162_temperature_set_3_inv_coolant_temp_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m162_temperature_set_3_inv_hot_spot_temp_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m162_temperature_set_3_inv_hot_spot_temp_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m162_temperature_set_3_inv_hot_spot_temp_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m162_temperature_set_3_inv_motor_temp_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m162_temperature_set_3_inv_motor_temp_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m162_temperature_set_3_inv_motor_temp_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m162_temperature_set_3_inv_torque_shudder_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m162_temperature_set_3_inv_torque_shudder_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m162_temperature_set_3_inv_torque_shudder_is_in_range(int16_t value);

/**
 * Pack message M161_Temperature_Set_2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_m161_temperature_set_2_pack(
    uint8_t *dst_p,
    const struct master_dbc_m161_temperature_set_2_t *src_p,
    size_t size);

/**
 * Unpack message M161_Temperature_Set_2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_m161_temperature_set_2_unpack(
    struct master_dbc_m161_temperature_set_2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from M161_Temperature_Set_2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_m161_temperature_set_2_init(struct master_dbc_m161_temperature_set_2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m161_temperature_set_2_inv_control_board_temp_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m161_temperature_set_2_inv_control_board_temp_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m161_temperature_set_2_inv_control_board_temp_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m161_temperature_set_2_inv_rtd1_temperature_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m161_temperature_set_2_inv_rtd1_temperature_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m161_temperature_set_2_inv_rtd1_temperature_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m161_temperature_set_2_inv_rtd2_temperature_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m161_temperature_set_2_inv_rtd2_temperature_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m161_temperature_set_2_inv_rtd2_temperature_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m161_temperature_set_2_inv_stall_burst_model_temp_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m161_temperature_set_2_inv_stall_burst_model_temp_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m161_temperature_set_2_inv_stall_burst_model_temp_is_in_range(int16_t value);

/**
 * Pack message M160_Temperature_Set_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_m160_temperature_set_1_pack(
    uint8_t *dst_p,
    const struct master_dbc_m160_temperature_set_1_t *src_p,
    size_t size);

/**
 * Unpack message M160_Temperature_Set_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_m160_temperature_set_1_unpack(
    struct master_dbc_m160_temperature_set_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from M160_Temperature_Set_1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_m160_temperature_set_1_init(struct master_dbc_m160_temperature_set_1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m160_temperature_set_1_inv_module_a_temp_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m160_temperature_set_1_inv_module_a_temp_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m160_temperature_set_1_inv_module_a_temp_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m160_temperature_set_1_inv_module_b_temp_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m160_temperature_set_1_inv_module_b_temp_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m160_temperature_set_1_inv_module_b_temp_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m160_temperature_set_1_inv_module_c_temp_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m160_temperature_set_1_inv_module_c_temp_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m160_temperature_set_1_inv_module_c_temp_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m160_temperature_set_1_inv_gate_driver_board_temp_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m160_temperature_set_1_inv_gate_driver_board_temp_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m160_temperature_set_1_inv_gate_driver_board_temp_is_in_range(int16_t value);

/**
 * Pack message M174_Firmware_Info.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_m174_firmware_info_pack(
    uint8_t *dst_p,
    const struct master_dbc_m174_firmware_info_t *src_p,
    size_t size);

/**
 * Unpack message M174_Firmware_Info.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_m174_firmware_info_unpack(
    struct master_dbc_m174_firmware_info_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from M174_Firmware_Info.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_m174_firmware_info_init(struct master_dbc_m174_firmware_info_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_m174_firmware_info_inv_project_code_eep_ver_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m174_firmware_info_inv_project_code_eep_ver_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m174_firmware_info_inv_project_code_eep_ver_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_m174_firmware_info_inv_sw_version_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m174_firmware_info_inv_sw_version_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m174_firmware_info_inv_sw_version_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_m174_firmware_info_inv_date_code_mmdd_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m174_firmware_info_inv_date_code_mmdd_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m174_firmware_info_inv_date_code_mmdd_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_m174_firmware_info_inv_date_code_yyyy_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m174_firmware_info_inv_date_code_yyyy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m174_firmware_info_inv_date_code_yyyy_is_in_range(uint16_t value);

/**
 * Pack message M175_Diag_Data_Message.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_m175_diag_data_message_pack(
    uint8_t *dst_p,
    const struct master_dbc_m175_diag_data_message_t *src_p,
    size_t size);

/**
 * Unpack message M175_Diag_Data_Message.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_m175_diag_data_message_unpack(
    struct master_dbc_m175_diag_data_message_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from M175_Diag_Data_Message.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_m175_diag_data_message_init(struct master_dbc_m175_diag_data_message_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m175_diag_data_message_inv_diag_record_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m175_diag_data_message_inv_diag_record_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m175_diag_data_message_inv_diag_record_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m175_diag_data_message_inv_diag_segment_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m175_diag_data_message_inv_diag_segment_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m175_diag_data_message_inv_diag_segment_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m175_diag_data_message_inv_diag_gamma_resolver_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m175_diag_data_message_inv_diag_gamma_resolver_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m175_diag_data_message_inv_diag_gamma_resolver_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m175_diag_data_message_inv_diag_cos_used_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m175_diag_data_message_inv_diag_cos_used_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m175_diag_data_message_inv_diag_cos_used_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m175_diag_data_message_inv_diag_ic_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m175_diag_data_message_inv_diag_ic_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m175_diag_data_message_inv_diag_ic_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m175_diag_data_message_inv_diag_id_cmd_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m175_diag_data_message_inv_diag_id_cmd_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m175_diag_data_message_inv_diag_id_cmd_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m175_diag_data_message_inv_diag_vq_cmd_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m175_diag_data_message_inv_diag_vq_cmd_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m175_diag_data_message_inv_diag_vq_cmd_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_m175_diag_data_message_inv_diag_pwm_freq_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m175_diag_data_message_inv_diag_pwm_freq_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m175_diag_data_message_inv_diag_pwm_freq_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m175_diag_data_message_inv_diag_gamma_observer_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m175_diag_data_message_inv_diag_gamma_observer_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m175_diag_data_message_inv_diag_gamma_observer_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m175_diag_data_message_inv_diag_ia_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m175_diag_data_message_inv_diag_ia_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m175_diag_data_message_inv_diag_ia_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m175_diag_data_message_inv_diag_vdc_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m175_diag_data_message_inv_diag_vdc_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m175_diag_data_message_inv_diag_vdc_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m175_diag_data_message_inv_diag_mod_index_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m175_diag_data_message_inv_diag_mod_index_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m175_diag_data_message_inv_diag_mod_index_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m175_diag_data_message_inv_diag_vd_cmd_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m175_diag_data_message_inv_diag_vd_cmd_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m175_diag_data_message_inv_diag_vd_cmd_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_m175_diag_data_message_inv_diag_run_faults_lo_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m175_diag_data_message_inv_diag_run_faults_lo_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m175_diag_data_message_inv_diag_run_faults_lo_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m175_diag_data_message_inv_diag_sin_used_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m175_diag_data_message_inv_diag_sin_used_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m175_diag_data_message_inv_diag_sin_used_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m175_diag_data_message_inv_diag_ib_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m175_diag_data_message_inv_diag_ib_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m175_diag_data_message_inv_diag_ib_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m175_diag_data_message_inv_diag_iq_cmd_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m175_diag_data_message_inv_diag_iq_cmd_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m175_diag_data_message_inv_diag_iq_cmd_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m175_diag_data_message_inv_diag_fw_output_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m175_diag_data_message_inv_diag_fw_output_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m175_diag_data_message_inv_diag_fw_output_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m175_diag_data_message_inv_diag_vqs_cmd_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m175_diag_data_message_inv_diag_vqs_cmd_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m175_diag_data_message_inv_diag_vqs_cmd_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_m175_diag_data_message_inv_diag_run_faults_hi_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m175_diag_data_message_inv_diag_run_faults_hi_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m175_diag_data_message_inv_diag_run_faults_hi_is_in_range(uint16_t value);

/**
 * Pack message BMS_Current_Limit.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_bms_current_limit_pack(
    uint8_t *dst_p,
    const struct master_dbc_bms_current_limit_t *src_p,
    size_t size);

/**
 * Unpack message BMS_Current_Limit.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_bms_current_limit_unpack(
    struct master_dbc_bms_current_limit_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BMS_Current_Limit.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_bms_current_limit_init(struct master_dbc_bms_current_limit_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_bms_current_limit_bms_max_discharge_current_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_bms_current_limit_bms_max_discharge_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_bms_current_limit_bms_max_discharge_current_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_bms_current_limit_bms_max_charge_current_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_bms_current_limit_bms_max_charge_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_bms_current_limit_bms_max_charge_current_is_in_range(uint16_t value);

/**
 * Pack message M176_Fast_Info.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_m176_fast_info_pack(
    uint8_t *dst_p,
    const struct master_dbc_m176_fast_info_t *src_p,
    size_t size);

/**
 * Unpack message M176_Fast_Info.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_m176_fast_info_unpack(
    struct master_dbc_m176_fast_info_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from M176_Fast_Info.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_m176_fast_info_init(struct master_dbc_m176_fast_info_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m176_fast_info_inv_fast_torque_command_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m176_fast_info_inv_fast_torque_command_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m176_fast_info_inv_fast_torque_command_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m176_fast_info_inv_fast_torque_feedback_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m176_fast_info_inv_fast_torque_feedback_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m176_fast_info_inv_fast_torque_feedback_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m176_fast_info_inv_fast_motor_speed_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m176_fast_info_inv_fast_motor_speed_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m176_fast_info_inv_fast_motor_speed_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m176_fast_info_inv_fast_dc_bus_voltage_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m176_fast_info_inv_fast_dc_bus_voltage_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m176_fast_info_inv_fast_dc_bus_voltage_is_in_range(int16_t value);

/**
 * Pack message M177_Torque_Capability.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_m177_torque_capability_pack(
    uint8_t *dst_p,
    const struct master_dbc_m177_torque_capability_t *src_p,
    size_t size);

/**
 * Unpack message M177_Torque_Capability.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_m177_torque_capability_unpack(
    struct master_dbc_m177_torque_capability_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from M177_Torque_Capability.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_m177_torque_capability_init(struct master_dbc_m177_torque_capability_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_m177_torque_capability_inv_torque_capability_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m177_torque_capability_inv_torque_capability_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m177_torque_capability_inv_torque_capability_is_in_range(uint16_t value);

/**
 * Pack message LF_IRTS_Brake_5.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_lf_irts_brake_5_pack(
    uint8_t *dst_p,
    const struct master_dbc_lf_irts_brake_5_t *src_p,
    size_t size);

/**
 * Unpack message LF_IRTS_Brake_5.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_lf_irts_brake_5_unpack(
    struct master_dbc_lf_irts_brake_5_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from LF_IRTS_Brake_5.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_lf_irts_brake_5_init(struct master_dbc_lf_irts_brake_5_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_lf_irts_brake_5_lf_sensor_temp_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_lf_irts_brake_5_lf_sensor_temp_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_lf_irts_brake_5_lf_sensor_temp_is_in_range(uint16_t value);

/**
 * Pack message RF_IRTS_Brake_5.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_rf_irts_brake_5_pack(
    uint8_t *dst_p,
    const struct master_dbc_rf_irts_brake_5_t *src_p,
    size_t size);

/**
 * Unpack message RF_IRTS_Brake_5.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_rf_irts_brake_5_unpack(
    struct master_dbc_rf_irts_brake_5_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RF_IRTS_Brake_5.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_rf_irts_brake_5_init(struct master_dbc_rf_irts_brake_5_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_rf_irts_brake_5_rf_sensor_temp_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_rf_irts_brake_5_rf_sensor_temp_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_rf_irts_brake_5_rf_sensor_temp_is_in_range(uint16_t value);

/**
 * Pack message RR_IRTS_Brake_5.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_rr_irts_brake_5_pack(
    uint8_t *dst_p,
    const struct master_dbc_rr_irts_brake_5_t *src_p,
    size_t size);

/**
 * Unpack message RR_IRTS_Brake_5.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_rr_irts_brake_5_unpack(
    struct master_dbc_rr_irts_brake_5_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RR_IRTS_Brake_5.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_rr_irts_brake_5_init(struct master_dbc_rr_irts_brake_5_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_rr_irts_brake_5_rr_sensor_temp_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_rr_irts_brake_5_rr_sensor_temp_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_rr_irts_brake_5_rr_sensor_temp_is_in_range(uint16_t value);

/**
 * Pack message LR_IRTS_Brake_5.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_lr_irts_brake_5_pack(
    uint8_t *dst_p,
    const struct master_dbc_lr_irts_brake_5_t *src_p,
    size_t size);

/**
 * Unpack message LR_IRTS_Brake_5.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_lr_irts_brake_5_unpack(
    struct master_dbc_lr_irts_brake_5_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from LR_IRTS_Brake_5.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_lr_irts_brake_5_init(struct master_dbc_lr_irts_brake_5_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_lr_irts_brake_5_lr_sensor_temp_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_lr_irts_brake_5_lr_sensor_temp_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_lr_irts_brake_5_lr_sensor_temp_is_in_range(uint16_t value);

/**
 * Pack message LF_IRTS_Brake_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_lf_irts_brake_1_pack(
    uint8_t *dst_p,
    const struct master_dbc_lf_irts_brake_1_t *src_p,
    size_t size);

/**
 * Unpack message LF_IRTS_Brake_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_lf_irts_brake_1_unpack(
    struct master_dbc_lf_irts_brake_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from LF_IRTS_Brake_1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_lf_irts_brake_1_init(struct master_dbc_lf_irts_brake_1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_lf_irts_brake_1_lf_rotor_temp_01_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_lf_irts_brake_1_lf_rotor_temp_01_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_lf_irts_brake_1_lf_rotor_temp_01_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_lf_irts_brake_1_lf_rotor_temp_02_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_lf_irts_brake_1_lf_rotor_temp_02_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_lf_irts_brake_1_lf_rotor_temp_02_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_lf_irts_brake_1_lf_rotor_temp_03_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_lf_irts_brake_1_lf_rotor_temp_03_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_lf_irts_brake_1_lf_rotor_temp_03_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_lf_irts_brake_1_lf_rotor_temp_04_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_lf_irts_brake_1_lf_rotor_temp_04_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_lf_irts_brake_1_lf_rotor_temp_04_is_in_range(uint16_t value);

/**
 * Pack message LF_IRTS_Brake_2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_lf_irts_brake_2_pack(
    uint8_t *dst_p,
    const struct master_dbc_lf_irts_brake_2_t *src_p,
    size_t size);

/**
 * Unpack message LF_IRTS_Brake_2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_lf_irts_brake_2_unpack(
    struct master_dbc_lf_irts_brake_2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from LF_IRTS_Brake_2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_lf_irts_brake_2_init(struct master_dbc_lf_irts_brake_2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_lf_irts_brake_2_lf_rotor_temp_05_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_lf_irts_brake_2_lf_rotor_temp_05_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_lf_irts_brake_2_lf_rotor_temp_05_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_lf_irts_brake_2_lf_rotor_temp_06_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_lf_irts_brake_2_lf_rotor_temp_06_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_lf_irts_brake_2_lf_rotor_temp_06_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_lf_irts_brake_2_lf_rotor_temp_07_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_lf_irts_brake_2_lf_rotor_temp_07_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_lf_irts_brake_2_lf_rotor_temp_07_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_lf_irts_brake_2_lf_rotor_temp_08_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_lf_irts_brake_2_lf_rotor_temp_08_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_lf_irts_brake_2_lf_rotor_temp_08_is_in_range(uint16_t value);

/**
 * Pack message LF_IRTS_Brake_3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_lf_irts_brake_3_pack(
    uint8_t *dst_p,
    const struct master_dbc_lf_irts_brake_3_t *src_p,
    size_t size);

/**
 * Unpack message LF_IRTS_Brake_3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_lf_irts_brake_3_unpack(
    struct master_dbc_lf_irts_brake_3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from LF_IRTS_Brake_3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_lf_irts_brake_3_init(struct master_dbc_lf_irts_brake_3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_lf_irts_brake_3_lf_rotor_temp_09_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_lf_irts_brake_3_lf_rotor_temp_09_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_lf_irts_brake_3_lf_rotor_temp_09_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_lf_irts_brake_3_lf_rotor_temp_10_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_lf_irts_brake_3_lf_rotor_temp_10_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_lf_irts_brake_3_lf_rotor_temp_10_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_lf_irts_brake_3_lf_rotor_temp_11_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_lf_irts_brake_3_lf_rotor_temp_11_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_lf_irts_brake_3_lf_rotor_temp_11_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_lf_irts_brake_3_lf_rotor_temp_12_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_lf_irts_brake_3_lf_rotor_temp_12_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_lf_irts_brake_3_lf_rotor_temp_12_is_in_range(uint16_t value);

/**
 * Pack message LF_IRTS_Brake_4.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_lf_irts_brake_4_pack(
    uint8_t *dst_p,
    const struct master_dbc_lf_irts_brake_4_t *src_p,
    size_t size);

/**
 * Unpack message LF_IRTS_Brake_4.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_lf_irts_brake_4_unpack(
    struct master_dbc_lf_irts_brake_4_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from LF_IRTS_Brake_4.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_lf_irts_brake_4_init(struct master_dbc_lf_irts_brake_4_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_lf_irts_brake_4_lf_rotor_temp_13_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_lf_irts_brake_4_lf_rotor_temp_13_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_lf_irts_brake_4_lf_rotor_temp_13_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_lf_irts_brake_4_lf_rotor_temp_14_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_lf_irts_brake_4_lf_rotor_temp_14_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_lf_irts_brake_4_lf_rotor_temp_14_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_lf_irts_brake_4_lf_rotor_temp_15_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_lf_irts_brake_4_lf_rotor_temp_15_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_lf_irts_brake_4_lf_rotor_temp_15_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_lf_irts_brake_4_lf_rotor_temp_16_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_lf_irts_brake_4_lf_rotor_temp_16_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_lf_irts_brake_4_lf_rotor_temp_16_is_in_range(uint16_t value);

/**
 * Pack message RF_IRTS_Brake_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_rf_irts_brake_1_pack(
    uint8_t *dst_p,
    const struct master_dbc_rf_irts_brake_1_t *src_p,
    size_t size);

/**
 * Unpack message RF_IRTS_Brake_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_rf_irts_brake_1_unpack(
    struct master_dbc_rf_irts_brake_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RF_IRTS_Brake_1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_rf_irts_brake_1_init(struct master_dbc_rf_irts_brake_1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_rf_irts_brake_1_rf_rotor_temp_01_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_rf_irts_brake_1_rf_rotor_temp_01_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_rf_irts_brake_1_rf_rotor_temp_01_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_rf_irts_brake_1_rf_rotor_temp_02_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_rf_irts_brake_1_rf_rotor_temp_02_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_rf_irts_brake_1_rf_rotor_temp_02_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_rf_irts_brake_1_rf_rotor_temp_03_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_rf_irts_brake_1_rf_rotor_temp_03_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_rf_irts_brake_1_rf_rotor_temp_03_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_rf_irts_brake_1_rf_rotor_temp_04_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_rf_irts_brake_1_rf_rotor_temp_04_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_rf_irts_brake_1_rf_rotor_temp_04_is_in_range(uint16_t value);

/**
 * Pack message RF_IRTS_Brake_2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_rf_irts_brake_2_pack(
    uint8_t *dst_p,
    const struct master_dbc_rf_irts_brake_2_t *src_p,
    size_t size);

/**
 * Unpack message RF_IRTS_Brake_2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_rf_irts_brake_2_unpack(
    struct master_dbc_rf_irts_brake_2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RF_IRTS_Brake_2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_rf_irts_brake_2_init(struct master_dbc_rf_irts_brake_2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_rf_irts_brake_2_rf_rotor_temp_05_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_rf_irts_brake_2_rf_rotor_temp_05_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_rf_irts_brake_2_rf_rotor_temp_05_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_rf_irts_brake_2_rf_rotor_temp_06_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_rf_irts_brake_2_rf_rotor_temp_06_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_rf_irts_brake_2_rf_rotor_temp_06_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_rf_irts_brake_2_rf_rotor_temp_07_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_rf_irts_brake_2_rf_rotor_temp_07_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_rf_irts_brake_2_rf_rotor_temp_07_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_rf_irts_brake_2_rf_rotor_temp_08_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_rf_irts_brake_2_rf_rotor_temp_08_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_rf_irts_brake_2_rf_rotor_temp_08_is_in_range(uint16_t value);

/**
 * Pack message RF_IRTS_Brake_3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_rf_irts_brake_3_pack(
    uint8_t *dst_p,
    const struct master_dbc_rf_irts_brake_3_t *src_p,
    size_t size);

/**
 * Unpack message RF_IRTS_Brake_3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_rf_irts_brake_3_unpack(
    struct master_dbc_rf_irts_brake_3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RF_IRTS_Brake_3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_rf_irts_brake_3_init(struct master_dbc_rf_irts_brake_3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_rf_irts_brake_3_rf_rotor_temp_09_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_rf_irts_brake_3_rf_rotor_temp_09_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_rf_irts_brake_3_rf_rotor_temp_09_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_rf_irts_brake_3_rf_rotor_temp_10_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_rf_irts_brake_3_rf_rotor_temp_10_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_rf_irts_brake_3_rf_rotor_temp_10_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_rf_irts_brake_3_rf_rotor_temp_11_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_rf_irts_brake_3_rf_rotor_temp_11_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_rf_irts_brake_3_rf_rotor_temp_11_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_rf_irts_brake_3_rf_rotor_temp_12_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_rf_irts_brake_3_rf_rotor_temp_12_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_rf_irts_brake_3_rf_rotor_temp_12_is_in_range(uint16_t value);

/**
 * Pack message RF_IRTS_Brake_4.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_rf_irts_brake_4_pack(
    uint8_t *dst_p,
    const struct master_dbc_rf_irts_brake_4_t *src_p,
    size_t size);

/**
 * Unpack message RF_IRTS_Brake_4.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_rf_irts_brake_4_unpack(
    struct master_dbc_rf_irts_brake_4_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RF_IRTS_Brake_4.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_rf_irts_brake_4_init(struct master_dbc_rf_irts_brake_4_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_rf_irts_brake_4_rf_rotor_temp_13_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_rf_irts_brake_4_rf_rotor_temp_13_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_rf_irts_brake_4_rf_rotor_temp_13_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_rf_irts_brake_4_rf_rotor_temp_14_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_rf_irts_brake_4_rf_rotor_temp_14_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_rf_irts_brake_4_rf_rotor_temp_14_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_rf_irts_brake_4_rf_rotor_temp_15_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_rf_irts_brake_4_rf_rotor_temp_15_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_rf_irts_brake_4_rf_rotor_temp_15_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_rf_irts_brake_4_rf_rotor_temp_16_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_rf_irts_brake_4_rf_rotor_temp_16_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_rf_irts_brake_4_rf_rotor_temp_16_is_in_range(uint16_t value);

/**
 * Pack message LR_IRTS_Brake_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_lr_irts_brake_1_pack(
    uint8_t *dst_p,
    const struct master_dbc_lr_irts_brake_1_t *src_p,
    size_t size);

/**
 * Unpack message LR_IRTS_Brake_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_lr_irts_brake_1_unpack(
    struct master_dbc_lr_irts_brake_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from LR_IRTS_Brake_1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_lr_irts_brake_1_init(struct master_dbc_lr_irts_brake_1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_lr_irts_brake_1_lr_rotor_temp_01_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_lr_irts_brake_1_lr_rotor_temp_01_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_lr_irts_brake_1_lr_rotor_temp_01_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_lr_irts_brake_1_lr_rotor_temp_02_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_lr_irts_brake_1_lr_rotor_temp_02_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_lr_irts_brake_1_lr_rotor_temp_02_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_lr_irts_brake_1_lr_rotor_temp_03_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_lr_irts_brake_1_lr_rotor_temp_03_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_lr_irts_brake_1_lr_rotor_temp_03_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_lr_irts_brake_1_lr_rotor_temp_04_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_lr_irts_brake_1_lr_rotor_temp_04_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_lr_irts_brake_1_lr_rotor_temp_04_is_in_range(uint16_t value);

/**
 * Pack message LR_IRTS_Brake_2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_lr_irts_brake_2_pack(
    uint8_t *dst_p,
    const struct master_dbc_lr_irts_brake_2_t *src_p,
    size_t size);

/**
 * Unpack message LR_IRTS_Brake_2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_lr_irts_brake_2_unpack(
    struct master_dbc_lr_irts_brake_2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from LR_IRTS_Brake_2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_lr_irts_brake_2_init(struct master_dbc_lr_irts_brake_2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_lr_irts_brake_2_lr_rotor_temp_05_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_lr_irts_brake_2_lr_rotor_temp_05_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_lr_irts_brake_2_lr_rotor_temp_05_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_lr_irts_brake_2_lr_rotor_temp_06_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_lr_irts_brake_2_lr_rotor_temp_06_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_lr_irts_brake_2_lr_rotor_temp_06_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_lr_irts_brake_2_lr_rotor_temp_07_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_lr_irts_brake_2_lr_rotor_temp_07_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_lr_irts_brake_2_lr_rotor_temp_07_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_lr_irts_brake_2_lr_rotor_temp_08_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_lr_irts_brake_2_lr_rotor_temp_08_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_lr_irts_brake_2_lr_rotor_temp_08_is_in_range(uint16_t value);

/**
 * Pack message LR_IRTS_Brake_3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_lr_irts_brake_3_pack(
    uint8_t *dst_p,
    const struct master_dbc_lr_irts_brake_3_t *src_p,
    size_t size);

/**
 * Unpack message LR_IRTS_Brake_3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_lr_irts_brake_3_unpack(
    struct master_dbc_lr_irts_brake_3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from LR_IRTS_Brake_3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_lr_irts_brake_3_init(struct master_dbc_lr_irts_brake_3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_lr_irts_brake_3_lr_rotor_temp_09_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_lr_irts_brake_3_lr_rotor_temp_09_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_lr_irts_brake_3_lr_rotor_temp_09_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_lr_irts_brake_3_lr_rotor_temp_10_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_lr_irts_brake_3_lr_rotor_temp_10_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_lr_irts_brake_3_lr_rotor_temp_10_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_lr_irts_brake_3_lr_rotor_temp_11_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_lr_irts_brake_3_lr_rotor_temp_11_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_lr_irts_brake_3_lr_rotor_temp_11_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_lr_irts_brake_3_lr_rotor_temp_12_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_lr_irts_brake_3_lr_rotor_temp_12_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_lr_irts_brake_3_lr_rotor_temp_12_is_in_range(uint16_t value);

/**
 * Pack message LR_IRTS_Brake_4.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_lr_irts_brake_4_pack(
    uint8_t *dst_p,
    const struct master_dbc_lr_irts_brake_4_t *src_p,
    size_t size);

/**
 * Unpack message LR_IRTS_Brake_4.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_lr_irts_brake_4_unpack(
    struct master_dbc_lr_irts_brake_4_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from LR_IRTS_Brake_4.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_lr_irts_brake_4_init(struct master_dbc_lr_irts_brake_4_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_lr_irts_brake_4_lr_rotor_temp_13_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_lr_irts_brake_4_lr_rotor_temp_13_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_lr_irts_brake_4_lr_rotor_temp_13_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_lr_irts_brake_4_lr_rotor_temp_14_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_lr_irts_brake_4_lr_rotor_temp_14_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_lr_irts_brake_4_lr_rotor_temp_14_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_lr_irts_brake_4_lr_rotor_temp_15_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_lr_irts_brake_4_lr_rotor_temp_15_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_lr_irts_brake_4_lr_rotor_temp_15_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_lr_irts_brake_4_lr_rotor_temp_16_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_lr_irts_brake_4_lr_rotor_temp_16_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_lr_irts_brake_4_lr_rotor_temp_16_is_in_range(uint16_t value);

/**
 * Pack message RR_IRTS_Brake_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_rr_irts_brake_1_pack(
    uint8_t *dst_p,
    const struct master_dbc_rr_irts_brake_1_t *src_p,
    size_t size);

/**
 * Unpack message RR_IRTS_Brake_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_rr_irts_brake_1_unpack(
    struct master_dbc_rr_irts_brake_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RR_IRTS_Brake_1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_rr_irts_brake_1_init(struct master_dbc_rr_irts_brake_1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_rr_irts_brake_1_rr_rotor_temp_01_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_rr_irts_brake_1_rr_rotor_temp_01_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_rr_irts_brake_1_rr_rotor_temp_01_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_rr_irts_brake_1_rr_rotor_temp_02_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_rr_irts_brake_1_rr_rotor_temp_02_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_rr_irts_brake_1_rr_rotor_temp_02_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_rr_irts_brake_1_rr_rotor_temp_03_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_rr_irts_brake_1_rr_rotor_temp_03_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_rr_irts_brake_1_rr_rotor_temp_03_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_rr_irts_brake_1_rr_rotor_temp_04_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_rr_irts_brake_1_rr_rotor_temp_04_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_rr_irts_brake_1_rr_rotor_temp_04_is_in_range(uint16_t value);

/**
 * Pack message RR_IRTS_Brake_2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_rr_irts_brake_2_pack(
    uint8_t *dst_p,
    const struct master_dbc_rr_irts_brake_2_t *src_p,
    size_t size);

/**
 * Unpack message RR_IRTS_Brake_2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_rr_irts_brake_2_unpack(
    struct master_dbc_rr_irts_brake_2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RR_IRTS_Brake_2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_rr_irts_brake_2_init(struct master_dbc_rr_irts_brake_2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_rr_irts_brake_2_rr_rotor_temp_05_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_rr_irts_brake_2_rr_rotor_temp_05_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_rr_irts_brake_2_rr_rotor_temp_05_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_rr_irts_brake_2_rr_rotor_temp_06_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_rr_irts_brake_2_rr_rotor_temp_06_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_rr_irts_brake_2_rr_rotor_temp_06_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_rr_irts_brake_2_rr_rotor_temp_07_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_rr_irts_brake_2_rr_rotor_temp_07_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_rr_irts_brake_2_rr_rotor_temp_07_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_rr_irts_brake_2_rr_rotor_temp_08_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_rr_irts_brake_2_rr_rotor_temp_08_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_rr_irts_brake_2_rr_rotor_temp_08_is_in_range(uint16_t value);

/**
 * Pack message RR_IRTS_Brake_3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_rr_irts_brake_3_pack(
    uint8_t *dst_p,
    const struct master_dbc_rr_irts_brake_3_t *src_p,
    size_t size);

/**
 * Unpack message RR_IRTS_Brake_3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_rr_irts_brake_3_unpack(
    struct master_dbc_rr_irts_brake_3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RR_IRTS_Brake_3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_rr_irts_brake_3_init(struct master_dbc_rr_irts_brake_3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_rr_irts_brake_3_rr_rotor_temp_09_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_rr_irts_brake_3_rr_rotor_temp_09_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_rr_irts_brake_3_rr_rotor_temp_09_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_rr_irts_brake_3_rr_rotor_temp_10_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_rr_irts_brake_3_rr_rotor_temp_10_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_rr_irts_brake_3_rr_rotor_temp_10_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_rr_irts_brake_3_rr_rotor_temp_11_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_rr_irts_brake_3_rr_rotor_temp_11_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_rr_irts_brake_3_rr_rotor_temp_11_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_rr_irts_brake_3_rr_rotor_temp_12_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_rr_irts_brake_3_rr_rotor_temp_12_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_rr_irts_brake_3_rr_rotor_temp_12_is_in_range(uint16_t value);

/**
 * Pack message RR_IRTS_Brake_4.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_rr_irts_brake_4_pack(
    uint8_t *dst_p,
    const struct master_dbc_rr_irts_brake_4_t *src_p,
    size_t size);

/**
 * Unpack message RR_IRTS_Brake_4.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_rr_irts_brake_4_unpack(
    struct master_dbc_rr_irts_brake_4_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RR_IRTS_Brake_4.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_rr_irts_brake_4_init(struct master_dbc_rr_irts_brake_4_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_rr_irts_brake_4_rr_rotor_temp_13_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_rr_irts_brake_4_rr_rotor_temp_13_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_rr_irts_brake_4_rr_rotor_temp_13_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_rr_irts_brake_4_rr_rotor_temp_14_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_rr_irts_brake_4_rr_rotor_temp_14_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_rr_irts_brake_4_rr_rotor_temp_14_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_rr_irts_brake_4_rr_rotor_temp_15_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_rr_irts_brake_4_rr_rotor_temp_15_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_rr_irts_brake_4_rr_rotor_temp_15_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_rr_irts_brake_4_rr_rotor_temp_16_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_rr_irts_brake_4_rr_rotor_temp_16_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_rr_irts_brake_4_rr_rotor_temp_16_is_in_range(uint16_t value);

/**
 * Pack message Status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_status_pack(
    uint8_t *dst_p,
    const struct master_dbc_status_t *src_p,
    size_t size);

/**
 * Unpack message Status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_status_unpack(
    struct master_dbc_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_status_init(struct master_dbc_status_t *msg_p);

/**
 * Pack message Faults.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_faults_pack(
    uint8_t *dst_p,
    const struct master_dbc_faults_t *src_p,
    size_t size);

/**
 * Unpack message Faults.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_faults_unpack(
    struct master_dbc_faults_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Faults.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_faults_init(struct master_dbc_faults_t *msg_p);

/**
 * Pack message Dashboard.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_dashboard_pack(
    uint8_t *dst_p,
    const struct master_dbc_dashboard_t *src_p,
    size_t size);

/**
 * Unpack message Dashboard.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_dashboard_unpack(
    struct master_dbc_dashboard_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Dashboard.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_dashboard_init(struct master_dbc_dashboard_t *msg_p);

/**
 * Pack message Temp1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_temp1_pack(
    uint8_t *dst_p,
    const struct master_dbc_temp1_t *src_p,
    size_t size);

/**
 * Unpack message Temp1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_temp1_unpack(
    struct master_dbc_temp1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Temp1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_temp1_init(struct master_dbc_temp1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_temp1_temp1_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_temp1_temp1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_temp1_temp1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_temp1_temp2_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_temp1_temp2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_temp1_temp2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_temp1_temp3_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_temp1_temp3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_temp1_temp3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_temp1_temp4_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_temp1_temp4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_temp1_temp4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_temp1_temp5_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_temp1_temp5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_temp1_temp5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_temp1_temp6_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_temp1_temp6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_temp1_temp6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_temp1_temp7_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_temp1_temp7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_temp1_temp7_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_temp1_temp8_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_temp1_temp8_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_temp1_temp8_is_in_range(uint8_t value);

/**
 * Pack message Temp2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_temp2_pack(
    uint8_t *dst_p,
    const struct master_dbc_temp2_t *src_p,
    size_t size);

/**
 * Unpack message Temp2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_temp2_unpack(
    struct master_dbc_temp2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Temp2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_temp2_init(struct master_dbc_temp2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_temp2_temp9_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_temp2_temp9_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_temp2_temp9_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_temp2_temp10_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_temp2_temp10_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_temp2_temp10_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_temp2_temp11_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_temp2_temp11_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_temp2_temp11_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_temp2_temp12_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_temp2_temp12_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_temp2_temp12_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_temp2_temp13_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_temp2_temp13_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_temp2_temp13_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_temp2_temp14_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_temp2_temp14_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_temp2_temp14_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_temp2_temp15_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_temp2_temp15_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_temp2_temp15_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_temp2_temp16_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_temp2_temp16_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_temp2_temp16_is_in_range(uint8_t value);

/**
 * Pack message Temp3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_temp3_pack(
    uint8_t *dst_p,
    const struct master_dbc_temp3_t *src_p,
    size_t size);

/**
 * Unpack message Temp3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_temp3_unpack(
    struct master_dbc_temp3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Temp3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_temp3_init(struct master_dbc_temp3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_temp3_temp17_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_temp3_temp17_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_temp3_temp17_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_temp3_temp18_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_temp3_temp18_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_temp3_temp18_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_temp3_temp19_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_temp3_temp19_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_temp3_temp19_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_temp3_temp20_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_temp3_temp20_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_temp3_temp20_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_temp3_temp21_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_temp3_temp21_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_temp3_temp21_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_temp3_temp22_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_temp3_temp22_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_temp3_temp22_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_temp3_temp23_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_temp3_temp23_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_temp3_temp23_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_temp3_temp24_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_temp3_temp24_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_temp3_temp24_is_in_range(uint8_t value);

/**
 * Pack message Temp4.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_temp4_pack(
    uint8_t *dst_p,
    const struct master_dbc_temp4_t *src_p,
    size_t size);

/**
 * Unpack message Temp4.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_temp4_unpack(
    struct master_dbc_temp4_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Temp4.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_temp4_init(struct master_dbc_temp4_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_temp4_temp25_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_temp4_temp25_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_temp4_temp25_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_temp4_temp26_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_temp4_temp26_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_temp4_temp26_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_temp4_temp27_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_temp4_temp27_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_temp4_temp27_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_temp4_temp28_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_temp4_temp28_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_temp4_temp28_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_temp4_temp29_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_temp4_temp29_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_temp4_temp29_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_temp4_temp30_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_temp4_temp30_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_temp4_temp30_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_temp4_temp31_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_temp4_temp31_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_temp4_temp31_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_temp4_temp32_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_temp4_temp32_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_temp4_temp32_is_in_range(uint8_t value);

/**
 * Pack message Temp5.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_temp5_pack(
    uint8_t *dst_p,
    const struct master_dbc_temp5_t *src_p,
    size_t size);

/**
 * Unpack message Temp5.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_temp5_unpack(
    struct master_dbc_temp5_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Temp5.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_temp5_init(struct master_dbc_temp5_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_temp5_temp33_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_temp5_temp33_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_temp5_temp33_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_temp5_temp34_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_temp5_temp34_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_temp5_temp34_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_temp5_temp35_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_temp5_temp35_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_temp5_temp35_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_temp5_temp36_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_temp5_temp36_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_temp5_temp36_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_temp5_temp37_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_temp5_temp37_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_temp5_temp37_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_temp5_temp38_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_temp5_temp38_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_temp5_temp38_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_temp5_temp39_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_temp5_temp39_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_temp5_temp39_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_temp5_temp40_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_temp5_temp40_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_temp5_temp40_is_in_range(uint8_t value);

/**
 * Pack message Temp6.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_temp6_pack(
    uint8_t *dst_p,
    const struct master_dbc_temp6_t *src_p,
    size_t size);

/**
 * Unpack message Temp6.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_temp6_unpack(
    struct master_dbc_temp6_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Temp6.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_temp6_init(struct master_dbc_temp6_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_temp6_temp41_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_temp6_temp41_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_temp6_temp41_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_temp6_temp42_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_temp6_temp42_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_temp6_temp42_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_temp6_temp43_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_temp6_temp43_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_temp6_temp43_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_temp6_temp44_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_temp6_temp44_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_temp6_temp44_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_temp6_temp45_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_temp6_temp45_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_temp6_temp45_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_temp6_temp46_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_temp6_temp46_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_temp6_temp46_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_temp6_temp47_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_temp6_temp47_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_temp6_temp47_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_temp6_temp48_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_temp6_temp48_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_temp6_temp48_is_in_range(uint8_t value);

/**
 * Pack message Voltage1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_voltage1_pack(
    uint8_t *dst_p,
    const struct master_dbc_voltage1_t *src_p,
    size_t size);

/**
 * Unpack message Voltage1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_voltage1_unpack(
    struct master_dbc_voltage1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Voltage1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_voltage1_init(struct master_dbc_voltage1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage1_cell1_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage1_cell1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage1_cell1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage1_cell2_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage1_cell2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage1_cell2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage1_cell3_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage1_cell3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage1_cell3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage1_cell4_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage1_cell4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage1_cell4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage1_cell5_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage1_cell5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage1_cell5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage1_cell6_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage1_cell6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage1_cell6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage1_cell7_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage1_cell7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage1_cell7_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage1_cell8_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage1_cell8_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage1_cell8_is_in_range(uint8_t value);

/**
 * Pack message Voltage2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_voltage2_pack(
    uint8_t *dst_p,
    const struct master_dbc_voltage2_t *src_p,
    size_t size);

/**
 * Unpack message Voltage2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_voltage2_unpack(
    struct master_dbc_voltage2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Voltage2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_voltage2_init(struct master_dbc_voltage2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage2_cell9_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage2_cell9_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage2_cell9_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage2_cell10_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage2_cell10_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage2_cell10_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage2_cell11_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage2_cell11_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage2_cell11_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage2_cell12_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage2_cell12_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage2_cell12_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage2_cell13_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage2_cell13_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage2_cell13_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage2_cell14_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage2_cell14_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage2_cell14_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage2_cell15_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage2_cell15_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage2_cell15_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage2_cell16_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage2_cell16_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage2_cell16_is_in_range(uint8_t value);

/**
 * Pack message Voltage3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_voltage3_pack(
    uint8_t *dst_p,
    const struct master_dbc_voltage3_t *src_p,
    size_t size);

/**
 * Unpack message Voltage3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_voltage3_unpack(
    struct master_dbc_voltage3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Voltage3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_voltage3_init(struct master_dbc_voltage3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage3_cell17_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage3_cell17_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage3_cell17_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage3_cell18_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage3_cell18_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage3_cell18_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage3_cell19_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage3_cell19_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage3_cell19_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage3_cell20_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage3_cell20_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage3_cell20_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage3_cell21_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage3_cell21_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage3_cell21_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage3_cell22_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage3_cell22_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage3_cell22_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage3_cell23_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage3_cell23_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage3_cell23_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage3_cell24_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage3_cell24_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage3_cell24_is_in_range(uint8_t value);

/**
 * Pack message Voltage4.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_voltage4_pack(
    uint8_t *dst_p,
    const struct master_dbc_voltage4_t *src_p,
    size_t size);

/**
 * Unpack message Voltage4.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_voltage4_unpack(
    struct master_dbc_voltage4_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Voltage4.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_voltage4_init(struct master_dbc_voltage4_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage4_cell25_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage4_cell25_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage4_cell25_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage4_cell26_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage4_cell26_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage4_cell26_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage4_cell27_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage4_cell27_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage4_cell27_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage4_cell28_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage4_cell28_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage4_cell28_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage4_cell29_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage4_cell29_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage4_cell29_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage4_cell30_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage4_cell30_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage4_cell30_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage4_cell31_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage4_cell31_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage4_cell31_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage4_cell32_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage4_cell32_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage4_cell32_is_in_range(uint8_t value);

/**
 * Pack message Voltage5.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_voltage5_pack(
    uint8_t *dst_p,
    const struct master_dbc_voltage5_t *src_p,
    size_t size);

/**
 * Unpack message Voltage5.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_voltage5_unpack(
    struct master_dbc_voltage5_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Voltage5.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_voltage5_init(struct master_dbc_voltage5_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage5_cell33_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage5_cell33_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage5_cell33_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage5_cell34_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage5_cell34_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage5_cell34_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage5_cell35_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage5_cell35_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage5_cell35_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage5_cell36_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage5_cell36_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage5_cell36_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage5_cell37_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage5_cell37_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage5_cell37_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage5_cell38_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage5_cell38_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage5_cell38_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage5_cell39_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage5_cell39_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage5_cell39_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage5_cell40_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage5_cell40_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage5_cell40_is_in_range(uint8_t value);

/**
 * Pack message Voltage6.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_voltage6_pack(
    uint8_t *dst_p,
    const struct master_dbc_voltage6_t *src_p,
    size_t size);

/**
 * Unpack message Voltage6.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_voltage6_unpack(
    struct master_dbc_voltage6_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Voltage6.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_voltage6_init(struct master_dbc_voltage6_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage6_cell41_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage6_cell41_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage6_cell41_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage6_cell42_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage6_cell42_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage6_cell42_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage6_cell43_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage6_cell43_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage6_cell43_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage6_cell44_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage6_cell44_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage6_cell44_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage6_cell45_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage6_cell45_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage6_cell45_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage6_cell46_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage6_cell46_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage6_cell46_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage6_cell47_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage6_cell47_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage6_cell47_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage6_cell48_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage6_cell48_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage6_cell48_is_in_range(uint8_t value);

/**
 * Pack message Voltage7.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_voltage7_pack(
    uint8_t *dst_p,
    const struct master_dbc_voltage7_t *src_p,
    size_t size);

/**
 * Unpack message Voltage7.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_voltage7_unpack(
    struct master_dbc_voltage7_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Voltage7.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_voltage7_init(struct master_dbc_voltage7_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage7_cell49_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage7_cell49_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage7_cell49_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage7_cell50_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage7_cell50_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage7_cell50_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage7_cell51_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage7_cell51_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage7_cell51_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage7_cell52_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage7_cell52_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage7_cell52_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage7_cell53_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage7_cell53_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage7_cell53_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage7_cell54_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage7_cell54_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage7_cell54_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage7_cell55_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage7_cell55_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage7_cell55_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage7_cell56_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage7_cell56_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage7_cell56_is_in_range(uint8_t value);

/**
 * Pack message Voltage8.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_voltage8_pack(
    uint8_t *dst_p,
    const struct master_dbc_voltage8_t *src_p,
    size_t size);

/**
 * Unpack message Voltage8.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_voltage8_unpack(
    struct master_dbc_voltage8_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Voltage8.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_voltage8_init(struct master_dbc_voltage8_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage8_cell57_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage8_cell57_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage8_cell57_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage8_cell58_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage8_cell58_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage8_cell58_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage8_cell59_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage8_cell59_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage8_cell59_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage8_cell60_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage8_cell60_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage8_cell60_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage8_cell61_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage8_cell61_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage8_cell61_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage8_cell62_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage8_cell62_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage8_cell62_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage8_cell63_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage8_cell63_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage8_cell63_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage8_cell64_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage8_cell64_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage8_cell64_is_in_range(uint8_t value);

/**
 * Pack message Voltage9.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_voltage9_pack(
    uint8_t *dst_p,
    const struct master_dbc_voltage9_t *src_p,
    size_t size);

/**
 * Unpack message Voltage9.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_voltage9_unpack(
    struct master_dbc_voltage9_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Voltage9.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_voltage9_init(struct master_dbc_voltage9_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage9_cell65_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage9_cell65_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage9_cell65_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage9_cell66_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage9_cell66_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage9_cell66_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage9_cell67_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage9_cell67_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage9_cell67_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage9_cell68_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage9_cell68_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage9_cell68_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage9_cell69_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage9_cell69_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage9_cell69_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage9_cell70_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage9_cell70_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage9_cell70_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage9_cell71_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage9_cell71_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage9_cell71_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage9_cell72_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage9_cell72_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage9_cell72_is_in_range(uint8_t value);

/**
 * Pack message Voltage10.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_voltage10_pack(
    uint8_t *dst_p,
    const struct master_dbc_voltage10_t *src_p,
    size_t size);

/**
 * Unpack message Voltage10.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_voltage10_unpack(
    struct master_dbc_voltage10_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Voltage10.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_voltage10_init(struct master_dbc_voltage10_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage10_cell73_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage10_cell73_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage10_cell73_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage10_cell74_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage10_cell74_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage10_cell74_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage10_cell75_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage10_cell75_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage10_cell75_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage10_cell76_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage10_cell76_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage10_cell76_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage10_cell77_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage10_cell77_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage10_cell77_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage10_cell78_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage10_cell78_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage10_cell78_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage10_cell79_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage10_cell79_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage10_cell79_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage10_cell80_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage10_cell80_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage10_cell80_is_in_range(uint8_t value);

/**
 * Pack message Voltage11.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_voltage11_pack(
    uint8_t *dst_p,
    const struct master_dbc_voltage11_t *src_p,
    size_t size);

/**
 * Unpack message Voltage11.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_voltage11_unpack(
    struct master_dbc_voltage11_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Voltage11.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_voltage11_init(struct master_dbc_voltage11_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage11_cell81_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage11_cell81_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage11_cell81_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage11_cell82_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage11_cell82_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage11_cell82_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage11_cell83_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage11_cell83_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage11_cell83_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage11_cell84_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage11_cell84_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage11_cell84_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage11_cell85_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage11_cell85_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage11_cell85_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage11_cell86_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage11_cell86_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage11_cell86_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage11_cell87_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage11_cell87_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage11_cell87_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage11_cell88_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage11_cell88_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage11_cell88_is_in_range(uint8_t value);

/**
 * Pack message Voltage12.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_voltage12_pack(
    uint8_t *dst_p,
    const struct master_dbc_voltage12_t *src_p,
    size_t size);

/**
 * Unpack message Voltage12.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_voltage12_unpack(
    struct master_dbc_voltage12_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Voltage12.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_voltage12_init(struct master_dbc_voltage12_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage12_cell89_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage12_cell89_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage12_cell89_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage12_cell90_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage12_cell90_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage12_cell90_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage12_cell91_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage12_cell91_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage12_cell91_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage12_cell92_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage12_cell92_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage12_cell92_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage12_cell93_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage12_cell93_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage12_cell93_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage12_cell94_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage12_cell94_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage12_cell94_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage12_cell95_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage12_cell95_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage12_cell95_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_voltage12_cell96_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_voltage12_cell96_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_voltage12_cell96_is_in_range(uint8_t value);

/**
 * Pack message OrionMSG1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_orion_msg1_pack(
    uint8_t *dst_p,
    const struct master_dbc_orion_msg1_t *src_p,
    size_t size);

/**
 * Unpack message OrionMSG1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_orion_msg1_unpack(
    struct master_dbc_orion_msg1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from OrionMSG1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_orion_msg1_init(struct master_dbc_orion_msg1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t master_dbc_orion_msg1_pack_inst_voltage_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_orion_msg1_pack_inst_voltage_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_orion_msg1_pack_inst_voltage_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_orion_msg1_pack_soc_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_orion_msg1_pack_soc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_orion_msg1_pack_soc_is_in_range(uint8_t value);

/**
 * Pack message OrionMSG2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_orion_msg2_pack(
    uint8_t *dst_p,
    const struct master_dbc_orion_msg2_t *src_p,
    size_t size);

/**
 * Unpack message OrionMSG2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_orion_msg2_unpack(
    struct master_dbc_orion_msg2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from OrionMSG2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_orion_msg2_init(struct master_dbc_orion_msg2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t master_dbc_orion_msg2_pack_high_temp_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_orion_msg2_pack_high_temp_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_orion_msg2_pack_high_temp_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t master_dbc_orion_msg2_pack_low_temp_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_orion_msg2_pack_low_temp_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_orion_msg2_pack_low_temp_is_in_range(int8_t value);

/**
 * Pack message OrionMSG3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_orion_msg3_pack(
    uint8_t *dst_p,
    const struct master_dbc_orion_msg3_t *src_p,
    size_t size);

/**
 * Unpack message OrionMSG3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_orion_msg3_unpack(
    struct master_dbc_orion_msg3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from OrionMSG3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_orion_msg3_init(struct master_dbc_orion_msg3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_orion_msg3_low_cell_voltage_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_orion_msg3_low_cell_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_orion_msg3_low_cell_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_orion_msg3_high_cell_voltage_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_orion_msg3_high_cell_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_orion_msg3_high_cell_voltage_is_in_range(uint16_t value);

/**
 * Pack message M100_VCU_States1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_m100_vcu_states1_pack(
    uint8_t *dst_p,
    const struct master_dbc_m100_vcu_states1_t *src_p,
    size_t size);

/**
 * Unpack message M100_VCU_States1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_m100_vcu_states1_unpack(
    struct master_dbc_m100_vcu_states1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from M100_VCU_States1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_m100_vcu_states1_init(struct master_dbc_m100_vcu_states1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_m100_vcu_states1_run_time_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m100_vcu_states1_run_time_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m100_vcu_states1_run_time_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m100_vcu_states1_drive_mode_state_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m100_vcu_states1_drive_mode_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m100_vcu_states1_drive_mode_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m100_vcu_states1_run_mode_state_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m100_vcu_states1_run_mode_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m100_vcu_states1_run_mode_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m100_vcu_states1_op_state_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m100_vcu_states1_op_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m100_vcu_states1_op_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m100_vcu_states1_start_command_state_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m100_vcu_states1_start_command_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m100_vcu_states1_start_command_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m100_vcu_states1_stop_command_state_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m100_vcu_states1_stop_command_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m100_vcu_states1_stop_command_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m100_vcu_states1_start_safe_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m100_vcu_states1_start_safe_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m100_vcu_states1_start_safe_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m100_vcu_states1_mc1_enable_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m100_vcu_states1_mc1_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m100_vcu_states1_mc1_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m100_vcu_states1_mc2_enable_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m100_vcu_states1_mc2_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m100_vcu_states1_mc2_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m100_vcu_states1_mc3_enable_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m100_vcu_states1_mc3_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m100_vcu_states1_mc3_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m100_vcu_states1_mc4_enable_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m100_vcu_states1_mc4_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m100_vcu_states1_mc4_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m100_vcu_states1_mc_power_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m100_vcu_states1_mc_power_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m100_vcu_states1_mc_power_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m100_vcu_states1_mc1_discharge_cmd_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m100_vcu_states1_mc1_discharge_cmd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m100_vcu_states1_mc1_discharge_cmd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m100_vcu_states1_mc2_discharge_cmd_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m100_vcu_states1_mc2_discharge_cmd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m100_vcu_states1_mc2_discharge_cmd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m100_vcu_states1_mc3_discharge_cmd_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m100_vcu_states1_mc3_discharge_cmd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m100_vcu_states1_mc3_discharge_cmd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m100_vcu_states1_mc4_discharge_cmd_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m100_vcu_states1_mc4_discharge_cmd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m100_vcu_states1_mc4_discharge_cmd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m100_vcu_states1_hvil_main_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m100_vcu_states1_hvil_main_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m100_vcu_states1_hvil_main_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m100_vcu_states1_hvil_charge_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m100_vcu_states1_hvil_charge_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m100_vcu_states1_hvil_charge_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m100_vcu_states1_pump_cont_x_check_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m100_vcu_states1_pump_cont_x_check_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m100_vcu_states1_pump_cont_x_check_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m100_vcu_states1_mc1_cont_enable_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m100_vcu_states1_mc1_cont_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m100_vcu_states1_mc1_cont_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m100_vcu_states1_mc2_cont_enable_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m100_vcu_states1_mc2_cont_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m100_vcu_states1_mc2_cont_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m100_vcu_states1_mc3_cont_enable_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m100_vcu_states1_mc3_cont_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m100_vcu_states1_mc3_cont_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m100_vcu_states1_mc4_cont_enable_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m100_vcu_states1_mc4_cont_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m100_vcu_states1_mc4_cont_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m100_vcu_states1_mc1_dc_voltage_safe_state_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m100_vcu_states1_mc1_dc_voltage_safe_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m100_vcu_states1_mc1_dc_voltage_safe_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m100_vcu_states1_mc2_dc_voltage_safe_state_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m100_vcu_states1_mc2_dc_voltage_safe_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m100_vcu_states1_mc2_dc_voltage_safe_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m100_vcu_states1_mc3_dc_voltage_safe_state_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m100_vcu_states1_mc3_dc_voltage_safe_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m100_vcu_states1_mc3_dc_voltage_safe_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m100_vcu_states1_mc4_dc_voltage_safe_state_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m100_vcu_states1_mc4_dc_voltage_safe_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m100_vcu_states1_mc4_dc_voltage_safe_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m100_vcu_states1_mc1_hv_detect_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m100_vcu_states1_mc1_hv_detect_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m100_vcu_states1_mc1_hv_detect_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m100_vcu_states1_mc1_neg_fb_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m100_vcu_states1_mc1_neg_fb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m100_vcu_states1_mc1_neg_fb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m100_vcu_states1_mc1_pos_fb_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m100_vcu_states1_mc1_pos_fb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m100_vcu_states1_mc1_pos_fb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m100_vcu_states1_mc1_pre_chg_fb_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m100_vcu_states1_mc1_pre_chg_fb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m100_vcu_states1_mc1_pre_chg_fb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m100_vcu_states1_mc2_hv_detect_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m100_vcu_states1_mc2_hv_detect_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m100_vcu_states1_mc2_hv_detect_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m100_vcu_states1_mc2_neg_fb_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m100_vcu_states1_mc2_neg_fb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m100_vcu_states1_mc2_neg_fb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m100_vcu_states1_mc2_pos_fb_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m100_vcu_states1_mc2_pos_fb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m100_vcu_states1_mc2_pos_fb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m100_vcu_states1_mc2_pre_chg_fb_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m100_vcu_states1_mc2_pre_chg_fb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m100_vcu_states1_mc2_pre_chg_fb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m100_vcu_states1_mc3_hv_detect_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m100_vcu_states1_mc3_hv_detect_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m100_vcu_states1_mc3_hv_detect_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m100_vcu_states1_mc3_neg_fb_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m100_vcu_states1_mc3_neg_fb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m100_vcu_states1_mc3_neg_fb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m100_vcu_states1_mc3_pos_fb_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m100_vcu_states1_mc3_pos_fb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m100_vcu_states1_mc3_pos_fb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m100_vcu_states1_mc3_pre_chg_fb_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m100_vcu_states1_mc3_pre_chg_fb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m100_vcu_states1_mc3_pre_chg_fb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m100_vcu_states1_mc4_hv_detect_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m100_vcu_states1_mc4_hv_detect_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m100_vcu_states1_mc4_hv_detect_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m100_vcu_states1_mc4_neg_fb_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m100_vcu_states1_mc4_neg_fb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m100_vcu_states1_mc4_neg_fb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m100_vcu_states1_mc4_pos_fb_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m100_vcu_states1_mc4_pos_fb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m100_vcu_states1_mc4_pos_fb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m100_vcu_states1_mc4_pre_chg_fb_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m100_vcu_states1_mc4_pre_chg_fb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m100_vcu_states1_mc4_pre_chg_fb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m100_vcu_states1_performance_level_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m100_vcu_states1_performance_level_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m100_vcu_states1_performance_level_is_in_range(uint8_t value);

/**
 * Pack message M102_VCU_States2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_m102_vcu_states2_pack(
    uint8_t *dst_p,
    const struct master_dbc_m102_vcu_states2_t *src_p,
    size_t size);

/**
 * Unpack message M102_VCU_States2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_m102_vcu_states2_unpack(
    struct master_dbc_m102_vcu_states2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from M102_VCU_States2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_m102_vcu_states2_init(struct master_dbc_m102_vcu_states2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m102_vcu_states2_vcu_12_v_input_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m102_vcu_states2_vcu_12_v_input_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m102_vcu_states2_vcu_12_v_input_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m102_vcu_states2_vcu_5_v_output_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m102_vcu_states2_vcu_5_v_output_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m102_vcu_states2_vcu_5_v_output_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m102_vcu_states2_mc1_pos_cmd_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m102_vcu_states2_mc1_pos_cmd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m102_vcu_states2_mc1_pos_cmd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m102_vcu_states2_mc1_pre_chg_cmd_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m102_vcu_states2_mc1_pre_chg_cmd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m102_vcu_states2_mc1_pre_chg_cmd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m102_vcu_states2_mc1_pre_chg_complete_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m102_vcu_states2_mc1_pre_chg_complete_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m102_vcu_states2_mc1_pre_chg_complete_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m102_vcu_states2_mc2_pos_cmd_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m102_vcu_states2_mc2_pos_cmd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m102_vcu_states2_mc2_pos_cmd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m102_vcu_states2_mc2_pre_chg_cmd_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m102_vcu_states2_mc2_pre_chg_cmd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m102_vcu_states2_mc2_pre_chg_cmd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m102_vcu_states2_mc2_pre_chg_complete_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m102_vcu_states2_mc2_pre_chg_complete_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m102_vcu_states2_mc2_pre_chg_complete_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m102_vcu_states2_mc3_pos_cmd_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m102_vcu_states2_mc3_pos_cmd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m102_vcu_states2_mc3_pos_cmd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m102_vcu_states2_mc3_pre_chg_cmd_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m102_vcu_states2_mc3_pre_chg_cmd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m102_vcu_states2_mc3_pre_chg_cmd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m102_vcu_states2_mc3_pre_chg_complete_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m102_vcu_states2_mc3_pre_chg_complete_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m102_vcu_states2_mc3_pre_chg_complete_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m102_vcu_states2_mc4_pos_cmd_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m102_vcu_states2_mc4_pos_cmd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m102_vcu_states2_mc4_pos_cmd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m102_vcu_states2_mc4_pre_chg_cmd_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m102_vcu_states2_mc4_pre_chg_cmd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m102_vcu_states2_mc4_pre_chg_cmd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m102_vcu_states2_mc4_pre_chg_complete_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m102_vcu_states2_mc4_pre_chg_complete_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m102_vcu_states2_mc4_pre_chg_complete_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m102_vcu_states2_creep_mode_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m102_vcu_states2_creep_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m102_vcu_states2_creep_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m102_vcu_states2_idle_mode_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m102_vcu_states2_idle_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m102_vcu_states2_idle_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m102_vcu_states2_burnout_mode_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m102_vcu_states2_burnout_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m102_vcu_states2_burnout_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m102_vcu_states2_launch_mode_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m102_vcu_states2_launch_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m102_vcu_states2_launch_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m102_vcu_states2_inv_control_mode_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m102_vcu_states2_inv_control_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m102_vcu_states2_inv_control_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m102_vcu_states2_speed_mode_allowed_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m102_vcu_states2_speed_mode_allowed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m102_vcu_states2_speed_mode_allowed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m102_vcu_states2_cool_fan1_on_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m102_vcu_states2_cool_fan1_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m102_vcu_states2_cool_fan1_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m102_vcu_states2_cool_fan2_on_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m102_vcu_states2_cool_fan2_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m102_vcu_states2_cool_fan2_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m102_vcu_states2_oil_pump1_on_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m102_vcu_states2_oil_pump1_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m102_vcu_states2_oil_pump1_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m102_vcu_states2_cool_pump1_cntrl_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m102_vcu_states2_cool_pump1_cntrl_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m102_vcu_states2_cool_pump1_cntrl_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m102_vcu_states2_cool_pump2_cntrl_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m102_vcu_states2_cool_pump2_cntrl_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m102_vcu_states2_cool_pump2_cntrl_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m102_vcu_states2_cool_pump_wake_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m102_vcu_states2_cool_pump_wake_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m102_vcu_states2_cool_pump_wake_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m102_vcu_states2_trans_brake_cntrl_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m102_vcu_states2_trans_brake_cntrl_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m102_vcu_states2_trans_brake_cntrl_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m102_vcu_states2_line_lock_cntrl_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m102_vcu_states2_line_lock_cntrl_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m102_vcu_states2_line_lock_cntrl_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m102_vcu_states2_cool_pump_spd_target_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m102_vcu_states2_cool_pump_spd_target_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m102_vcu_states2_cool_pump_spd_target_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m102_vcu_states2_shift_sol1_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m102_vcu_states2_shift_sol1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m102_vcu_states2_shift_sol1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m102_vcu_states2_shift_sol2_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m102_vcu_states2_shift_sol2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m102_vcu_states2_shift_sol2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m102_vcu_states2_shift_sol_cntrl_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m102_vcu_states2_shift_sol_cntrl_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m102_vcu_states2_shift_sol_cntrl_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m102_vcu_states2_imd_state_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m102_vcu_states2_imd_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m102_vcu_states2_imd_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m102_vcu_states2_inertia_switch_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m102_vcu_states2_inertia_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m102_vcu_states2_inertia_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m102_vcu_states2_line_lock_switch_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m102_vcu_states2_line_lock_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m102_vcu_states2_line_lock_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m102_vcu_states2_trans_brake_switch_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m102_vcu_states2_trans_brake_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m102_vcu_states2_trans_brake_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m102_vcu_states2_brake_lamps_cntrl_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m102_vcu_states2_brake_lamps_cntrl_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m102_vcu_states2_brake_lamps_cntrl_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m102_vcu_states2_head_lamps_cntrl_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m102_vcu_states2_head_lamps_cntrl_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m102_vcu_states2_head_lamps_cntrl_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m102_vcu_states2_hv_safety_light_cntrl_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m102_vcu_states2_hv_safety_light_cntrl_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m102_vcu_states2_hv_safety_light_cntrl_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m102_vcu_states2_park_lamps_cntrl_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m102_vcu_states2_park_lamps_cntrl_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m102_vcu_states2_park_lamps_cntrl_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m102_vcu_states2_reverse_lamps_cntrl_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m102_vcu_states2_reverse_lamps_cntrl_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m102_vcu_states2_reverse_lamps_cntrl_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m102_vcu_states2_acc_light_cntrl_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m102_vcu_states2_acc_light_cntrl_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m102_vcu_states2_acc_light_cntrl_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m102_vcu_states2_acc_power_cntrl_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m102_vcu_states2_acc_power_cntrl_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m102_vcu_states2_acc_power_cntrl_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m102_vcu_states2_charge_contactor_cntrl_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m102_vcu_states2_charge_contactor_cntrl_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m102_vcu_states2_charge_contactor_cntrl_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m102_vcu_states2_contactors_enabled_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m102_vcu_states2_contactors_enabled_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m102_vcu_states2_contactors_enabled_is_in_range(uint8_t value);

/**
 * Pack message M104_VCU_States3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_m104_vcu_states3_pack(
    uint8_t *dst_p,
    const struct master_dbc_m104_vcu_states3_t *src_p,
    size_t size);

/**
 * Unpack message M104_VCU_States3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_m104_vcu_states3_unpack(
    struct master_dbc_m104_vcu_states3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from M104_VCU_States3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_m104_vcu_states3_init(struct master_dbc_m104_vcu_states3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m104_vcu_states3_lim_mult_batt_dcl_active_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m104_vcu_states3_lim_mult_batt_dcl_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m104_vcu_states3_lim_mult_batt_dcl_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m104_vcu_states3_lim_mult_batt_soc_active_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m104_vcu_states3_lim_mult_batt_soc_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m104_vcu_states3_lim_mult_batt_soc_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m104_vcu_states3_lim_mult_cell_volt_max_active_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m104_vcu_states3_lim_mult_cell_volt_max_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m104_vcu_states3_lim_mult_cell_volt_max_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m104_vcu_states3_lim_mult_cell_volt_min_active_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m104_vcu_states3_lim_mult_cell_volt_min_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m104_vcu_states3_lim_mult_cell_volt_min_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m104_vcu_states3_lim_mult_drive_shaft_spd_active_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m104_vcu_states3_lim_mult_drive_shaft_spd_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m104_vcu_states3_lim_mult_drive_shaft_spd_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m104_vcu_states3_lim_mult_launch_time_active_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m104_vcu_states3_lim_mult_launch_time_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m104_vcu_states3_lim_mult_launch_time_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m104_vcu_states3_lim_mult_mc1_curr_active_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m104_vcu_states3_lim_mult_mc1_curr_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m104_vcu_states3_lim_mult_mc1_curr_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m104_vcu_states3_lim_mult_mc1_temp_active_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m104_vcu_states3_lim_mult_mc1_temp_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m104_vcu_states3_lim_mult_mc1_temp_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m104_vcu_states3_lim_mult_mc2_curr_active_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m104_vcu_states3_lim_mult_mc2_curr_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m104_vcu_states3_lim_mult_mc2_curr_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m104_vcu_states3_lim_mult_mc2_temp_active_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m104_vcu_states3_lim_mult_mc2_temp_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m104_vcu_states3_lim_mult_mc2_temp_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m104_vcu_states3_lim_mult_mc3_curr_active_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m104_vcu_states3_lim_mult_mc3_curr_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m104_vcu_states3_lim_mult_mc3_curr_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m104_vcu_states3_lim_mult_mc3_temp_active_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m104_vcu_states3_lim_mult_mc3_temp_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m104_vcu_states3_lim_mult_mc3_temp_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m104_vcu_states3_lim_mult_mc4_curr_active_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m104_vcu_states3_lim_mult_mc4_curr_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m104_vcu_states3_lim_mult_mc4_curr_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m104_vcu_states3_lim_mult_mc4_temp_active_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m104_vcu_states3_lim_mult_mc4_temp_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m104_vcu_states3_lim_mult_mc4_temp_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m104_vcu_states3_lim_mult_motor1_spd_lo_active_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m104_vcu_states3_lim_mult_motor1_spd_lo_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m104_vcu_states3_lim_mult_motor1_spd_lo_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m104_vcu_states3_lim_mult_motor1_temp_active_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m104_vcu_states3_lim_mult_motor1_temp_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m104_vcu_states3_lim_mult_motor1_temp_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m104_vcu_states3_lim_mult_motor2_spd_lo_active_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m104_vcu_states3_lim_mult_motor2_spd_lo_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m104_vcu_states3_lim_mult_motor2_spd_lo_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m104_vcu_states3_lim_mult_motor2_temp_active_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m104_vcu_states3_lim_mult_motor2_temp_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m104_vcu_states3_lim_mult_motor2_temp_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m104_vcu_states3_lim_mult_motor3_spd_lo_active_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m104_vcu_states3_lim_mult_motor3_spd_lo_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m104_vcu_states3_lim_mult_motor3_spd_lo_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m104_vcu_states3_lim_mult_motor3_temp_active_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m104_vcu_states3_lim_mult_motor3_temp_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m104_vcu_states3_lim_mult_motor3_temp_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m104_vcu_states3_lim_mult_motor4_spd_lo_active_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m104_vcu_states3_lim_mult_motor4_spd_lo_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m104_vcu_states3_lim_mult_motor4_spd_lo_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m104_vcu_states3_lim_mult_motor4_temp_active_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m104_vcu_states3_lim_mult_motor4_temp_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m104_vcu_states3_lim_mult_motor4_temp_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m104_vcu_states3_lim_mult_over_rev_active_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m104_vcu_states3_lim_mult_over_rev_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m104_vcu_states3_lim_mult_over_rev_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m104_vcu_states3_lim_mult_pack_current_active_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m104_vcu_states3_lim_mult_pack_current_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m104_vcu_states3_lim_mult_pack_current_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m104_vcu_states3_lim_mult_pack_temp_hi_active_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m104_vcu_states3_lim_mult_pack_temp_hi_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m104_vcu_states3_lim_mult_pack_temp_hi_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m104_vcu_states3_lim_mult_pack_temp_lo_active_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m104_vcu_states3_lim_mult_pack_temp_lo_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m104_vcu_states3_lim_mult_pack_temp_lo_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m104_vcu_states3_lim_mult_pack_voltage_active_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m104_vcu_states3_lim_mult_pack_voltage_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m104_vcu_states3_lim_mult_pack_voltage_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m104_vcu_states3_lim_mult_shift1_tq_active_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m104_vcu_states3_lim_mult_shift1_tq_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m104_vcu_states3_lim_mult_shift1_tq_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m104_vcu_states3_lim_mult_shift2_tq_active_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m104_vcu_states3_lim_mult_shift2_tq_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m104_vcu_states3_lim_mult_shift2_tq_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m104_vcu_states3_lim_mult_shift3_tq_active_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m104_vcu_states3_lim_mult_shift3_tq_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m104_vcu_states3_lim_mult_shift3_tq_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m104_vcu_states3_lim_mult_shift4_tq_active_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m104_vcu_states3_lim_mult_shift4_tq_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m104_vcu_states3_lim_mult_shift4_tq_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m104_vcu_states3_lim_mult_shift5_tq_active_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m104_vcu_states3_lim_mult_shift5_tq_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m104_vcu_states3_lim_mult_shift5_tq_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m104_vcu_states3_lim_mult_veh_spd_hi_active_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m104_vcu_states3_lim_mult_veh_spd_hi_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m104_vcu_states3_lim_mult_veh_spd_hi_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m104_vcu_states3_lim_mult_veh_spd_lo_active_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m104_vcu_states3_lim_mult_veh_spd_lo_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m104_vcu_states3_lim_mult_veh_spd_lo_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m104_vcu_states3_lim_mult_mc1_curr_ramp_active_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m104_vcu_states3_lim_mult_mc1_curr_ramp_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m104_vcu_states3_lim_mult_mc1_curr_ramp_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m104_vcu_states3_lim_mult_mc2_curr_ramp_active_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m104_vcu_states3_lim_mult_mc2_curr_ramp_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m104_vcu_states3_lim_mult_mc2_curr_ramp_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m104_vcu_states3_lim_mult_mc3_curr_ramp_active_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m104_vcu_states3_lim_mult_mc3_curr_ramp_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m104_vcu_states3_lim_mult_mc3_curr_ramp_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m104_vcu_states3_lim_mult_mc4_curr_ramp_active_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m104_vcu_states3_lim_mult_mc4_curr_ramp_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m104_vcu_states3_lim_mult_mc4_curr_ramp_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m104_vcu_states3_launch_timer_running_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m104_vcu_states3_launch_timer_running_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m104_vcu_states3_launch_timer_running_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m104_vcu_states3_launch_ramp_time_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m104_vcu_states3_launch_ramp_time_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m104_vcu_states3_launch_ramp_time_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_m104_vcu_states3_run_time_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m104_vcu_states3_run_time_counter_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m104_vcu_states3_run_time_counter_is_in_range(uint16_t value);

/**
 * Pack message M106_DriverInputs1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_m106_driver_inputs1_pack(
    uint8_t *dst_p,
    const struct master_dbc_m106_driver_inputs1_t *src_p,
    size_t size);

/**
 * Unpack message M106_DriverInputs1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_m106_driver_inputs1_unpack(
    struct master_dbc_m106_driver_inputs1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from M106_DriverInputs1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_m106_driver_inputs1_init(struct master_dbc_m106_driver_inputs1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m106_driver_inputs1_accel_pedal_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m106_driver_inputs1_accel_pedal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m106_driver_inputs1_accel_pedal_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m106_driver_inputs1_accel_pedal1_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m106_driver_inputs1_accel_pedal1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m106_driver_inputs1_accel_pedal1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m106_driver_inputs1_accel_pedal2_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m106_driver_inputs1_accel_pedal2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m106_driver_inputs1_accel_pedal2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m106_driver_inputs1_accel_pedal_x_check_diff_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m106_driver_inputs1_accel_pedal_x_check_diff_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m106_driver_inputs1_accel_pedal_x_check_diff_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m106_driver_inputs1_accel_pedal_valid_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m106_driver_inputs1_accel_pedal_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m106_driver_inputs1_accel_pedal_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m106_driver_inputs1_accel_pedal1_valid_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m106_driver_inputs1_accel_pedal1_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m106_driver_inputs1_accel_pedal1_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m106_driver_inputs1_accel_pedal2_valid_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m106_driver_inputs1_accel_pedal2_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m106_driver_inputs1_accel_pedal2_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m106_driver_inputs1_brake_switch_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m106_driver_inputs1_brake_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m106_driver_inputs1_brake_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m106_driver_inputs1_brake_switch1_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m106_driver_inputs1_brake_switch1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m106_driver_inputs1_brake_switch1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m106_driver_inputs1_brake_switch2_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m106_driver_inputs1_brake_switch2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m106_driver_inputs1_brake_switch2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m106_driver_inputs1_ignition_switch_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m106_driver_inputs1_ignition_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m106_driver_inputs1_ignition_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m106_driver_inputs1_start_switch_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m106_driver_inputs1_start_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m106_driver_inputs1_start_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m106_driver_inputs1_manual_regen_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m106_driver_inputs1_manual_regen_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m106_driver_inputs1_manual_regen_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m106_driver_inputs1_manual_regen1_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m106_driver_inputs1_manual_regen1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m106_driver_inputs1_manual_regen1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m106_driver_inputs1_manual_regen2_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m106_driver_inputs1_manual_regen2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m106_driver_inputs1_manual_regen2_is_in_range(uint8_t value);

/**
 * Pack message M108_DriverInputs2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_m108_driver_inputs2_pack(
    uint8_t *dst_p,
    const struct master_dbc_m108_driver_inputs2_t *src_p,
    size_t size);

/**
 * Unpack message M108_DriverInputs2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_m108_driver_inputs2_unpack(
    struct master_dbc_m108_driver_inputs2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from M108_DriverInputs2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_m108_driver_inputs2_init(struct master_dbc_m108_driver_inputs2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m108_driver_inputs2_man_regen_x_check_diff_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m108_driver_inputs2_man_regen_x_check_diff_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m108_driver_inputs2_man_regen_x_check_diff_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m108_driver_inputs2_manual_regen1_valid_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m108_driver_inputs2_manual_regen1_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m108_driver_inputs2_manual_regen1_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m108_driver_inputs2_manual_regen2_valid_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m108_driver_inputs2_manual_regen2_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m108_driver_inputs2_manual_regen2_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m108_driver_inputs2_park_switch_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m108_driver_inputs2_park_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m108_driver_inputs2_park_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m108_driver_inputs2_neutral_switch_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m108_driver_inputs2_neutral_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m108_driver_inputs2_neutral_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m108_driver_inputs2_drive_switch_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m108_driver_inputs2_drive_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m108_driver_inputs2_drive_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m108_driver_inputs2_reverse_switch_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m108_driver_inputs2_reverse_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m108_driver_inputs2_reverse_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m108_driver_inputs2_head_lamp_switch_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m108_driver_inputs2_head_lamp_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m108_driver_inputs2_head_lamp_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m108_driver_inputs2_park_lamp_switch_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m108_driver_inputs2_park_lamp_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m108_driver_inputs2_park_lamp_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m108_driver_inputs2_enable_switch_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m108_driver_inputs2_enable_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m108_driver_inputs2_enable_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m108_driver_inputs2_cooling_fan_ord_switch_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m108_driver_inputs2_cooling_fan_ord_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m108_driver_inputs2_cooling_fan_ord_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m108_driver_inputs2_cooling_pump_ord_switch_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m108_driver_inputs2_cooling_pump_ord_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m108_driver_inputs2_cooling_pump_ord_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m108_driver_inputs2_heater_switch_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m108_driver_inputs2_heater_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m108_driver_inputs2_heater_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m108_driver_inputs2_ac_switch_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m108_driver_inputs2_ac_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m108_driver_inputs2_ac_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m108_driver_inputs2_acc_light_switch_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m108_driver_inputs2_acc_light_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m108_driver_inputs2_acc_light_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m108_driver_inputs2_wake_switch_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m108_driver_inputs2_wake_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m108_driver_inputs2_wake_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m108_driver_inputs2_logging_switch_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m108_driver_inputs2_logging_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m108_driver_inputs2_logging_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m108_driver_inputs2_cc_cancel_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m108_driver_inputs2_cc_cancel_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m108_driver_inputs2_cc_cancel_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m108_driver_inputs2_cc_on_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m108_driver_inputs2_cc_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m108_driver_inputs2_cc_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m108_driver_inputs2_cc_rsm_acc_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m108_driver_inputs2_cc_rsm_acc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m108_driver_inputs2_cc_rsm_acc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m108_driver_inputs2_cc_set_cst_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m108_driver_inputs2_cc_set_cst_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m108_driver_inputs2_cc_set_cst_is_in_range(uint8_t value);

/**
 * Pack message M112_VehicleInputs1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_m112_vehicle_inputs1_pack(
    uint8_t *dst_p,
    const struct master_dbc_m112_vehicle_inputs1_t *src_p,
    size_t size);

/**
 * Unpack message M112_VehicleInputs1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_m112_vehicle_inputs1_unpack(
    struct master_dbc_m112_vehicle_inputs1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from M112_VehicleInputs1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_m112_vehicle_inputs1_init(struct master_dbc_m112_vehicle_inputs1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_m112_vehicle_inputs1_brake_pressure_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m112_vehicle_inputs1_brake_pressure_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m112_vehicle_inputs1_brake_pressure_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_m112_vehicle_inputs1_transmission_pressure_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m112_vehicle_inputs1_transmission_pressure_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m112_vehicle_inputs1_transmission_pressure_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_m112_vehicle_inputs1_wheel_bar_press1_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m112_vehicle_inputs1_wheel_bar_press1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m112_vehicle_inputs1_wheel_bar_press1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_m112_vehicle_inputs1_wheel_bar_press2_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m112_vehicle_inputs1_wheel_bar_press2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m112_vehicle_inputs1_wheel_bar_press2_is_in_range(uint16_t value);

/**
 * Pack message M114_VehicleInputs2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_m114_vehicle_inputs2_pack(
    uint8_t *dst_p,
    const struct master_dbc_m114_vehicle_inputs2_t *src_p,
    size_t size);

/**
 * Unpack message M114_VehicleInputs2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_m114_vehicle_inputs2_unpack(
    struct master_dbc_m114_vehicle_inputs2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from M114_VehicleInputs2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_m114_vehicle_inputs2_init(struct master_dbc_m114_vehicle_inputs2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m114_vehicle_inputs2_transmission_temp_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m114_vehicle_inputs2_transmission_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m114_vehicle_inputs2_transmission_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m114_vehicle_inputs2_coolant_temp1_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m114_vehicle_inputs2_coolant_temp1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m114_vehicle_inputs2_coolant_temp1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t master_dbc_m114_vehicle_inputs2_coolant_temp2_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m114_vehicle_inputs2_coolant_temp2_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m114_vehicle_inputs2_coolant_temp2_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t master_dbc_m114_vehicle_inputs2_ambient_air_temp_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m114_vehicle_inputs2_ambient_air_temp_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m114_vehicle_inputs2_ambient_air_temp_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t master_dbc_m114_vehicle_inputs2_heater_inlet_temp_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m114_vehicle_inputs2_heater_inlet_temp_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m114_vehicle_inputs2_heater_inlet_temp_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t master_dbc_m114_vehicle_inputs2_heater_outlet_temp_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m114_vehicle_inputs2_heater_outlet_temp_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m114_vehicle_inputs2_heater_outlet_temp_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_m114_vehicle_inputs2_ac_pressure_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m114_vehicle_inputs2_ac_pressure_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m114_vehicle_inputs2_ac_pressure_is_in_range(uint16_t value);

/**
 * Pack message M116_VehicleInputs3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_m116_vehicle_inputs3_pack(
    uint8_t *dst_p,
    const struct master_dbc_m116_vehicle_inputs3_t *src_p,
    size_t size);

/**
 * Unpack message M116_VehicleInputs3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_m116_vehicle_inputs3_unpack(
    struct master_dbc_m116_vehicle_inputs3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from M116_VehicleInputs3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_m116_vehicle_inputs3_init(struct master_dbc_m116_vehicle_inputs3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m116_vehicle_inputs3_brake_vac_pressure_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m116_vehicle_inputs3_brake_vac_pressure_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m116_vehicle_inputs3_brake_vac_pressure_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m116_vehicle_inputs3_vehicle_speed_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m116_vehicle_inputs3_vehicle_speed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m116_vehicle_inputs3_vehicle_speed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_m116_vehicle_inputs3_drive_shaft_speed_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m116_vehicle_inputs3_drive_shaft_speed_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m116_vehicle_inputs3_drive_shaft_speed_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m116_vehicle_inputs3_drive_wheel_speed_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m116_vehicle_inputs3_drive_wheel_speed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m116_vehicle_inputs3_drive_wheel_speed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m116_vehicle_inputs3_ground_wheel_speed_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m116_vehicle_inputs3_ground_wheel_speed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m116_vehicle_inputs3_ground_wheel_speed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m116_vehicle_inputs3_tc_slip_measured_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m116_vehicle_inputs3_tc_slip_measured_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m116_vehicle_inputs3_tc_slip_measured_is_in_range(uint8_t value);

/**
 * Pack message M118_VehicleInputs4.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_m118_vehicle_inputs4_pack(
    uint8_t *dst_p,
    const struct master_dbc_m118_vehicle_inputs4_t *src_p,
    size_t size);

/**
 * Unpack message M118_VehicleInputs4.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_m118_vehicle_inputs4_unpack(
    struct master_dbc_m118_vehicle_inputs4_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from M118_VehicleInputs4.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_m118_vehicle_inputs4_init(struct master_dbc_m118_vehicle_inputs4_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t master_dbc_m118_vehicle_inputs4_vehicle_odometer_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m118_vehicle_inputs4_vehicle_odometer_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m118_vehicle_inputs4_vehicle_odometer_is_in_range(uint32_t value);

/**
 * Pack message M120_MotorTorqueData1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_m120_motor_torque_data1_pack(
    uint8_t *dst_p,
    const struct master_dbc_m120_motor_torque_data1_t *src_p,
    size_t size);

/**
 * Unpack message M120_MotorTorqueData1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_m120_motor_torque_data1_unpack(
    struct master_dbc_m120_motor_torque_data1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from M120_MotorTorqueData1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_m120_motor_torque_data1_init(struct master_dbc_m120_motor_torque_data1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m120_motor_torque_data1_motor1_torque_request_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m120_motor_torque_data1_motor1_torque_request_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m120_motor_torque_data1_motor1_torque_request_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_m120_motor_torque_data1_motor1_tq_lim_hi_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m120_motor_torque_data1_motor1_tq_lim_hi_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m120_motor_torque_data1_motor1_tq_lim_hi_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m120_motor_torque_data1_motor1_tq_lim_lo_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m120_motor_torque_data1_motor1_tq_lim_lo_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m120_motor_torque_data1_motor1_tq_lim_lo_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_m120_motor_torque_data1_motor1_tq_table_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m120_motor_torque_data1_motor1_tq_table_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m120_motor_torque_data1_motor1_tq_table_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m120_motor_torque_data1_motor1_tq_lim_mult_hi_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m120_motor_torque_data1_motor1_tq_lim_mult_hi_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m120_motor_torque_data1_motor1_tq_lim_mult_hi_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m120_motor_torque_data1_motor1_tq_lim_mult_lo_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m120_motor_torque_data1_motor1_tq_lim_mult_lo_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m120_motor_torque_data1_motor1_tq_lim_mult_lo_is_in_range(uint8_t value);

/**
 * Pack message M122_MotorTorqueData2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_m122_motor_torque_data2_pack(
    uint8_t *dst_p,
    const struct master_dbc_m122_motor_torque_data2_t *src_p,
    size_t size);

/**
 * Unpack message M122_MotorTorqueData2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_m122_motor_torque_data2_unpack(
    struct master_dbc_m122_motor_torque_data2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from M122_MotorTorqueData2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_m122_motor_torque_data2_init(struct master_dbc_m122_motor_torque_data2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_m122_motor_torque_data2_motor1_creep_torque_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m122_motor_torque_data2_motor1_creep_torque_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m122_motor_torque_data2_motor1_creep_torque_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_m122_motor_torque_data2_motor1_reverse_torque_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m122_motor_torque_data2_motor1_reverse_torque_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m122_motor_torque_data2_motor1_reverse_torque_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m122_motor_torque_data2_motor1_torque_trim_table_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m122_motor_torque_data2_motor1_torque_trim_table_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m122_motor_torque_data2_motor1_torque_trim_table_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_m122_motor_torque_data2_motor_tq_spd_feed_forward_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m122_motor_torque_data2_motor_tq_spd_feed_forward_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m122_motor_torque_data2_motor_tq_spd_feed_forward_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t master_dbc_m122_motor_torque_data2_pedal_tq_mult_tbl1_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m122_motor_torque_data2_pedal_tq_mult_tbl1_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m122_motor_torque_data2_pedal_tq_mult_tbl1_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t master_dbc_m122_motor_torque_data2_pedal_tq_mult_tbl2_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m122_motor_torque_data2_pedal_tq_mult_tbl2_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m122_motor_torque_data2_pedal_tq_mult_tbl2_is_in_range(int8_t value);

/**
 * Pack message M124_MotorTorqueData3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_m124_motor_torque_data3_pack(
    uint8_t *dst_p,
    const struct master_dbc_m124_motor_torque_data3_t *src_p,
    size_t size);

/**
 * Unpack message M124_MotorTorqueData3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_m124_motor_torque_data3_unpack(
    struct master_dbc_m124_motor_torque_data3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from M124_MotorTorqueData3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_m124_motor_torque_data3_init(struct master_dbc_m124_motor_torque_data3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m124_motor_torque_data3_motor2_torque_request_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m124_motor_torque_data3_motor2_torque_request_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m124_motor_torque_data3_motor2_torque_request_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_m124_motor_torque_data3_motor2_tq_lim_hi_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m124_motor_torque_data3_motor2_tq_lim_hi_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m124_motor_torque_data3_motor2_tq_lim_hi_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m124_motor_torque_data3_motor2_tq_lim_lo_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m124_motor_torque_data3_motor2_tq_lim_lo_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m124_motor_torque_data3_motor2_tq_lim_lo_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_m124_motor_torque_data3_motor2_tq_table_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m124_motor_torque_data3_motor2_tq_table_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m124_motor_torque_data3_motor2_tq_table_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m124_motor_torque_data3_motor2_tq_lim_mult_hi_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m124_motor_torque_data3_motor2_tq_lim_mult_hi_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m124_motor_torque_data3_motor2_tq_lim_mult_hi_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m124_motor_torque_data3_motor2_tq_lim_mult_lo_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m124_motor_torque_data3_motor2_tq_lim_mult_lo_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m124_motor_torque_data3_motor2_tq_lim_mult_lo_is_in_range(uint8_t value);

/**
 * Pack message M126_MotorTorqueData4.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_m126_motor_torque_data4_pack(
    uint8_t *dst_p,
    const struct master_dbc_m126_motor_torque_data4_t *src_p,
    size_t size);

/**
 * Unpack message M126_MotorTorqueData4.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_m126_motor_torque_data4_unpack(
    struct master_dbc_m126_motor_torque_data4_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from M126_MotorTorqueData4.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_m126_motor_torque_data4_init(struct master_dbc_m126_motor_torque_data4_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_m126_motor_torque_data4_motor2_creep_torque_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m126_motor_torque_data4_motor2_creep_torque_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m126_motor_torque_data4_motor2_creep_torque_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_m126_motor_torque_data4_motor2_reverse_torque_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m126_motor_torque_data4_motor2_reverse_torque_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m126_motor_torque_data4_motor2_reverse_torque_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m126_motor_torque_data4_motor2_torque_trim_table_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m126_motor_torque_data4_motor2_torque_trim_table_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m126_motor_torque_data4_motor2_torque_trim_table_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_m126_motor_torque_data4_regen_brake_torque_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m126_motor_torque_data4_regen_brake_torque_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m126_motor_torque_data4_regen_brake_torque_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t master_dbc_m126_motor_torque_data4_pedal_tq_mult_tbl3_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m126_motor_torque_data4_pedal_tq_mult_tbl3_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m126_motor_torque_data4_pedal_tq_mult_tbl3_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t master_dbc_m126_motor_torque_data4_pedal_tq_mult_tbl4_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m126_motor_torque_data4_pedal_tq_mult_tbl4_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m126_motor_torque_data4_pedal_tq_mult_tbl4_is_in_range(int8_t value);

/**
 * Pack message M128_MotorTorqueData5.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_m128_motor_torque_data5_pack(
    uint8_t *dst_p,
    const struct master_dbc_m128_motor_torque_data5_t *src_p,
    size_t size);

/**
 * Unpack message M128_MotorTorqueData5.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_m128_motor_torque_data5_unpack(
    struct master_dbc_m128_motor_torque_data5_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from M128_MotorTorqueData5.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_m128_motor_torque_data5_init(struct master_dbc_m128_motor_torque_data5_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m128_motor_torque_data5_motor3_torque_request_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m128_motor_torque_data5_motor3_torque_request_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m128_motor_torque_data5_motor3_torque_request_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_m128_motor_torque_data5_motor3_tq_lim_hi_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m128_motor_torque_data5_motor3_tq_lim_hi_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m128_motor_torque_data5_motor3_tq_lim_hi_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m128_motor_torque_data5_motor3_tq_lim_lo_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m128_motor_torque_data5_motor3_tq_lim_lo_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m128_motor_torque_data5_motor3_tq_lim_lo_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_m128_motor_torque_data5_motor3_tq_table_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m128_motor_torque_data5_motor3_tq_table_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m128_motor_torque_data5_motor3_tq_table_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m128_motor_torque_data5_motor3_tq_lim_mult_hi_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m128_motor_torque_data5_motor3_tq_lim_mult_hi_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m128_motor_torque_data5_motor3_tq_lim_mult_hi_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m128_motor_torque_data5_motor3_tq_lim_mult_lo_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m128_motor_torque_data5_motor3_tq_lim_mult_lo_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m128_motor_torque_data5_motor3_tq_lim_mult_lo_is_in_range(uint8_t value);

/**
 * Pack message M130_MotorTorqueData6.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_m130_motor_torque_data6_pack(
    uint8_t *dst_p,
    const struct master_dbc_m130_motor_torque_data6_t *src_p,
    size_t size);

/**
 * Unpack message M130_MotorTorqueData6.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_m130_motor_torque_data6_unpack(
    struct master_dbc_m130_motor_torque_data6_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from M130_MotorTorqueData6.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_m130_motor_torque_data6_init(struct master_dbc_m130_motor_torque_data6_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_m130_motor_torque_data6_motor3_creep_torque_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m130_motor_torque_data6_motor3_creep_torque_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m130_motor_torque_data6_motor3_creep_torque_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_m130_motor_torque_data6_motor3_reverse_torque_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m130_motor_torque_data6_motor3_reverse_torque_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m130_motor_torque_data6_motor3_reverse_torque_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m130_motor_torque_data6_motor3_torque_trim_table_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m130_motor_torque_data6_motor3_torque_trim_table_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m130_motor_torque_data6_motor3_torque_trim_table_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m130_motor_torque_data6_motor4_torque_request_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m130_motor_torque_data6_motor4_torque_request_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m130_motor_torque_data6_motor4_torque_request_is_in_range(int16_t value);

/**
 * Pack message M132_MotorTorqueData7.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_m132_motor_torque_data7_pack(
    uint8_t *dst_p,
    const struct master_dbc_m132_motor_torque_data7_t *src_p,
    size_t size);

/**
 * Unpack message M132_MotorTorqueData7.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_m132_motor_torque_data7_unpack(
    struct master_dbc_m132_motor_torque_data7_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from M132_MotorTorqueData7.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_m132_motor_torque_data7_init(struct master_dbc_m132_motor_torque_data7_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_m132_motor_torque_data7_motor4_tq_lim_hi_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m132_motor_torque_data7_motor4_tq_lim_hi_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m132_motor_torque_data7_motor4_tq_lim_hi_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m132_motor_torque_data7_motor4_tq_lim_lo_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m132_motor_torque_data7_motor4_tq_lim_lo_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m132_motor_torque_data7_motor4_tq_lim_lo_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_m132_motor_torque_data7_motor4_tq_table_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m132_motor_torque_data7_motor4_tq_table_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m132_motor_torque_data7_motor4_tq_table_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_m132_motor_torque_data7_motor4_creep_torque_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m132_motor_torque_data7_motor4_creep_torque_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m132_motor_torque_data7_motor4_creep_torque_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m132_motor_torque_data7_motor4_tq_lim_mult_hi_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m132_motor_torque_data7_motor4_tq_lim_mult_hi_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m132_motor_torque_data7_motor4_tq_lim_mult_hi_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m132_motor_torque_data7_motor4_tq_lim_mult_lo_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m132_motor_torque_data7_motor4_tq_lim_mult_lo_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m132_motor_torque_data7_motor4_tq_lim_mult_lo_is_in_range(uint8_t value);

/**
 * Pack message M134_MotorTorqueData8.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_m134_motor_torque_data8_pack(
    uint8_t *dst_p,
    const struct master_dbc_m134_motor_torque_data8_t *src_p,
    size_t size);

/**
 * Unpack message M134_MotorTorqueData8.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_m134_motor_torque_data8_unpack(
    struct master_dbc_m134_motor_torque_data8_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from M134_MotorTorqueData8.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_m134_motor_torque_data8_init(struct master_dbc_m134_motor_torque_data8_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_m134_motor_torque_data8_motor4_reverse_torque_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m134_motor_torque_data8_motor4_reverse_torque_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m134_motor_torque_data8_motor4_reverse_torque_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m134_motor_torque_data8_motor4_torque_trim_table_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m134_motor_torque_data8_motor4_torque_trim_table_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m134_motor_torque_data8_motor4_torque_trim_table_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m134_motor_torque_data8_launch_torque_multiplier_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m134_motor_torque_data8_launch_torque_multiplier_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m134_motor_torque_data8_launch_torque_multiplier_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m134_motor_torque_data8_launch_torque_time_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m134_motor_torque_data8_launch_torque_time_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m134_motor_torque_data8_launch_torque_time_is_in_range(uint8_t value);

/**
 * Pack message M136_MotorSpeedData1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_m136_motor_speed_data1_pack(
    uint8_t *dst_p,
    const struct master_dbc_m136_motor_speed_data1_t *src_p,
    size_t size);

/**
 * Unpack message M136_MotorSpeedData1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_m136_motor_speed_data1_unpack(
    struct master_dbc_m136_motor_speed_data1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from M136_MotorSpeedData1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_m136_motor_speed_data1_init(struct master_dbc_m136_motor_speed_data1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_m136_motor_speed_data1_idle_target_speed_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m136_motor_speed_data1_idle_target_speed_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m136_motor_speed_data1_idle_target_speed_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_m136_motor_speed_data1_start_ramp_target_speed_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m136_motor_speed_data1_start_ramp_target_speed_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m136_motor_speed_data1_start_ramp_target_speed_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_m136_motor_speed_data1_free_rev_target_speed_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m136_motor_speed_data1_free_rev_target_speed_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m136_motor_speed_data1_free_rev_target_speed_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_m136_motor_speed_data1_burnout_target_speed_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m136_motor_speed_data1_burnout_target_speed_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m136_motor_speed_data1_burnout_target_speed_is_in_range(uint16_t value);

/**
 * Pack message M138_MotorSpeedData2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_m138_motor_speed_data2_pack(
    uint8_t *dst_p,
    const struct master_dbc_m138_motor_speed_data2_t *src_p,
    size_t size);

/**
 * Unpack message M138_MotorSpeedData2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_m138_motor_speed_data2_unpack(
    struct master_dbc_m138_motor_speed_data2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from M138_MotorSpeedData2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_m138_motor_speed_data2_init(struct master_dbc_m138_motor_speed_data2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_m138_motor_speed_data2_launch_target_speed_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m138_motor_speed_data2_launch_target_speed_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m138_motor_speed_data2_launch_target_speed_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t master_dbc_m138_motor_speed_data2_motor_target_speed_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m138_motor_speed_data2_motor_target_speed_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m138_motor_speed_data2_motor_target_speed_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m138_motor_speed_data2_speed_control_pid_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m138_motor_speed_data2_speed_control_pid_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m138_motor_speed_data2_speed_control_pid_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m138_motor_speed_data2_speed_control_pid_error_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m138_motor_speed_data2_speed_control_pid_error_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m138_motor_speed_data2_speed_control_pid_error_is_in_range(int16_t value);

/**
 * Pack message M140_MotorSpeedData3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_m140_motor_speed_data3_pack(
    uint8_t *dst_p,
    const struct master_dbc_m140_motor_speed_data3_t *src_p,
    size_t size);

/**
 * Unpack message M140_MotorSpeedData3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_m140_motor_speed_data3_unpack(
    struct master_dbc_m140_motor_speed_data3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from M140_MotorSpeedData3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_m140_motor_speed_data3_init(struct master_dbc_m140_motor_speed_data3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m140_motor_speed_data3_speed_control_pid_p_term_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m140_motor_speed_data3_speed_control_pid_p_term_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m140_motor_speed_data3_speed_control_pid_p_term_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m140_motor_speed_data3_speed_control_pid_i_term_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m140_motor_speed_data3_speed_control_pid_i_term_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m140_motor_speed_data3_speed_control_pid_i_term_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t master_dbc_m140_motor_speed_data3_speed_control_pid_d_term_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m140_motor_speed_data3_speed_control_pid_d_term_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m140_motor_speed_data3_speed_control_pid_d_term_is_in_range(int16_t value);

/**
 * Pack message M144_VCU_FaultStates1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int master_dbc_m144_vcu_fault_states1_pack(
    uint8_t *dst_p,
    const struct master_dbc_m144_vcu_fault_states1_t *src_p,
    size_t size);

/**
 * Unpack message M144_VCU_FaultStates1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int master_dbc_m144_vcu_fault_states1_unpack(
    struct master_dbc_m144_vcu_fault_states1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from M144_VCU_FaultStates1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int master_dbc_m144_vcu_fault_states1_init(struct master_dbc_m144_vcu_fault_states1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m144_vcu_fault_states1_fault_acc_led_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m144_vcu_fault_states1_fault_acc_led_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m144_vcu_fault_states1_fault_acc_led_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m144_vcu_fault_states1_fault_acc_power_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m144_vcu_fault_states1_fault_acc_power_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m144_vcu_fault_states1_fault_acc_power_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m144_vcu_fault_states1_fault_acc_pedal1_input_hi_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m144_vcu_fault_states1_fault_acc_pedal1_input_hi_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m144_vcu_fault_states1_fault_acc_pedal1_input_hi_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m144_vcu_fault_states1_fault_acc_pedal1_input_lo_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m144_vcu_fault_states1_fault_acc_pedal1_input_lo_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m144_vcu_fault_states1_fault_acc_pedal1_input_lo_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m144_vcu_fault_states1_fault_acc_pedal1_spike_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m144_vcu_fault_states1_fault_acc_pedal1_spike_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m144_vcu_fault_states1_fault_acc_pedal1_spike_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m144_vcu_fault_states1_fault_acc_pedal2_input_hi_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m144_vcu_fault_states1_fault_acc_pedal2_input_hi_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m144_vcu_fault_states1_fault_acc_pedal2_input_hi_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m144_vcu_fault_states1_fault_acc_pedal2_input_lo_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m144_vcu_fault_states1_fault_acc_pedal2_input_lo_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m144_vcu_fault_states1_fault_acc_pedal2_input_lo_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m144_vcu_fault_states1_fault_acc_pedal2_spike_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m144_vcu_fault_states1_fault_acc_pedal2_spike_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m144_vcu_fault_states1_fault_acc_pedal2_spike_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m144_vcu_fault_states1_fault_accel_pedal_x_check_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m144_vcu_fault_states1_fault_accel_pedal_x_check_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m144_vcu_fault_states1_fault_accel_pedal_x_check_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m144_vcu_fault_states1_fault_brake_lamps_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m144_vcu_fault_states1_fault_brake_lamps_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m144_vcu_fault_states1_fault_brake_lamps_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m144_vcu_fault_states1_fault_brk_press_input_hi_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m144_vcu_fault_states1_fault_brk_press_input_hi_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m144_vcu_fault_states1_fault_brk_press_input_hi_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m144_vcu_fault_states1_fault_brk_press_input_lo_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m144_vcu_fault_states1_fault_brk_press_input_lo_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m144_vcu_fault_states1_fault_brk_press_input_lo_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m144_vcu_fault_states1_fault_cooling_pump1_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m144_vcu_fault_states1_fault_cooling_pump1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m144_vcu_fault_states1_fault_cooling_pump1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m144_vcu_fault_states1_fault_cooling_pump2_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m144_vcu_fault_states1_fault_cooling_pump2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m144_vcu_fault_states1_fault_cooling_pump2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m144_vcu_fault_states1_fault_cool_temp1_input_hi_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m144_vcu_fault_states1_fault_cool_temp1_input_hi_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m144_vcu_fault_states1_fault_cool_temp1_input_hi_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m144_vcu_fault_states1_fault_cool_temp1_input_lo_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m144_vcu_fault_states1_fault_cool_temp1_input_lo_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m144_vcu_fault_states1_fault_cool_temp1_input_lo_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m144_vcu_fault_states1_fault_cool_temp2_input_hi_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m144_vcu_fault_states1_fault_cool_temp2_input_hi_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m144_vcu_fault_states1_fault_cool_temp2_input_hi_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m144_vcu_fault_states1_fault_cool_temp2_input_lo_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m144_vcu_fault_states1_fault_cool_temp2_input_lo_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m144_vcu_fault_states1_fault_cool_temp2_input_lo_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m144_vcu_fault_states1_fault_dc_voltage_safe_light_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m144_vcu_fault_states1_fault_dc_voltage_safe_light_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m144_vcu_fault_states1_fault_dc_voltage_safe_light_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m144_vcu_fault_states1_fault_head_lamps_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m144_vcu_fault_states1_fault_head_lamps_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m144_vcu_fault_states1_fault_head_lamps_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m144_vcu_fault_states1_fault_idle_target_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m144_vcu_fault_states1_fault_idle_target_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m144_vcu_fault_states1_fault_idle_target_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m144_vcu_fault_states1_fault_ign_chg_plug_x_check_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m144_vcu_fault_states1_fault_ign_chg_plug_x_check_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m144_vcu_fault_states1_fault_ign_chg_plug_x_check_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m144_vcu_fault_states1_fault_mc1_contactor_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m144_vcu_fault_states1_fault_mc1_contactor_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m144_vcu_fault_states1_fault_mc1_contactor_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m144_vcu_fault_states1_fault_mc1_supply_voltage_low_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m144_vcu_fault_states1_fault_mc1_supply_voltage_low_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m144_vcu_fault_states1_fault_mc1_supply_voltage_low_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m144_vcu_fault_states1_fault_mc2_contactor_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m144_vcu_fault_states1_fault_mc2_contactor_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m144_vcu_fault_states1_fault_mc2_contactor_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m144_vcu_fault_states1_fault_mc2_supply_voltage_low_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m144_vcu_fault_states1_fault_mc2_supply_voltage_low_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m144_vcu_fault_states1_fault_mc2_supply_voltage_low_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m144_vcu_fault_states1_fault_mc3_contactor_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m144_vcu_fault_states1_fault_mc3_contactor_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m144_vcu_fault_states1_fault_mc3_contactor_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m144_vcu_fault_states1_fault_mc3_supply_voltage_low_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m144_vcu_fault_states1_fault_mc3_supply_voltage_low_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m144_vcu_fault_states1_fault_mc3_supply_voltage_low_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m144_vcu_fault_states1_fault_mc4_contactor_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m144_vcu_fault_states1_fault_mc4_contactor_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m144_vcu_fault_states1_fault_mc4_contactor_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m144_vcu_fault_states1_fault_mc4_supply_voltage_low_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m144_vcu_fault_states1_fault_mc4_supply_voltage_low_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m144_vcu_fault_states1_fault_mc4_supply_voltage_low_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m144_vcu_fault_states1_fault_mc5_supply_voltage_low_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m144_vcu_fault_states1_fault_mc5_supply_voltage_low_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m144_vcu_fault_states1_fault_mc5_supply_voltage_low_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m144_vcu_fault_states1_fault_line_lock_sol_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m144_vcu_fault_states1_fault_line_lock_sol_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m144_vcu_fault_states1_fault_line_lock_sol_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m144_vcu_fault_states1_fault_manual_regen1_input_hi_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m144_vcu_fault_states1_fault_manual_regen1_input_hi_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m144_vcu_fault_states1_fault_manual_regen1_input_hi_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m144_vcu_fault_states1_fault_manual_regen1_input_lo_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m144_vcu_fault_states1_fault_manual_regen1_input_lo_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m144_vcu_fault_states1_fault_manual_regen1_input_lo_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m144_vcu_fault_states1_fault_manual_regen1_spike_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m144_vcu_fault_states1_fault_manual_regen1_spike_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m144_vcu_fault_states1_fault_manual_regen1_spike_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m144_vcu_fault_states1_fault_manual_regen2_input_hi_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m144_vcu_fault_states1_fault_manual_regen2_input_hi_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m144_vcu_fault_states1_fault_manual_regen2_input_hi_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m144_vcu_fault_states1_fault_manual_regen2_input_lo_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m144_vcu_fault_states1_fault_manual_regen2_input_lo_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m144_vcu_fault_states1_fault_manual_regen2_input_lo_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m144_vcu_fault_states1_fault_manual_regen2_spike_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m144_vcu_fault_states1_fault_manual_regen2_spike_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m144_vcu_fault_states1_fault_manual_regen2_spike_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m144_vcu_fault_states1_fault_park_lamps_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m144_vcu_fault_states1_fault_park_lamps_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m144_vcu_fault_states1_fault_park_lamps_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m144_vcu_fault_states1_fault_regen_lever_x_chk_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m144_vcu_fault_states1_fault_regen_lever_x_chk_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m144_vcu_fault_states1_fault_regen_lever_x_chk_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m144_vcu_fault_states1_fault_reverse_lamps_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m144_vcu_fault_states1_fault_reverse_lamps_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m144_vcu_fault_states1_fault_reverse_lamps_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m144_vcu_fault_states1_fault_shift_sol_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m144_vcu_fault_states1_fault_shift_sol_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m144_vcu_fault_states1_fault_shift_sol_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m144_vcu_fault_states1_fault_trans_brk_sol_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m144_vcu_fault_states1_fault_trans_brk_sol_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m144_vcu_fault_states1_fault_trans_brk_sol_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m144_vcu_fault_states1_fault_trans_press_input_hi_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m144_vcu_fault_states1_fault_trans_press_input_hi_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m144_vcu_fault_states1_fault_trans_press_input_hi_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m144_vcu_fault_states1_fault_trans_press_input_lo_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m144_vcu_fault_states1_fault_trans_press_input_lo_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m144_vcu_fault_states1_fault_trans_press_input_lo_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m144_vcu_fault_states1_fault_trans_temp_input_hi_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m144_vcu_fault_states1_fault_trans_temp_input_hi_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m144_vcu_fault_states1_fault_trans_temp_input_hi_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m144_vcu_fault_states1_fault_trans_temp_input_lo_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m144_vcu_fault_states1_fault_trans_temp_input_lo_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m144_vcu_fault_states1_fault_trans_temp_input_lo_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m144_vcu_fault_states1_fault_wheel_bar_press1_input_hi_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m144_vcu_fault_states1_fault_wheel_bar_press1_input_hi_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m144_vcu_fault_states1_fault_wheel_bar_press1_input_hi_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m144_vcu_fault_states1_fault_wheel_bar_press1_input_lo_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m144_vcu_fault_states1_fault_wheel_bar_press1_input_lo_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m144_vcu_fault_states1_fault_wheel_bar_press1_input_lo_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m144_vcu_fault_states1_fault_wheel_bar_press2_input_hi_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m144_vcu_fault_states1_fault_wheel_bar_press2_input_hi_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m144_vcu_fault_states1_fault_wheel_bar_press2_input_hi_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m144_vcu_fault_states1_fault_wheel_bar_press2_input_lo_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m144_vcu_fault_states1_fault_wheel_bar_press2_input_lo_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m144_vcu_fault_states1_fault_wheel_bar_press2_input_lo_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m144_vcu_fault_states1_fault_wheel_speed_dd_spike_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m144_vcu_fault_states1_fault_wheel_speed_dd_spike_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m144_vcu_fault_states1_fault_wheel_speed_dd_spike_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m144_vcu_fault_states1_fault_wheel_speed_dl_spike_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m144_vcu_fault_states1_fault_wheel_speed_dl_spike_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m144_vcu_fault_states1_fault_wheel_speed_dl_spike_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m144_vcu_fault_states1_fault_wheel_speed_dr_spike_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m144_vcu_fault_states1_fault_wheel_speed_dr_spike_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m144_vcu_fault_states1_fault_wheel_speed_dr_spike_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m144_vcu_fault_states1_fault_wheel_speed_nl_spike_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m144_vcu_fault_states1_fault_wheel_speed_nl_spike_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m144_vcu_fault_states1_fault_wheel_speed_nl_spike_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t master_dbc_m144_vcu_fault_states1_fault_wheel_speed_nr_spike_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float master_dbc_m144_vcu_fault_states1_fault_wheel_speed_nr_spike_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool master_dbc_m144_vcu_fault_states1_fault_wheel_speed_nr_spike_is_in_range(uint8_t value);


#ifdef __cplusplus
}
#endif

#endif
